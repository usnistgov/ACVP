



TBD                                                     A. Vassilev, Ed.
Internet-Draft            National Institute of Standards and Technology
Intended status: Informational                            March 13, 2017
Expires: September 14, 2017


     ACVP Deterministic Random Bit Generator (DRBG) Algorithm JSON
                             Specification
                       draft-ietf-acvp-subdrbg-00

Abstract

   This document defines the JSON schema for testing DRBG
   implementations from SP 800-90A with the ACVP specification.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 14, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Vassilev               Expires September 14, 2017               [Page 1]

Internet-Draft                DRBG Alg JSON                   March 2017


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   2
     1.2.  Default values  . . . . . . . . . . . . . . . . . . . . .   2
   2.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     2.1.  Supported DRBG Algorithms . . . . . . . . . . . . . . . .   3
     2.2.  Required Prerequisite Algorithms for DRBG Validations . .   4
     2.3.  Supported DRBG Algorithm Capabilities . . . . . . . . . .   4
   3.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .   8
     3.1.  Test Groups JSON Schema . . . . . . . . . . . . . . . . .   9
     3.2.  Test Case JSON Schema . . . . . . . . . . . . . . . . . .  10
   4.  Test Vector Responses . . . . . . . . . . . . . . . . . . . .  12
   5.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  12
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  13
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  13
   8.  Normative References  . . . . . . . . . . . . . . . . . . . .  13
   Appendix A.  Example DRBG Capabilities JSON Object  . . . . . . .  13
   Appendix B.  Example Test Vectors JSON Object . . . . . . . . . .  16
   Appendix C.  Example Test Results JSON Object . . . . . . . . . .  18
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  20

1.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing NIST-
   approved DRBG algorithms from SP 800-90A [SP800-90A] using ACVP.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].

1.2.  Default values

   ACVP has default values for many of the input parameters for testing
   the DRBG algorithms.For example, the Entropy Input, Nonce,
   Personalization String, and Addtional Input parameters have default



Vassilev               Expires September 14, 2017               [Page 2]

Internet-Draft                DRBG Alg JSON                   March 2017


   values.  The specific details and restrictions on each of these input
   lengths is specified in Section 2, Table 3 and the notes following
   it.  To indicate a preference for using a default value for any of
   these parameters, the value zero (0) should be set.  If the
   implementation does not support one of these defaults, the
   corresponding supported bit length values shall be set explicitly.

2.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of DRBG algorithms to the ACVP
   server.

2.1.  Supported DRBG Algorithms

   The following DRBG algorithms and modes may be advertised by the ACVP
   compliant crypto module:

                +----------------------+-----------------+
                | JSON algorithm value | JSON mode value |
                +----------------------+-----------------+
                | "hashDRBG"           | "SHA-1"         |
                |                      | "SHA-224"       |
                |                      | "SHA-256"       |
                |                      | "SHA-384"       |
                |                      | "SHA-512"       |
                |                      | "SHA-512/224"   |
                |                      | "SHA-512/256"   |
                |                      |                 |
                | "hmacDRBG"           | "SHA-1"         |
                |                      | "SHA-224"       |
                |                      | "SHA-256"       |
                |                      | "SHA-384"       |
                |                      | "SHA-512"       |
                |                      | "SHA-512/224"   |
                |                      | "SHA-512/256"   |
                |                      |                 |
                | "ctrDRBG"            | "3KeyTDEA"      |
                |                      | "AES-128"       |
                |                      | "AES-192"       |
                |                      | "AES-256"       |
                +----------------------+-----------------+

          Table 1: Supported DRBG Algorithm and Modes JSON Values




Vassilev               Expires September 14, 2017               [Page 3]

Internet-Draft                DRBG Alg JSON                   March 2017


2.2.  Required Prerequisite Algorithms for DRBG Validations

   Each DRBG implementation relies on other cryptographic primitives
   (algorithms) - see [SP800-90A].  For example, a hashDRBG uses an
   underlying hash algorithm.  Each of these underlying algorithm
   primitives must be validated, either separately or as part of the
   same submission.  ACVP provides a mechanism for specifying the
   required prerequisites:

   +--------------+--------------+--------------+-----------+----------+
   | JSON Value   | Description  | JSON type    | Valid     | Optional |
   |              |              |              | Values    |          |
   +--------------+--------------+--------------+-----------+----------+
   | algorithm    | a            | value        | "SHA",    | No       |
   |              | prerequisite |              | "HMAC",   |          |
   |              | algorithm    |              | "AES",    |          |
   |              |              |              | "TDES"    |          |
   |              |              |              |           |          |
   | valValue     | algorithm    | value        | actual    | No       |
   |              | validation   |              | number,   |          |
   |              | number       |              | e.g.      |          |
   |              |              |              | "123456", |          |
   |              |              |              | or "same" |          |
   |              |              |              |           |          |
   | prereqAlgVal | prerequistie | object with  | see above | No       |
   |              | algorithm    | algorithm    |           |          |
   |              | validation   | and valValue |           |          |
   |              |              | properties   |           |          |
   |              |              |              |           |          |
   | prereqVals   | prerequistie | array of     | see above | No       |
   |              | algorithm    | prereqAlgVal |           |          |
   |              | validations  | objects      |           |          |
   +--------------+--------------+--------------+-----------+----------+

        Table 2: Required DRBG Prerequisite Algorithms JSON Values

2.3.  Supported DRBG Algorithm Capabilities

   The algorithm capabilities are advertised as JSON objects within the
   'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification for details on the
   registration message.  Each DRBG algorithm capability advertised is a
   self-contained JSON object.  The following JSON values are used for
   DRBG algorithm capabilities:




Vassilev               Expires September 14, 2017               [Page 4]

Internet-Draft                DRBG Alg JSON                   March 2017


   +-----------------+-----------+-----------+--------------+----------+
   | JSON Value      | Descripti | JSON type | Valid Values | Optional |
   |                 | on        |           |              |          |
   +-----------------+-----------+-----------+--------------+----------+
   | algorithm       | The DRBG  | value     | See Table 1  | No       |
   |                 | algorithm |           |              |          |
   |                 | to be val |           |              |          |
   |                 | idated.   |           |              |          |
   |                 |           |           |              |          |
   | mode            | The       | value     | See Table 1  | No       |
   |                 | algorithm |           |              |          |
   |                 | mode to   |           |              |          |
   |                 | be        |           |              |          |
   |                 | validated |           |              |          |
   |                 |           |           |              |          |
   | derFuncEnabled  | derivatio | value     | yes, no      | Yes, app |
   |                 | n         |           |              | licable  |
   |                 | function  |           |              | to       |
   |                 | option    |           |              | ctrDRBG  |
   |                 |           |           |              | only     |
   |                 |           |           |              |          |
   | prereqVals      | The prere | array of  | array        | No       |
   |                 | quisite   | prereqAlg |              |          |
   |                 | algorithm | Val       |              |          |
   |                 | validatio | objects - |              |          |
   |                 | ns        | see       |              |          |
   |                 |           | Section   |              |          |
   |                 |           | 2.2       |              |          |
   |                 |           |           |              |          |
   | predResistanceE | an implem | value     | yes, no      | No       |
   | nabled          | entation  |           |              |          |
   |                 | that can  |           |              |          |
   |                 | be used   |           |              |          |
   |                 | with pred |           |              |          |
   |                 | iction re |           |              |          |
   |                 | sistance. |           |              |          |
   |                 | See Table |           |              |          |
   |                 | 3 notes   |           |              |          |
   |                 | below.    |           |              |          |
   |                 |           |           |              |          |
   | reseedImplement | Reseeding | value     | yes, no      | No       |
   | ed              | of the    |           |              |          |
   |                 | DRBG      |           |              |          |
   |                 | shall be  |           |              |          |
   |                 | performed |           |              |          |
   |                 | in accord |           |              |          |
   |                 | ance with |           |              |          |
   |                 | the speci |           |              |          |



Vassilev               Expires September 14, 2017               [Page 5]

Internet-Draft                DRBG Alg JSON                   March 2017


   |                 | fication  |           |              |          |
   |                 | for the   |           |              |          |
   |                 | given     |           |              |          |
   |                 | DRBG mech |           |              |          |
   |                 | anism.    |           |              |          |
   |                 | See Table |           |              |          |
   |                 | 3 notes   |           |              |          |
   |                 | below.    |           |              |          |
   |                 |           |           |              |          |
   | entropyInputRan | the       | range     | min - at     | No       |
   | ge              | supported |           | least the    |          |
   |                 | bit       |           | maximum      |          |
   |                 | lengths   |           | security     |          |
   |                 | of the    |           | strength     |          |
   |                 | entropy   |           | supported by |          |
   |                 | input.    |           | the mechanis |          |
   |                 | See Table |           | m/option,    |          |
   |                 | 3 notes   |           | max - larger |          |
   |                 | below.    |           | values are   |          |
   |                 |           |           | optional,    |          |
   |                 |           |           | step -       |          |
   |                 |           |           | increment.   |          |
   |                 |           |           |              |          |
   | nonceLenRange   | .See      | range     | min - at     | No       |
   |                 | Table 3   |           | least one    |          |
   |                 | notes     |           | half of the  |          |
   |                 | below.    |           | maximum      |          |
   |                 |           |           | security     |          |
   |                 |           |           | strength     |          |
   |                 |           |           | supported by |          |
   |                 |           |           | the mechanis |          |
   |                 |           |           | m/option;    |          |
   |                 |           |           | max: -       |          |
   |                 |           |           | longer       |          |
   |                 |           |           | nonces are   |          |
   |                 |           |           | permitted,   |          |
   |                 |           |           | step -       |          |
   |                 |           |           | increment    |          |
   |                 |           |           |              |          |
   | persoStringLenR | .See      | range     | min - the    | No       |
   | ange            | Table 3   |           | maximum      |          |
   |                 | notes     |           | security     |          |
   |                 | below.    |           | strength     |          |
   |                 |           |           | supported by |          |
   |                 |           |           | the mechanis |          |
   |                 |           |           | m/option;    |          |
   |                 |           |           | max -        |          |
   |                 |           |           | largest      |          |



Vassilev               Expires September 14, 2017               [Page 6]

Internet-Draft                DRBG Alg JSON                   March 2017


   |                 |           |           | supported    |          |
   |                 |           |           | length, step |          |
   |                 |           |           | - increment  |          |
   |                 |           |           | to calculate |          |
   |                 |           |           | all          |          |
   |                 |           |           | supported    |          |
   |                 |           |           | lengths. Set |          |
   |                 |           |           | all to zero  |          |
   |                 |           |           | (0) if not   |          |
   |                 |           |           | supported.   |          |
   |                 |           |           |              |          |
   | additionalInput | .See      | range     | min - the    | No       |
   | LenRange        | Table 3   |           | maximum      |          |
   |                 | notes     |           | security     |          |
   |                 | below.    |           | strength     |          |
   |                 |           |           | supported by |          |
   |                 |           |           | the mechanis |          |
   |                 |           |           | m/option;    |          |
   |                 |           |           | max -        |          |
   |                 |           |           | largest      |          |
   |                 |           |           | supported    |          |
   |                 |           |           | length, step |          |
   |                 |           |           | - increment  |          |
   |                 |           |           | to calculate |          |
   |                 |           |           | all          |          |
   |                 |           |           | supported    |          |
   |                 |           |           | lengths; set |          |
   |                 |           |           | all to zero  |          |
   |                 |           |           | (0) if not   |          |
   |                 |           |           | supported.   |          |
   |                 |           |           |              |          |
   | returnedBitsLen | .See      | value     |              | No       |
   |                 | Table 3   |           |              |          |
   |                 | notes     |           |              |          |
   |                 | below.    |           |              |          |
   +-----------------+-----------+-----------+--------------+----------+

             Table 3: DRBG Algorithm Capabilities JSON Values

   Note 1: If an implementation can be used without prediction
   resistance, the flag predResistanceNotEnabled shall be set.

   Note 2: Implementations that either have prediction resistance always
   ON or always OFF shall have only one of the prediction resistance
   flags set.

   Note 3: Implementations that can be used either way will have both
   flags set.



Vassilev               Expires September 14, 2017               [Page 7]

Internet-Draft                DRBG Alg JSON                   March 2017


   Note 4: For ctrDRBG implementations, at least one of the derivation
   function options shall be set depending on the one actually used or
   both

   Note 5: All DRBGs are tested at their maximum supported security
   strength so this is the minimum bit length of the entropy input that
   ACVP will accept.  The maximum supported security strength is also
   the default value for this input.  Longer entropy inputs are
   permitted, with the following exception: for ctrDRBG with no df, the
   bit length must equal the seed length.

   Note 6: ctrDRBG with no derivation function (ctrDRBGWithoutDerFunc)
   does not use a nonce; the nonce values, if supplied, will be ignored
   for this case.  The default nonce bit length is one-half the maximum
   security strength supported by the mechanism/option.

   Note 7: ACVP allows bit length values for persoString ranging from
   the maximum supported security strength except in the case of
   ctrDRBGWithoutDerFunc, where the second personalization string length
   must be less than or equal to the seed length.  If the implementation
   only supports one personalization string length, then set only that
   value as the range min and max and set the step to zero (0)..  If the
   implementation does not use a persoString, set all range parameters
   (min, max, step) to 0 (zero).

   Note 8: The addtionalInput configuration and restrictions are the
   same as those for the persoString.

3.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation session would require multiple test vector
   sets to be downloaded and processed by the ACVP client.  Each test
   vector set represents an individual algorithm, such as Hash_DRBG,
   etc.  This section describes the JSON schema for a test vector set
   used with DRBG algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.  The following table
   describes the JSON elements at the top level of the hierarchy.









Vassilev               Expires September 14, 2017               [Page 8]

Internet-Draft                DRBG Alg JSON                   March 2017


   +-------------+---------------------------------------------+-------+
   | JSON Value  | Description                                 | JSON  |
   |             |                                             | type  |
   +-------------+---------------------------------------------+-------+
   | version     | Protocol version identifier                 | value |
   |             |                                             |       |
   | vectorSetId | Unique numeric identifier for the vector    | value |
   |             | set                                         |       |
   |             |                                             |       |
   | algorithm   | The DRBG algorithm used for the test        | value |
   |             | vectors.  See Section 2.1 for possible      |       |
   |             | values.                                     |       |
   |             |                                             |       |
   | mode        | The DRBG algorithm mode used for the test   | value |
   |             | vectors.  See Section 2.1 for possible      |       |
   |             | values.                                     |       |
   |             |                                             |       |
   | testGroups  | Array of test group JSON objects, which are | array |
   |             | defined in Section 3.1                      |       |
   +-------------+---------------------------------------------+-------+

                      Table 4: Vector Set JSON Object

3.1.  Test Groups JSON Schema

   The test_groups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the DRBG JSON elements of the Test Group
   JSON object.

   ACVP allows default bit lengths for the inputs to specific
   algorithms, typically communicated as numerical value zero (0).  If
   an implementation does not support one of the defaults, the bit
   lengths the supported values shall be specified explicitly.













Vassilev               Expires September 14, 2017               [Page 9]

Internet-Draft                DRBG Alg JSON                   March 2017


   +-------------------+---------------------------+--------+----------+
   | JSON Value        | Description               | JSON   | Optional |
   |                   |                           | type   |          |
   +-------------------+---------------------------+--------+----------+
   | mode              | the mode of the DRBG, see | value  | No       |
   |                   | Section 2.1               |        |          |
   |                   |                           |        |          |
   | derFunc           | use derivation function   | value, | Yes      |
   |                   | or not                    | yes/no |          |
   |                   |                           |        |          |
   | predResistance    | use prediction resistance | value  | No       |
   |                   |                           | yes/no |          |
   |                   |                           |        |          |
   | entropyInputLen   | entropy length            | value  | No       |
   |                   |                           |        |          |
   | nonceLen          | nonce length              | value  | No       |
   |                   |                           |        |          |
   | persoStringLen    | personalization string    | value  | No       |
   |                   | length; set to 0 (zero)   |        |          |
   |                   | if not used/supported     |        |          |
   |                   |                           |        |          |
   | additonalInputLen | additional input length;  | value  | No       |
   |                   | set tp 0 (zero) if not    |        |          |
   |                   | used/supported            |        |          |
   |                   |                           |        |          |
   | returnedBitsLen   | returned bits length      | value  | No       |
   |                   |                           |        |          |
   | tests             | Array of individual test  | array  | No       |
   |                   | vector JSON objects,      |        |          |
   |                   | which are defined in      |        |          |
   |                   | Section 3.2               |        |          |
   +-------------------+---------------------------+--------+----------+

                      Table 5: Test Group JSON Object

3.2.  Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each test case.










Vassilev               Expires September 14, 2017              [Page 10]

Internet-Draft                DRBG Alg JSON                   March 2017


   +---------------------+--------------------------+-------+----------+
   | JSON Value          | Description              | JSON  | Optional |
   |                     |                          | type  |          |
   +---------------------+--------------------------+-------+----------+
   | tcId                | Numeric identifier for   | value | No       |
   |                     | the test case, unique    |       |          |
   |                     | across the entire vector |       |          |
   |                     | set.                     |       |          |
   |                     |                          |       |          |
   | entropyInput        | entropy value            | value | No       |
   |                     |                          |       |          |
   | nonce               | Value of the nonce       | value | No       |
   |                     |                          |       |          |
   | persoString         | value of the             | value | No       |
   |                     | personlization string    |       |          |
   |                     |                          |       |          |
   | predResistanceInput | array of additonal       | array | No       |
   |                     | input/entropy input      |       |          |
   |                     | value pairs for          |       |          |
   |                     | prediction resistance    |       |          |
   |                     | testing. See Table 7     |       |          |
   +---------------------+--------------------------+-------+----------+

                    Table 6: DRBG Test Case JSON Object

   Each prediction resistance test group contains an array of one or
   more test vectors, typically two.  Each test vector is a JSON object
   that represents a single test case to be processed by the ACVP
   client.  The following table describes the JSON elements for each
   DRBG predcition resistance test vector.

   +-----------------+------------------------------+-------+----------+
   | JSON Value      | Description                  | JSON  | Optional |
   |                 |                              | type  |          |
   +-----------------+------------------------------+-------+----------+
   | additionalInput | value of the additoinal      | value | No       |
   |                 | input string to use in       |       |          |
   |                 | predition resistance tests   |       |          |
   |                 |                              |       |          |
   | entropyInputPR  | value of the entropy input   | value | No       |
   |                 | to use in prediction         |       |          |
   |                 | resistance tests             |       |          |
   +-----------------+------------------------------+-------+----------+

           Table 7: Prediction Resistance Test Case JSON Object






Vassilev               Expires September 14, 2017              [Page 11]

Internet-Draft                DRBG Alg JSON                   March 2017


4.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

   +-------------+---------------------------------------------+-------+
   | JSON Value  | Description                                 | JSON  |
   |             |                                             | type  |
   +-------------+---------------------------------------------+-------+
   | version     | Protocol version identifier                 | value |
   |             |                                             |       |
   | vectorSetId | Unique numeric identifier for the vector    | value |
   |             | set                                         |       |
   |             |                                             |       |
   | testResults | Array of JSON objects that represent each   | array |
   |             | test vector result, which uses the same     |       |
   |             | JSON schema as defined in Section 3.2       |       |
   +-------------+---------------------------------------------+-------+

                 Table 8: Vector Set Response JSON Object

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each DRBG test vector.

   +--------------+---------------------------------+-------+----------+
   | JSON Value   | Description                     | JSON  | Optional |
   |              |                                 | type  |          |
   +--------------+---------------------------------+-------+----------+
   | tcId         | Numeric identifier for the test | value | No       |
   |              | case, unique across the entire  |       |          |
   |              | vector set.                     |       |          |
   |              |                                 |       |          |
   | returnedBits | value of the computed DRBG      | value | No       |
   |              | output                          |       |          |
   +--------------+---------------------------------+-------+----------+

                Table 9: DRBG Test Case Results JSON Object

5.  Acknowledgements

   TBD...






Vassilev               Expires September 14, 2017              [Page 12]

Internet-Draft                DRBG Alg JSON                   March 2017


6.  IANA Considerations

   This memo includes no request to IANA.

7.  Security Considerations

   Security considerations are addressed by the ACVP specification.

8.  Normative References

   [ACVP]     authSurName, authInitials., "ACVP Specification", 2016.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [SP800-90A]
              Barker, E. and J. Kelsey, "Recommendation for Random
              Number Generation Using Deterministic Random Bit
              Generators", June 2015,
              <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/
              NIST.SP.800-90Ar1.pdf>.

Appendix A.  Example DRBG Capabilities JSON Object

   The following is a example JSON object advertising support for
   ctrDRBG with 3KeyTDEA.























Vassilev               Expires September 14, 2017              [Page 13]

Internet-Draft                DRBG Alg JSON                   March 2017


            {
                "algorithm": "ctrDRBG",
                "mode": "3KeyTDEA",
                "derFuncEnabled":"yes",
                "prereqVals": [{"algorithm": "TDES", "valValue": "same"}],
                "predResistanceEnabled": "yes",
                "reseedImplemented" : "yes",
                "entropyInputRange":{ "min": 112,
                                "max": 256,
                                "step" : 144},
                "nonceLenRange": {"min" : 56,
                                "max" : 56,
                                "step" : 0},
                "persoStringLenRange": {"min": 112,
                                "max" : 112,
                                "step" : 0},
                "additionalInputLenRange":{ "min": 112,
                                "max" : 112,
                                "step" : 0},
                "returnedBitsLen":"256"
            }

   The following is a example JSON object advertising support for
   ctrDRBG with AES-128.

            {
                "algorithm": "ctrDRBG",
                "mode": "AES-128",
                "derFuncEnabled":"yes",
                "prereqVals": [{"algorithm": "AES", "valValue": "1234"}],
                "predResistanceEnabled": "yes",
                "reseedImplemented" : "yes",
                "entropyInputRange":{ "min": 128,
                                "max": 256,
                                "step" : 128},
                "nonceLenRange": {"min" : 64,
                                "max" : 64,
                                "step" : 0},
                "persoStringLenRange": {"min": 128,
                                "max" : 128,
                                "step" : 0},
                "additionalInputLenRange":{ "min": 128,
                                "max" : 128,
                                "step" : 0},
                "returnedBitsLen":"512"
            }





Vassilev               Expires September 14, 2017              [Page 14]

Internet-Draft                DRBG Alg JSON                   March 2017


   The following is a example JSON object advertising support for
   hashDRBG with AES-256.

            {
                "algorithm": "hashDRBG",
                "mode": "AES-256",
                "prereqVals": [{"algorithm": "AES", "valValue": "1234"}, {"algorithm": "SHA", "valValue": "5678"}],
                "predResistanceEnabled": "yes",
                "reseedImplemented" : "yes",
                 "entropyInputRange":{ "min": 256,
                                "max": 512,
                                "step" : 1},
                "nonceLenRange": {"min" : 128,
                                "max" : 256,
                                 "step" : 128},
                "persoStringLenRange": {"min": 256,
                                 "max" : 512,
                                 "step" : 1},
              "additionalInputLenRange":{ "min": 256,
                                 "max" : 512,
                                 "step" : 1},
                "returnedBitsLen":"1024"
            }

   The following is a example JSON object advertising support for
   hmacDRBG with AES-256.

            {
                "algorithm": "hmacDRBG",
                "mode": "AES-256",
                "prereqVals": [{"algorithm": "AES", "valValue": "1234"}, {"algorithm": "HMAC", "valValue": "9012"}],
                "predResistanceEnabled": "yes",
                "reseedImplemented" : "yes",
                "entropyInputRange":{ "min": 256,
                                 "max": 256,
                                 "step" : 0},
                "nonceLenRange": {"min" : 128,
                                 "max" : 128,
                                 "step" : 0},
                "persoStringLenRange": {"min": 256,
                                 "max" : 256,
                                 "step" : 0},
               "additionalInputLenRange":{ "min": 256,
                                 "max" : 256,
                                 "step" : 0},
                "returnedBitsLen":"1024"
            }




Vassilev               Expires September 14, 2017              [Page 15]

Internet-Draft                DRBG Alg JSON                   March 2017


Appendix B.  Example Test Vectors JSON Object

   The following is a example JSON object for ctrDRBG test vectors sent
   from the ACVP server to the crypto module.

                {
                  "version": "0.2",
                  "vectorSetId": "1133",
                  "algorithm": "ctrDRBG",
                  "mode": "3KeyTDEA",
                  "derFunc":"yes",
                  "predResistance": "yes",
                  "entropyInputLen":"112",
                  "nonceLen":"56",
                  "persoStringLen":"112",
                  "additionalInputLen":"112",
                  "returnedBitsLen":"256",
                  "testGroups": [
                    {
                      "type": "long",
                      "tests": [
                        {
                          "tcId": "1815",
                          "entropyInput":"78aac2cb444594e29dc97b0195b5",
                          "nonce":"41ef9c67ffe438",
                          "persoString":"b8e84de200a9239a043a7a9a6a03",
                          "additionalInput":"f1e8edf002b331ec49ec0c1f18fa",
                          "entropyInputPR": "6cd4096638bbaeda28289582a10d",
                          "additionalInput" : "f5357737023e3304508a00b3ba02",
                          "entropyInputPR" : "a0cdf5c1c670fd7b65a4f0a899e4"
                          },
                        {
                          "tcId": "1816",
                          "entropyInput" : "b8ab88b9c5fda8544b90a043684e",
                          "nonce": "f1bcc6ff60dd37",
                          "persoString" : "018c1f9d22f3c7f701a5f1cab07d",
                          "additionalInput" : "356a6e908bfce2d660f20f3fbd1e",
                          "entropyInputPR" : "bed693401bfd53ce4c36c2233ada",
                          "additionalInput" : "4321b3ab3a0ce88e02bdcd0306d9",
                          "entropyInputPR" : "a632ef16f20da17f02e484df4a41"
                        }
                      ]
                    }
                  ]
                }

   The following is a example JSON object for hmacDRBG test vectors sent
   from the ACVP server to the crypto module.



Vassilev               Expires September 14, 2017              [Page 16]

Internet-Draft                DRBG Alg JSON                   March 2017


                {
                  "version": "0.2",
                  "vectorSetId": "1146",
                  "algorithm": "hmacDRBG",
                  "mode": "AES-256",
                  "predResistance": "yes",
                  "entropyInputLen":"256",
                  "nonceLen":"128",
                  "persoStringLen":"256",
                  "additionalInputLen":"256",
                  "returnedBitsLen":"1024",
                  "testGroups": [
                    {
                      "type": "long",
                      "tests": [
                        {
                          "tcId": "2111",
                          "entropyInput":"ee3392c5f3de6f3f8c4f28d852afacd2cbaa89ed48d1c5d4311662962aa70a98",
                          "nonce":"b991a820fac75fd02642ad8fa651eda4",
                          "persoString":"30f3a50b0e2309dab93ea2aa095e5df8e4b2a42690572b31e53fb79a195481e5",
                          "additionalInput":"4ea46abe95b2e4184113f908ae30123207d481908b7af7ef348657bbf3b4a002",
                          "entropyInputPR": "e4413a2e404f12c644b0b1d7a49a0fbf3d8703d571ffd02168c11b4ade6fc903",
                          "additionalInput" : "61b7204c8fef294f2a9f2e73a83a8a7a04c38e3b3eaaed1b920abfceab912492",
                          "entropyInputPR" : "968ea185d1439fa2d67eb55ac93ba596b1ea679de7c6e44f80dc6f213455f1ed"
                          },
                        {
                          "tcId": "2112",
                          "entropyInput" : "a0ace75784b97224de2957e5f60dc85b25331fcf7901f37418d3c9de17ed4261",
                          "nonce": "b671308068fc7909a360c772f62a4c5e",
                          "persoString" : "338d5f2bd93262da154385e9ed90b7862e3c892f13e1d7d19924b2eb8b3bab21",
                          "additionalInput" : "7acd8bfae17ff4edbac3437817d6b3fce12a04c4034ac6bef0b1b88f7dcd7c85",
                          "entropyInputPR" : "47b26bbe93a5cc19a410523a072e04333f06c54af0049fc41e66213763020ef7",
                          "additionalInput" : "d4b24c74538e3a1083a2cc0a4414a9f558f0a2dc186e3b9a5294cd541acdad87",
                          "entropyInputPR" : "acb63f3b5995608a1331641cd43208444a9ec95e4bb2a438f614156b6a77c8c3"
                        }
                      ]
                    }
                  ]
                }

   The following is a example JSON object for hashDRBG test vectors sent
   from the ACVP server to the crypto module.









Vassilev               Expires September 14, 2017              [Page 17]

Internet-Draft                DRBG Alg JSON                   March 2017


                {
                  "version": "0.2",
                  "vectorSetId": "1156",
                  "algorithm": "hashDRBG",
                  "mode": "SHA-256",
                  "predResistance": "yes",
                  "entropyInputLen":"256",
                  "nonceLen":"128",
                  "persoStringLen":"0",
                  "additionalInputLen":"0",
                  "returnedBitsLen":"1024",
                  "testGroups": [
                    {
                      "type": "long",
                      "tests": [
                        {
                          "tcId": "2151",
                          "entropyInput":"ae0a3acd541d0d582a8510f3028caa143fe1e5226a8469d40b979d3a0d1bbe69",
                          "nonce":"786f03ad697332d74fad7a14604cee44",
                          "persoString":"",
                          "additionalInput":"",
                          "entropyInputPR": "4852aed7c47fd305aa680a6557d2f6e4112342a04eb91ed9f843671d0673cecd",
                          "additionalInput" : "",
                          "entropyInputPR" : "8b8a35a12e2d112685258742a9ad81931595fb06a7443329317e4eab9814e888"
                          },
                        {
                          "tcId": "2152",
                          "entropyInput" : "26d8c9a9b982cd7016c9208fe95b2f4003e0ebf84c1e80a4087f2bc3e0fc5674",
                          "nonce": "36dff124f908a95a022edf615618cd31",
                          "persoString" : "",
                          "additionalInput" : "",
                          "entropyInputPR" : "648bbdc4d40571905c69e7e2b15e36e08c812a6c509cef68bf75281e87f7a154",
                          "additionalInput" : "",
                          "entropyInputPR" : "fff51d05b1349506c354a0e6ee01edcff21c509dff5cbb582c8fdc01d6e8bd5b"
                        }
                      ]
                    }
                  ]
                }

Appendix C.  Example Test Results JSON Object

   The following is a example JSON object for ctrDRBG with 3KeyTDEA test
   results sent from the crypto module to the ACVP server.







Vassilev               Expires September 14, 2017              [Page 18]

Internet-Draft                DRBG Alg JSON                   March 2017


                {
                    "version": "0.2",
                    "vectorSetId": "1133",
                    "testResults": [
                        {
                            "tcId": "1815",
                            "returnedBits ": "4565e85447af7134775816588f1b0faf8b402a951db17753d01809d14724449d"
                        },
                        {
                            "tcId": "1816",
                            "returnedBits": "b67acc3b2231ec54344d5be2ee8fcac72e83651b8cf2ac2bc361171b882f0965"
                        }
                    ]
                }


   The following is a example JSON object for HMAC_DRBG test results
   sent from the crypto module to the ACVP server.

                {
                    "version": "0.2",
                    "vectorSetId":  "1146",
                    "testResults": [
                        {
                            "tcId": "2111",
                            "returnedBits": "e42130fd1d920a2bcd177c0de0d5834c9b05a6ecdf3bc46e3733869f762dc2e7d97357934d8061db033670c3739369924b321216c30b3e45d9bc8c0bad61d8fdc03dffd70725e793ebfe98bc15358764402f4e2c71be4acfad898649b51c5d2625374a61be2b59833d2dfcc593eddcffbac79016b22a992ae6f5f82bae194e06"
                        },
                       {
                            "tcId": "2112",
                            "returnedBits": "495b2a0de6b5fc4545fdd5fec93362d1203b1dfef3528f7d852fb89ba1c45059bd52cb7a80176dd71c26108912be6f3c33d95d5cee92349ba6bf16db42c4c828729a9b4a5f53e60655df55f0e58753ad2785d53fc44fe98a5e214e8172554bd53047f38a67f8a5af11111e33dcc5e705824a78d661839994f3529cec5a83a9f0"
                       }
                    ]
                }

   The following is a example JSON object for hashDRBG test results sent
   from the crypto module to the ACVP server.















Vassilev               Expires September 14, 2017              [Page 19]

Internet-Draft                DRBG Alg JSON                   March 2017


                {
                    "version": "0.2",
                    "vectorSetId": "1156",
                    "testResults": [
                        {
                            "tcId": "2151",
                            "returnedBits ": "1af967534c670271e26c9b991ec975b78c84623853cd531368f5b2e81f015f97ffbb8cd4533d4354ed432fbdf8025f04786745fd006e173f34e6f01e136bd9b4db2b96919dfa12e8deecf7b7c72b1d329afa99c29e844b27ee34d468a4b20b5739c00ad405943aeb5084285468765190112c5e44756770479552f2f2913ed362"
                        },
                       {
                            "tcId": "2152",
                            "returnedBits": "8a74a8c31ea4e6e62f8a77b45da8ec9d8b75e6813f15327c5beb8cb4b56b15e85f95ace34826f8da9048be7c800b33d6c4d3c6558b3e2e0ccfe867a2c6107dc7bacf513017c1a5bcb65ce16ed49aefe764ea7a13d36ceb7f9c443a0cb81f55abcc0c7b2d7d97858ee0b237a72364e826dd6b25df84914f2b354e03fd7fea758e"
                       }
                    ]
                }

Author's Address

   Apostol Vassilev (editor)
   National Institute of Standards and Technology
   100 Bureau Dr.
   Gaithersburg, MD  20899
   USA

   Email: apostol.vassilev@nist.gov



























Vassilev               Expires September 14, 2017              [Page 20]
