



TBD                                                      B. Fussell, Ed.
Internet-Draft                                       Cisco Systems, Inc.
Intended status: Informational                                 June 2016
Expires: December 3, 2016


                ACVP ECDSA Algorithm JSON Specification
                      draft-ietf-acvp-subecdsa-0.3

Abstract

   This document defines the JSON schema for using ECDSA algorithms with
   the ACVP specification.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 3, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Fussell                 Expires December 3, 2016                [Page 1]

Internet-Draft                Sym Alg JSON                     June 2016


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     2.1.  Required Prerequisite Algorithms for ECDSA Validations  .   3
     2.2.  ECDSA Algorithm Capabilities Registration . . . . . . . .   4
     2.3.  Supported ECDSA Modes Capabilities  . . . . . . . . . . .   5
       2.3.1.  The keyGen Mode Capabilities  . . . . . . . . . . . .   5
         2.3.1.1.  keyGen Full Set of Capabilities . . . . . . . . .   5
       2.3.2.  The keyVer Mode Capabilities  . . . . . . . . . . . .   6
         2.3.2.1.  keyVer Full Set of Capabilities . . . . . . . . .   6
       2.3.3.  The sigGen Mode Capabilities  . . . . . . . . . . . .   7
         2.3.3.1.  sigGen Full Set of Capabilities . . . . . . . . .   7
       2.3.4.  The sigVer Mode Capabilities  . . . . . . . . . . . .   8
         2.3.4.1.  sigVer Full Set of Capabilities . . . . . . . . .   8
     2.4.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . .   9
       2.4.1.  Test Groups JSON Schema . . . . . . . . . . . . . . .  10
       2.4.2.  Test Case JSON Schema . . . . . . . . . . . . . . . .  11
     2.5.  Test Vector Responses . . . . . . . . . . . . . . . . . .  11
     2.6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . .  12
     2.7.  IANA Considerations . . . . . . . . . . . . . . . . . . .  13
     2.8.  Security Considerations . . . . . . . . . . . . . . . . .  13
   3.  Normative References  . . . . . . . . . . . . . . . . . . . .  13
   Appendix A.  Example ECDSA JSON Object  . . . . . . . . . . . . .  13
     A.1.  Example ECDSA KeyGen Capabilities JSON Object . . . . . .  13
     A.2.  Example ECDSA KeyVer Capabilities JSON Object . . . . . .  14
     A.3.  Example ECDSA SigGen Capabilities JSON Object . . . . . .  15
     A.4.  Example ECDSA SigVer Capabilities JSON Object . . . . . .  16
     A.5.  Example Test ECDSA KeyGen JSON Object . . . . . . . . . .  17
     A.6.  Example Test ECDSA KeyVer JSON Object . . . . . . . . . .  18
     A.7.  Example Test ECDSA Signature Generation JSON Object . . .  19
     A.8.  Example Test ECDSA SigVer JSON Object . . . . . . . . . .  20
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  21

1.  Introduction















Fussell                 Expires December 3, 2016                [Page 2]

Internet-Draft                Sym Alg JSON                     June 2016


   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing ECDSA
   algorithms using ACVP.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].

2.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of ECDSA algorithms to the
   ACVP server.

   The algorithm capabilities are advertised as JSON objects within the
   'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification for details on the
   registration message.

2.1.  Required Prerequisite Algorithms for ECDSA Validations

   Each ECDSA implementation relies on other cryptographic primitives.
   For example, ECDSA uses an underlying SHA algorithm.  Each of these
   underlying algorithm primitives must be validated, either separately
   or as part of the same submission.  ACVP provides a mechanism for
   specifying the required prerequisites:

   +--------------+--------------+--------------+------------+---------+
   | JSON Value   | Description  | JSON type    | Valid      | Optiona |
   |              |              |              | Values     | l       |
   +--------------+--------------+--------------+------------+---------+



Fussell                 Expires December 3, 2016                [Page 3]

Internet-Draft                Sym Alg JSON                     June 2016


   | algorithm    | a            | value        | DRBG,      | No      |
   |              | prerequisite |              | DRBG_OPT2, |         |
   |              | algorithm    |              | SHA,       |         |
   |              |              |              | SHA_OPT2,  |         |
   |              |              |              | SHA_OPT3   |         |
   |              |              |              |            |         |
   | valValue     | algorithm    | value        | actual     | No      |
   |              | validation   |              | number or  |         |
   |              | number       |              | "same"     |         |
   |              |              |              |            |         |
   | prereqAlgVal | prerequistie | object with  | see above  | No      |
   |              | algorithm    | algorithm    |            |         |
   |              | validation   | and valValue |            |         |
   |              |              | properties   |            |         |
   |              |              |              |            |         |
   | prereqVals   | prerequistie | array of     | see above  | No      |
   |              | algorithm    | prereqAlgVal |            |         |
   |              | validations  | objects      |            |         |
   +--------------+--------------+--------------+------------+---------+

        Table 1: Required ECDSA Prerequisite Algorithms JSON Values

2.2.  ECDSA Algorithm Capabilities Registration

   Each algorithm capability advertised is a self-contained JSON object
   using the following values

   +------------+----------------+--------------+-----------+----------+
   | JSON Value | Description    | JSON type    | Valid     | Optional |
   |            |                |              | Values    |          |
   +------------+----------------+--------------+-----------+----------+
   | algorithm  | The algorithm  | value        | "ECDSA"   | No       |
   |            | under test     |              |           |          |
   |            |                |              |           |          |
   | mode       | The ECDSA mode | value        | "keyGen", | No       |
   |            | to be          |              | "keyVer", |          |
   |            | validated      |              | "sigGen", |          |
   |            |                |              | or        |          |
   |            |                |              | "sigVer"  |          |
   |            |                |              |           |          |
   | prereqVals | prerequistie   | array of     | See       | No       |
   |            | algorithm      | prereqAlgVal | Section   |          |
   |            | validations    | objects      | 2.1       |          |
   |            |                |              |           |          |
   | algSpecs   | array of JSON  | Array of     | See       |
   |            | objects, each  | JSON objects | Section   |
   |            | with fields    |              | 2.3       |
   |            | pertaining to  |              |           |



Fussell                 Expires December 3, 2016                [Page 4]

Internet-Draft                Sym Alg JSON                     June 2016


   |            | the global     |              |           |
   |            | ECDSA mode     |              |           |
   |            | indicated      |              |           |
   |            | above and      |              |           |
   |            | identified     |              |           |
   |            | uniquely by    |              |           |
   |            | the            |              |           |
   |            | combination of |              |           |
   |            | the ECDSA      |              |           |
   |            | "mode" and     |              |           |
   |            | indicated      |              |           |
   |            | properties     |              |           |
   +------------+----------------+--------------+-----------+----------+

             Table 2: ECDSA Algorithm Capabilities JSON Values

2.3.  Supported ECDSA Modes Capabilities

   The ECDSA mode capabilities are advertised as JSON objects within the
   'algSpecs' value of the ACVP registration message - see Table 2.  The
   'algSpecs' value is an array, where each array element is a JSON
   object corresponding to a particular ECDSA mode defined in this
   section.  The 'algSpecs' value is part of the 'capability_exchange'
   element of the ACVP JSON registration message.  See the ACVP
   specification for details on the registration message.

   Each ECDSA mode's capabilities are advertised as JSON objects.

2.3.1.  The keyGen Mode Capabilities

   The ECDSA keyGen mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each ECDSA keyGen mode capability set is advertised as a self-
   contained JSON object.

2.3.1.1.  keyGen Full Set of Capabilities

   The complete list of ECDSA key generation capabilities may be
   advertised by the ACVP compliant crypto module:

   +--------------------+-------------+-------+--------------+---------+
   | JSON Value         | Description | JSON  | Valid Values | Optiona |
   |                    |             | type  |              | l       |
   +--------------------+-------------+-------+--------------+---------+
   | curve              | The curve   | array | Any non-     | No      |



Fussell                 Expires December 3, 2016                [Page 5]

Internet-Draft                Sym Alg JSON                     June 2016


   |                    | names       |       | empty subset |         |
   |                    | supported   |       | of {"p-224", |         |
   |                    | for the IUT |       | "p-256",     |         |
   |                    | in keyGen.  |       | "p-384",     |         |
   |                    |             |       | "p-521",     |         |
   |                    |             |       | "b-233",     |         |
   |                    |             |       | "b-283",     |         |
   |                    |             |       | "b-409",     |         |
   |                    |             |       | "b-571",     |         |
   |                    |             |       | "k-233",     |         |
   |                    |             |       | "k-283",     |         |
   |                    |             |       | "k-409",     |         |
   |                    |             |       | "k-571"}     |         |
   |                    |             |       |              |         |
   | secretGenerationMo | The method  | array | Any non-     | No      |
   | de                 | used to     |       | empty subset |         |
   |                    | generate    |       | of {"extra   |         |
   |                    | the         |       | bits",       |         |
   |                    | randomness  |       | "testing     |         |
   |                    | incoporated |       | candidates"} |         |
   |                    | in the key. |       |              |         |
   +--------------------+-------------+-------+--------------+---------+

              Table 3: ECDSA keyGen Capabilities JSON Values

2.3.2.  The keyVer Mode Capabilities

   The ECDSA keyVer mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each ECDSA keyVer mode capability set is advertised as a self-
   contained JSON object.

2.3.2.1.  keyVer Full Set of Capabilities

   The complete list of ECDSA key verification capabilities may be
   advertised by the ACVP compliant crypto module:

   +--------+-----------------+-------+---------------------+----------+
   | JSON   | Description     | JSON  | Valid Values        | Optional |
   | Value  |                 | type  |                     |          |
   +--------+-----------------+-------+---------------------+----------+
   | curve  | The curve names | array | Any non-empty       | No       |
   |        | supported for   |       | subset of {"p-192", |          |
   |        | the IUT in      |       | "p-224", "p-256",   |          |
   |        | keyVer.         |       | "p-384", "p-521",   |          |



Fussell                 Expires December 3, 2016                [Page 6]

Internet-Draft                Sym Alg JSON                     June 2016


   |        |                 |       | "b-163", "b-233",   |          |
   |        |                 |       | "b-283", "b-409",   |          |
   |        |                 |       | "b-571", "k-163",   |          |
   |        |                 |       | "k-233", "k-283",   |          |
   |        |                 |       | "k-409", "k-571"}   |          |
   +--------+-----------------+-------+---------------------+----------+

              Table 4: ECDSA keyVer Capabilities JSON Values

2.3.3.  The sigGen Mode Capabilities

   The ECDSA sigGen mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each ECDSA sigGen mode capability set is advertised as a self-
   contained JSON object.

2.3.3.1.  sigGen Full Set of Capabilities

   The complete list of ECDSA signature generation capabilities may be
   advertised by the ACVP compliant crypto module:

   +--------------+-------------+--------+------------------+----------+
   | JSON Value   | Description | JSON   | Valid Values     | Optional |
   |              |             | type   |                  |          |
   +--------------+-------------+--------+------------------+----------+
   | capabilities | An array    | array  | Any non-empty    | No       |
   |              | containing  |        | subset of        |          |
   |              | capability  |        | capability       |          |
   |              | objects     |        | objects          |          |
   |              | defined as  |        |                  |          |
   |              | an array of |        |                  |          |
   |              | 'curve' and |        |                  |          |
   |              | an array of |        |                  |          |
   |              | 'hashAlg'   |        |                  |          |
   |              | as listed   |        |                  |          |
   |              | below.      |        |                  |          |
   |              |             |        |                  |          |
   | curve        | The curves  | array  | Any non-empty    | No       |
   |              | supported   |        | subset of        |          |
   |              | with a      |        | {"p-224",        |          |
   |              | particular  |        | "p-256",         |          |
   |              | set of hash |        | "p-384",         |          |
   |              | algorithms. |        | "p-521",         |          |
   |              |             |        | "b-233",         |          |
   |              |             |        | "b-283",         |          |



Fussell                 Expires December 3, 2016                [Page 7]

Internet-Draft                Sym Alg JSON                     June 2016


   |              |             |        | "b-409",         |          |
   |              |             |        | "b-571",         |          |
   |              |             |        | "k-233",         |          |
   |              |             |        | "k-283",         |          |
   |              |             |        | "k-409",         |          |
   |              |             |        | "k-571"}         |          |
   |              |             |        |                  |          |
   | hashAlg      | The hash    | array  | Any non-empty    | No       |
   |              | functions   |        | subset of        |          |
   |              | supported   |        | {"sha2-224",     |          |
   |              | when        |        | "sha2-256",      |          |
   |              | signing a   |        | "sha2-384",      |          |
   |              | message for |        | "sha2-512",      |          |
   |              | a           |        | "sha2-512/224",  |          |
   |              | particular  |        | "sha2-512/256"}. |          |
   |              | set of      |        |                  |          |
   |              | curves.     |        |                  |          |
   +--------------+-------------+--------+------------------+----------+

              Table 5: ECDSA sigGen Capabilities JSON Values

2.3.4.  The sigVer Mode Capabilities

   The ECDSA sigVer mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each ECDSA sigVer mode capability set is advertised as a self-
   contained JSON object.

2.3.4.1.  sigVer Full Set of Capabilities

   The complete list of ECDSA signature verification capabilities may be
   advertised by the ACVP compliant crypto module:

   +--------------+-------------+--------+------------------+----------+
   | JSON Value   | Description | JSON   | Valid Values     | Optional |
   |              |             | type   |                  |          |
   +--------------+-------------+--------+------------------+----------+
   | capabilities | An array    | array  | Any non-empty    | No       |
   |              | containing  |        | subset of        |          |
   |              | capability  |        | capability       |          |
   |              | objects     |        | objects          |          |
   |              | defined as  |        |                  |          |
   |              | an array of |        |                  |          |
   |              | 'curve' and |        |                  |          |
   |              | an array of |        |                  |          |



Fussell                 Expires December 3, 2016                [Page 8]

Internet-Draft                Sym Alg JSON                     June 2016


   |              | 'hashAlg'   |        |                  |          |
   |              | as listed   |        |                  |          |
   |              | below.      |        |                  |          |
   |              |             |        |                  |          |
   | curve        | The curves  | array  | Any non-empty    | No       |
   |              | supported   |        | subset of        |          |
   |              | with a      |        | {"p-192",        |          |
   |              | particular  |        | "p-224",         |          |
   |              | set of hash |        | "p-256",         |          |
   |              | algorithms. |        | "p-384",         |          |
   |              |             |        | "p-521",         |          |
   |              |             |        | "b-163",         |          |
   |              |             |        | "b-233",         |          |
   |              |             |        | "b-283",         |          |
   |              |             |        | "b-409",         |          |
   |              |             |        | "b-571",         |          |
   |              |             |        | "k-163",         |          |
   |              |             |        | "k-233",         |          |
   |              |             |        | "k-283",         |          |
   |              |             |        | "k-409",         |          |
   |              |             |        | "k-571"}         |          |
   |              |             |        |                  |          |
   | hashAlg      | The hash    | array  | Any non-empty    | No       |
   |              | functions   |        | subset of        |          |
   |              | supported   |        | {"sha-1",        |          |
   |              | when        |        | "sha2-224",      |          |
   |              | signing a   |        | "sha2-256",      |          |
   |              | message for |        | "sha2-384",      |          |
   |              | a           |        | "sha2-512",      |          |
   |              | particular  |        | "sha2-512/224",  |          |
   |              | set of      |        | "sha2-512/256"}. |          |
   |              | curves.     |        |                  |          |
   +--------------+-------------+--------+------------------+----------+

              Table 6: ECDSA sigVer Capabilities JSON Values

2.4.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation session would require multiple test vector
   sets to be downloaded and processed by the ACVP client.  Each test
   vector set represents an individual ECDSA function.  This section
   describes the JSON schema for a test vector set used with ECDSA
   algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual



Fussell                 Expires December 3, 2016                [Page 9]

Internet-Draft                Sym Alg JSON                     June 2016


   test vectors to be processed by the ACVP client.The following table
   describes the JSON elements at the top level of the hierarchy.

   +----------------+---------------------------------------+----------+
   | JSON Value     | Description                           | JSON     |
   |                |                                       | type     |
   +----------------+---------------------------------------+----------+
   | acvVersion     | Protocol version identifier           | value    |
   |                |                                       |          |
   | vsId           | Unique numeric identifier for the     | value    |
   |                | vector set                            |          |
   |                |                                       |          |
   | algorithm      | ECDSA                                 | value    |
   |                |                                       |          |
   | mode           | The ECDSA mode used for the test      | value    |
   |                | vectors                               |          |
   |                |                                       |          |
   | testGroups     | Array of test group JSON objects,     | array    |
   |                | which are defined in Section 2.4.1    |          |
   +----------------+---------------------------------------+----------+

                      Table 7: Vector Set JSON Object

2.4.1.  Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the secure hash JSON elements of the Test
   Group JSON object.

   The test group for ECDSA is as follows:

   +------------------------+---------------------+---------+----------+
   | JSON Value             | Description         | JSON    | Optional |
   |                        |                     | type    |          |
   +------------------------+---------------------+---------+----------+
   | curve                  | The curve type used | value   | No       |
   |                        | for the test        |         |          |
   |                        | vectors.            |         |          |
   |                        |                     |         |          |
   | secretGenerationMode   | The method of       | value   | Yes      |
   |                        | generating a secret |         |          |
   |                        | used for key        |         |          |
   |                        | generation in the   |         |          |



Fussell                 Expires December 3, 2016               [Page 10]

Internet-Draft                Sym Alg JSON                     June 2016


   |                        | test vectors.       |         |          |
   |                        |                     |         |          |
   | hashAlg                | SHA version used    | value   | Yes      |
   |                        |                     |         |          |
   | tests                  | Array of individual | array   | No       |
   |                        | test vector JSON    |         |          |
   |                        | objects, which are  |         |          |
   |                        | defined in Section  |         |          |
   |                        | 2.4.2               |         |          |
   +------------------------+---------------------+---------+----------+

                     Table 8: Vector Group JSON Object

2.4.2.  Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each ECDSA test vector.

   +-----------+-------------------------------+----------+------------+
   | JSON      | Description                   | JSON     | Optional   |
   | Value     |                               | type     |            |
   +-----------+-------------------------------+----------+------------+
   | tcId      | Numeric identifier for the    | value    | No         |
   |           | test case, unique across the  |          |            |
   |           | entire vector set.            |          |            |
   |           |                               |          |            |
   | qx        | The public key curve point x  | value    | Yes        |
   |           |                               |          |            |
   | qy        | The public key curve point y  | value    | Yes        |
   |           |                               |          |            |
   | r         | The signature component R     | value    | Yes        |
   |           |                               |          |            |
   | s         | The signature component S     | value    | Yes        |
   |           |                               |          |            |
   | message   | The message used to generate  | value    | Yes        |
   |           | signature or verify signature |          |            |
   +-----------+-------------------------------+----------+------------+

                      Table 9: Test Case JSON Object

2.5.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.



Fussell                 Expires December 3, 2016               [Page 11]

Internet-Draft                Sym Alg JSON                     June 2016


   +-----------------+---------------------------------------+---------+
   | JSON Value      | Description                           | JSON    |
   |                 |                                       | type    |
   +-----------------+---------------------------------------+---------+
   | acvVersion      | Protocol version identifier           | value   |
   |                 |                                       |         |
   | vsId            | Unique numeric identifier for the     | value   |
   |                 | vector set                            |         |
   |                 |                                       |         |
   | testResults     | Array of JSON objects that represent  | array   |
   |                 | each test vector result, as defined   |         |
   |                 | by the tables below                   |         |
   +-----------------+---------------------------------------+---------+

                 Table 10: Vector Set Response JSON Object

   The following table describes the JSON object that represents a
   vector set response for ECDSA.

   +----------+---------------------+---------------------+------------+
   | JSON     | Description         | JSON type           | Optional   |
   | Value    |                     |                     |            |
   +----------+---------------------+---------------------+------------+
   | d        | The private key     | value               | Yes        |
   |          |                     |                     |            |
   | qx       | The public key      | value               | Yes        |
   |          | curve point x       |                     |            |
   |          |                     |                     |            |
   | qy       | The public key      | value               | Yes        |
   |          | curve point y       |                     |            |
   |          |                     |                     |            |
   | r        | The signature       | value               | Yes        |
   |          | component R         |                     |            |
   |          |                     |                     |            |
   | s        | The signature       | value               | Yes        |
   |          | component S         |                     |            |
   |          |                     |                     |            |
   | result   | The Pass or Fail    | "passed"/"failed"   | Yes        |
   |          | result of the       |                     |            |
   |          | verify or           |                     |            |
   |          | validation          |                     |            |
   +----------+---------------------+---------------------+------------+

                 Table 11: Vector Set Response JSON Object

2.6.  Acknowledgements

   TBD...



Fussell                 Expires December 3, 2016               [Page 12]

Internet-Draft                Sym Alg JSON                     June 2016


2.7.  IANA Considerations

   This memo includes no request to IANA.

2.8.  Security Considerations

   Security considerations are addressed by the ACVP specification.

3.  Normative References

   [ACVP]     authSurName, authInitials., "ACVP Specification", 2016.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997, <https://www.rfc-editor.org/info/
              rfc2119>.

Appendix A.  Example ECDSA JSON Object

   The following sections contain example JSON for the various ECDSA
   modes: keyGen, keyVer, sigGen, and sigVer.  Note that all binary HEX
   representations are in big-endian format.

A.1.  Example ECDSA KeyGen Capabilities JSON Object

   The following is a example JSON object advertising support for ECDSA
   keyGen.


   {
       "algorithm": "ECDSA",
       "mode": "keyGen",
       "prereqVals": [
         {
             "algorithm": "SHA",
             "valValue": "123456"
         },
         {
             "algorithm": "DRBG",
             "valValue": "123456"
         }
       ],
       "Curve": [
           "p-224",
           "p-256",
           "p-384",
           "p-521",
           "b-233",



Fussell                 Expires December 3, 2016               [Page 13]

Internet-Draft                Sym Alg JSON                     June 2016


           "b-283",
           "b-409",
           "b-571",
           "k-233",
           "k-283",
           "k-409",
           "k-571"
       ],
       "SecretGenerationMode": [
           "extra bits",
           "testing candidates"
       ]
   }


A.2.  Example ECDSA KeyVer Capabilities JSON Object

   The following is a example JSON object advertising support for ECDSA
   keyVer.


   {
       "algorithm": "ECDSA",
       "mode": "keyVer",
       "prereqVals": [
           {
               "algorithm": "SHA",
               "valValue": "123456"
           },
           {
               "algorithm": "DRBG",
               "valValue": "123456"
           }
       ],
       "curve": [
           "p-192",
           "p-224",
           "p-256",
           "p-384",
           "p-521",
           "b-163",
           "b-233",
           "b-283",
           "b-409",
           "b-571",
           "k-163",
           "k-233",
           "k-283",



Fussell                 Expires December 3, 2016               [Page 14]

Internet-Draft                Sym Alg JSON                     June 2016


           "k-409",
           "k-571"
       ]
   }


A.3.  Example ECDSA SigGen Capabilities JSON Object

   The following is a example JSON object advertising support for ECDSA
   sigGen.


   {
       "algorithm": "ECDSA",
       "mode": "sigGen",
       "prereqVals": [
           {
               "algorithm": "SHA",
               "valValue": "123456"
           },
           {
               "algorithm": "DRBG",
               "valValue": "123456"
           }
       ],
       "capabilities": [
           {
               "curve": [
                   "p-224",
                   "p-256",
                   "p-384",
                   "p-521",
                   "b-233",
                   "b-283",
                   "b-409",
                   "b-571",
                   "k-233",
                   "k-283",
                   "k-409",
                   "k-571"
               ],
               "hashAlg": [
                   "sha2-224",
                   "sha2-256",
                   "sha2-384",
                   "sha2-512",
                   "sha2-512/224",
                   "sha2-512/256"



Fussell                 Expires December 3, 2016               [Page 15]

Internet-Draft                Sym Alg JSON                     June 2016


               ]
           }
       ]
   }


A.4.  Example ECDSA SigVer Capabilities JSON Object

   The following is a example JSON object advertising support for ECDSA
   sigVer.


   {
       "algorithm": "ECDSA",
       "mode": "sigVer",
       "prereqVals": [
           {
               "algorithm": "SHA",
               "valValue": "123456"
           },
           {
               "algorithm": "DRBG",
               "valValue": "123456"
           }
       ],
       "capabilities": [
           {
               "curve": [
                   "p-192",
                   "p-224",
                   "p-256",
                   "p-384",
                   "p-521",
                   "b-163",
                   "b-233",
                   "b-283",
                   "b-409",
                   "b-571",
                   "k-163",
                   "k-233",
                   "k-283",
                   "k-409",
                   "k-571"
               ],
               "hashAlg": [
                   "sha-1",
                   "sha2-224",
                   "sha2-256",



Fussell                 Expires December 3, 2016               [Page 16]

Internet-Draft                Sym Alg JSON                     June 2016


                   "sha2-384",
                   "sha2-512",
                   "sha2-512/224",
                   "sha2-512/256"
               ]
           }
       ]
   }


A.5.  Example Test ECDSA KeyGen JSON Object

   The following is a example JSON object for ECDSA KeyGen, test vectors
   sent from the ACVP server to the crypto module and the response.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "ECDSA",
           "mode": "keyGen",
           "testGroups": [
               {
                   "curve": "p-224",
                   "secretGenerationMode": "extra bits",
                   "tests": [
                       {
                           "tcId": 1
                       }
                   ]
               }
           ]
       }
   ]


   The following is a example JSON object for ECDSA KeyGen test results
   sent from the crypto module to the ACVP server.


   [
       {
           "acvVersion": "0.4"
       },
       {



Fussell                 Expires December 3, 2016               [Page 17]

Internet-Draft                Sym Alg JSON                     June 2016


           "vsId": 1564,
           "testResults": [
               {
                   "tcId": 1,
                   "qx": "7B1AA6BE712542282B8D088C233168CA4409E20264E32897C201ABA9",
                   "qy": "BCC9213347A7F988A2FF9EF14C85254B23AF0096F947CECB6C3311D2",
                   "d": "38524F26660BBA72E74EB39DEF38558EB07CB15255A09652B222CCE0"
               }
           ]
       }
   ]


A.6.  Example Test ECDSA KeyVer JSON Object

   The following is a example JSON object for ECDSA KeyVer, test vectors
   sent from the ACVP server to the crypto module and the response.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "ECDSA",
           "mode": "keyVer",
           "testGroups": [
               {
                   "curve": "p-192",
                   "tests": [
                       {
                           "tcId": 1,
                           "qx": "01ED77E3F1591D2EC730D0ED6D592F8DD24158D0E696408DBD",
                           "qy": "BF31C6463EB1B6B55C8930550B88CF8D1F6432A832B40FB4"
                       }
                   ]
               }
           ]
       }
   ]


   The following is a example JSON object for ECDSA KeyVer test results
   sent from the crypto module to the ACVP server.


   [



Fussell                 Expires December 3, 2016               [Page 18]

Internet-Draft                Sym Alg JSON                     June 2016


       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "testResults": [
               {
                   "tcId": 1,
                   "result": "failed"
               }
           ]
       }
   ]


A.7.  Example Test ECDSA Signature Generation JSON Object

   The following is a example JSON object for ECDSA SigGen, test vectors
   sent from the ACVP server to the crypto module and the response.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "ECDSA",
           "mode": "sigGen",
           "testGroups": [
               {
                   "curve": "p-224",
                   "hashAlg": "sha2-224",
                   "tests": [
                       {
                           "tcId": 1,
                           "message": "AB6F57713A3BD323B4AFDCFBE202EE00A9CF5C787D19FD9094323C57FEA8B7FBE31559EC1CAC6D29C3229A58811CF2BAE2B78183DFDABD055B741EA86496454F085D17D5BCD1B82B533B533A1E5804B2DAA0ED43F8BF59FBEB16BDD4D7C065165CB9B085CECD5BCFFA794339D5A81B1949F569CAACA208B9E3E6A217A1B3A596"
                       }
                   ]
               }
           ]
       }
   ]


   The following is a example JSON object for ECDSA SigGen test results
   sent from the crypto module to the ACVP server.




Fussell                 Expires December 3, 2016               [Page 19]

Internet-Draft                Sym Alg JSON                     June 2016


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "testResults": [
               {
                   "tcId": 1,
                   "qx": "3B1D9E4D986F651C3C213B2A1304693BDB8BA632CB93A3547B89EF31",
                   "qy": "E56F7B7C9E6355E573B7B3B6C0E1ECD70E4ABDF1554EAD8A68ABA1A4",
                   "r": "3E2A9588DF3D3F11B16368A30C8C34C572655BA8516AF5C914E94FF4",
                   "s": "C6E4A8C51E0A0E11C4C6D6F8F3C51A0FA440BC6FF28EBACDBB20922A"
               }
           ]
       }
   ]


A.8.  Example Test ECDSA SigVer JSON Object

   The following is a example JSON object for ECDSA SigVer, test vectors
   sent from the ACVP server to the crypto module and the response.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "ECDSA",
           "mode": "sigVer",
           "testGroups": [
               {
                   "curve": "p-192",
                   "hashAlg": "sha-1",
                   "tests": [
                       {
                           "tcId": 1,
                           "message": "D38A81D0C5201BA4A06A8C4760AC15DB266B17B48B13EA69775D1E896486D9D986A464D3469941F93FC65556E2CB8AB5F113E7ADCB8D50375DC76907195B6AF6C06F13EB6106EF0E19E241DB4B4831E06437E5CF7C9A499A8FC6DA36A75BDB81A2A19E14ACEFECD7E364471527E0FE37FD1162F5DD0D975E83C0DA4EDDD37261",
                           "qx": "B08AFEAC74E42C66EBAF13807E2EB5769F5123645C0B8491",
                           "qy": "55847857E5E48025BE9053952E0E1ECFB1D883CF9F085386",
                           "r": "E31121E544D476DC3FA79B4DCB0A7252B6E80468BBF22843",
                           "s": "6E3F47F2327E36AD936E0F4BE245C05F264BA9300E9E7DD9"
                       }
                   ]
               }



Fussell                 Expires December 3, 2016               [Page 20]

Internet-Draft                Sym Alg JSON                     June 2016


           ]
       }
   ]


   The following is a example JSON object for ECDSA generation test
   results sent from the crypto module to the ACVP server.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "testResults": [
               {
                   "tcId": 1,
                   "result": "failed"
               }
           ]
       }
   ]


Author's Address

   Barry Fussell (editor)
   Cisco Systems, Inc.
   170 West Tasman Dr.
   San Jose, CA  95134
   USA

   Email: bfussell@cisco.com

















Fussell                 Expires December 3, 2016               [Page 21]
