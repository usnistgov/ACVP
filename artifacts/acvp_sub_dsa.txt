



TBD                                                      B. Fussell, Ed.
Internet-Draft                                       Cisco Systems, Inc.
Intended status: Informational                                 June 2016
Expires: December 3, 2016


                 ACVP DSA Algorithm JSON Specification
                       draft-ietf-acvp-subdsa-0.4

Abstract

   This document defines the JSON schema for using DSA algorithms with
   the ACVP specification.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 3, 2016.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Fussell                 Expires December 3, 2016                [Page 1]

Internet-Draft                Sym Alg JSON                     June 2016


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Capabilities Registration . . . . . . . . . . . . . . . . . .   3
     2.1.  Required Prerequisite Algorithms for DSA Validations  . .   3
     2.2.  DSA Algorithm Capabilities Registration . . . . . . . . .   4
     2.3.  Supported DSA Modes Capabilities  . . . . . . . . . . . .   5
       2.3.1.  The pqgGen Mode Capabilities  . . . . . . . . . . . .   5
         2.3.1.1.  pqgGen Full Set of Capabilities . . . . . . . . .   5
       2.3.2.  The pqgVer Mode Capabilities  . . . . . . . . . . . .   6
         2.3.2.1.  pqgVer Full Set of Capabilities . . . . . . . . .   6
       2.3.3.  The keyGen Mode Capabilities  . . . . . . . . . . . .   7
         2.3.3.1.  keyGen Full Set of Capabilities . . . . . . . . .   7
       2.3.4.  The sigGen Mode Capabilities  . . . . . . . . . . . .   8
         2.3.4.1.  sigGen Full Set of Capabilities . . . . . . . . .   8
       2.3.5.  The sigVer Mode Capabilities  . . . . . . . . . . . .   9
         2.3.5.1.  sigVer Full Set of Capabilities . . . . . . . . .   9
     2.4.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . .  10
       2.4.1.  Test Groups JSON Schema . . . . . . . . . . . . . . .  11
       2.4.2.  Test Case JSON Schema . . . . . . . . . . . . . . . .  11
     2.5.  Test Vector Responses . . . . . . . . . . . . . . . . . .  13
     2.6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . .  15
     2.7.  IANA Considerations . . . . . . . . . . . . . . . . . . .  15
     2.8.  Security Considerations . . . . . . . . . . . . . . . . .  15
   3.  Normative References  . . . . . . . . . . . . . . . . . . . .  15
   Appendix A.  Example DSA JSON Object  . . . . . . . . . . . . . .  15
     A.1.  Example DSA PQGGen Capabilities JSON Object . . . . . . .  15
     A.2.  Example DSA PQGVer Capabilities JSON Object . . . . . . .  17
     A.3.  Example DSA KeyGen Capabilities JSON Object . . . . . . .  19
     A.4.  Example DSA SigGen Capabilities JSON Object . . . . . . .  20
     A.5.  Example DSA SigVer Capabilities JSON Object . . . . . . .  21
     A.6.  Example Test DSA PQGGen JSON Object . . . . . . . . . . .  22
     A.7.  Example Test DSA PQGVer JSON Object . . . . . . . . . . .  24
     A.8.  Example Test DSA KeyGen JSON Object . . . . . . . . . . .  27
     A.9.  Example Test DSA Generation JSON Object . . . . . . . . .  28
     A.10. Example Test DSA SigVer JSON Object . . . . . . . . . . .  29
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  30

1.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto



Fussell                 Expires December 3, 2016                [Page 2]

Internet-Draft                Sym Alg JSON                     June 2016


   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing DSA
   algorithms using ACVP.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted in RFC 2119 [RFC2119].

2.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of DSA algorithms to the ACVP
   server.

   The algorithm capabilities are advertised as JSON objects within the
   'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification for details on the
   registration message.

2.1.  Required Prerequisite Algorithms for DSA Validations

   Each DSA implementation relies on other cryptographic primitives.
   For example, DSA uses an underlying SHA algorithm.  Each of these
   underlying algorithm primitives must be validated, either separately
   or as part of the same submission.  ACVP provides a mechanism for
   specifying the required prerequisites:

   +--------------+--------------+--------------+-----------+----------+
   | JSON Value   | Description  | JSON type    | Valid     | Optional |
   |              |              |              | Values    |          |
   +--------------+--------------+--------------+-----------+----------+
   | algorithm    | a            | value        | DRBG,     | No       |
   |              | prerequisite |              | SHA,      |          |
   |              | algorithm    |              | SHA_OPT2  |          |
   |              |              |              |           |          |
   | valValue     | algorithm    | value        | actual    | No       |
   |              | validation   |              | number or |          |
   |              | number       |              | "same"    |          |



Fussell                 Expires December 3, 2016                [Page 3]

Internet-Draft                Sym Alg JSON                     June 2016


   |              |              |              |           |          |
   | prereqAlgVal | prerequistie | object with  | see above | No       |
   |              | algorithm    | algorithm    |           |          |
   |              | validation   | and valValue |           |          |
   |              |              | properties   |           |          |
   |              |              |              |           |          |
   | prereqVals   | prerequistie | array of     | see above | No       |
   |              | algorithm    | prereqAlgVal |           |          |
   |              | validations  | objects      |           |          |
   +--------------+--------------+--------------+-----------+----------+

         Table 1: Required DSA Prerequisite Algorithms JSON Values

2.2.  DSA Algorithm Capabilities Registration

   Each algorithm capability advertised is a self-contained JSON object
   using the following values.

   +------------+----------------+--------------+-----------+----------+
   | JSON Value | Description    | JSON type    | Valid     | Optional |
   |            |                |              | Values    |          |
   +------------+----------------+--------------+-----------+----------+
   | algorithm  | The algorithm  | value        | "DSA"     | No       |
   |            | under test     |              |           |          |
   |            |                |              |           |          |
   | mode       | The DSA mode   | value        | "pqgGen", | No       |
   |            | to be          |              | "pqgVer", |          |
   |            | validated      |              | "keyGen", |          |
   |            |                |              | "sigGen", |          |
   |            |                |              | "sigVer"  |          |
   |            |                |              |           |          |
   | prereqVals | prerequistie   | array of     | See       | No       |
   |            | algorithm      | prereqAlgVal | Section   |          |
   |            | validations    | objects      | 2.1       |          |
   |            |                |              |           |          |
   | algSpecs   | array of JSON  | Array of     | See       | No       |
   |            | objects, each  | JSON objects | Section   |          |
   |            | with fields    |              | 2.3       |          |
   |            | pertaining to  |              |           |          |
   |            | the global DSA |              |           |          |
   |            | mode indicated |              |           |          |
   |            | above and      |              |           |          |
   |            | identified     |              |           |          |
   |            | uniquely by    |              |           |          |
   |            | the            |              |           |          |
   |            | combination of |              |           |          |
   |            | the DSA "mode" |              |           |          |
   |            | and indicated  |              |           |          |



Fussell                 Expires December 3, 2016                [Page 4]

Internet-Draft                Sym Alg JSON                     June 2016


   |            | properties     |              |           |          |
   +------------+----------------+--------------+-----------+----------+

              Table 2: DSA Algorithm Capabilities JSON Values

2.3.  Supported DSA Modes Capabilities

   The DSA mode capabilities are advertised as JSON objects within the
   'algSpecs' value of the ACVP registration message - see Table 2.  The
   'algSpecs' value is an array, where each array element is a JSON
   object corresponding to a particular DSA mode defined in this
   section.  The 'algSpecs' value is part of the 'capability_exchange'
   element of the ACVP JSON registration message.  See the ACVP
   specification for details on the registration message.

   Each DSA mode's capabilities are advertised as JSON objects.

2.3.1.  The pqgGen Mode Capabilities

   The DSA pqgGen mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each DSA pqgGen mode capability set is advertised as a self-contained
   JSON object.

2.3.1.1.  pqgGen Full Set of Capabilities

   The complete list of DSA pqg generation capabilities may be
   advertised by the ACVP compliant crypto module:

   +---------+---------------+-------+----------------------+----------+
   | JSON    | Description   | JSON  | Valid Values         | Optional |
   | Value   |               | type  |                      |          |
   +---------+---------------+-------+----------------------+----------+
   | l       | The length in | value | 2048, or 3072        | No       |
   |         | bits of the   |       |                      |          |
   |         | field and the |       |                      |          |
   |         | length in     |       |                      |          |
   |         | bits of prime |       |                      |          |
   |         | p.            |       |                      |          |
   |         |               |       |                      |          |
   | n       | The length in | value | 224, or 256 when L   | No       |
   |         | bits of q     |       | is 2048. Otherwise   |          |
   |         | which is a    |       | 256.                 |          |
   |         | prime factor  |       |                      |          |
   |         | of (p-1).     |       |                      |          |



Fussell                 Expires December 3, 2016                [Page 5]

Internet-Draft                Sym Alg JSON                     June 2016


   |         |               |       |                      |          |
   | pqGen   | The methods   | array | Any non-empty subset | No       |
   |         | supported to  |       | of {"probable",      |          |
   |         | generate p    |       | "provable"}.         |          |
   |         | and q.        |       |                      |          |
   |         |               |       |                      |          |
   | gGen    | The methods   | array | Any non-empty subset | No       |
   |         | supported to  |       | of {"unverifiable",  |          |
   |         | generate g.   |       | "canonical"}.        |          |
   |         |               |       |                      |          |
   | hashAlg | The hash      | array | Any non-empty subset | No       |
   |         | functions     |       | of {"sha2-224",      |          |
   |         | supported     |       | "sha2-256",          |          |
   |         | when          |       | "sha2-384",          |          |
   |         | generating p, |       | "sha2-512",          |          |
   |         | q and g.      |       | "sha2-512/224",      |          |
   |         |               |       | "sha2-512/256"}.     |          |
   |         |               |       | Note that the digest |          |
   |         |               |       | size of the hash     |          |
   |         |               |       | function MUST be     |          |
   |         |               |       | equal to or greater  |          |
   |         |               |       | than N.              |          |
   +---------+---------------+-------+----------------------+----------+

               Table 3: DSA pqgGen Capabilities JSON Values

2.3.2.  The pqgVer Mode Capabilities

   The DSA pqgVer mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each DSA pqgVer mode capability set is advertised as a self-contained
   JSON object.

2.3.2.1.  pqgVer Full Set of Capabilities

   The complete list of DSA pqg verification capabilities may be
   advertised by the ACVP compliant crypto module:

   +---------+---------------+-------+----------------------+----------+
   | JSON    | Description   | JSON  | Valid Values         | Optional |
   | Value   |               | type  |                      |          |
   +---------+---------------+-------+----------------------+----------+
   | l       | The length in | value | 1024, 2048, or 3072  | No       |
   |         | bits of the   |       |                      |          |
   |         | field and the |       |                      |          |



Fussell                 Expires December 3, 2016                [Page 6]

Internet-Draft                Sym Alg JSON                     June 2016


   |         | length in     |       |                      |          |
   |         | bits of prime |       |                      |          |
   |         | p.            |       |                      |          |
   |         |               |       |                      |          |
   | n       | The length in | value | 160 when L is 1024.  | No       |
   |         | bits of q     |       | 224, or 256 when L   |          |
   |         | which is a    |       | is 2048. Otherwise   |          |
   |         | prime factor  |       | 256.                 |          |
   |         | of (p-1).     |       |                      |          |
   |         |               |       |                      |          |
   | pqGen   | The methods   | array | Any non-empty subset | No       |
   |         | supported to  |       | of {"probable",      |          |
   |         | generate p    |       | "provable"}.         |          |
   |         | and q.        |       |                      |          |
   |         |               |       |                      |          |
   | gGen    | The methods   | array | Any non-empty subset | No       |
   |         | supported to  |       | of {"unverifiable",  |          |
   |         | generate g.   |       | "canonical"}.        |          |
   |         |               |       |                      |          |
   | hashAlg | The hash      | array | Any non-empty subset | No       |
   |         | functions     |       | of {"sha-1",         |          |
   |         | supported     |       | "sha2-224",          |          |
   |         | when          |       | "sha2-256",          |          |
   |         | generating p, |       | "sha2-384",          |          |
   |         | q and g.      |       | "sha2-512",          |          |
   |         |               |       | "sha2-512/224",      |          |
   |         |               |       | "sha2-512/256"}.     |          |
   |         |               |       | Note that the digest |          |
   |         |               |       | size of the hash     |          |
   |         |               |       | function MUST be     |          |
   |         |               |       | equal to or greater  |          |
   |         |               |       | than N.              |          |
   +---------+---------------+-------+----------------------+----------+

               Table 4: DSA pqgVer Capabilities JSON Values

2.3.3.  The keyGen Mode Capabilities

   The DSA keyGen mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each DSA keyGen mode capability set is advertised as a self-contained
   JSON object.

2.3.3.1.  keyGen Full Set of Capabilities




Fussell                 Expires December 3, 2016                [Page 7]

Internet-Draft                Sym Alg JSON                     June 2016


   The complete list of DSA key generation capabilities may be
   advertised by the ACVP compliant crypto module:

   +---------+---------------------+--------+---------------+----------+
   | JSON    | Description         | JSON   | Valid Values  | Optional |
   | Value   |                     | type   |               |          |
   +---------+---------------------+--------+---------------+----------+
   | l       | The length in bits  | value  | 2048, or 3072 | No       |
   |         | of the field and    |        |               |          |
   |         | the length in bits  |        |               |          |
   |         | of prime p.         |        |               |          |
   |         |                     |        |               |          |
   | n       | The length in bits  | value  | 224, or 256   | No       |
   |         | of q which is a     |        | when L is     |          |
   |         | prime factor of     |        | 2048.         |          |
   |         | (p-1).              |        | Otherwise     |          |
   |         |                     |        | 256.          |          |
   +---------+---------------------+--------+---------------+----------+

               Table 5: DSA keyGen Capabilities JSON Values

2.3.4.  The sigGen Mode Capabilities

   The DSA sigGen mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each DSA sigGen mode capability set is advertised as a self-contained
   JSON object.

2.3.4.1.  sigGen Full Set of Capabilities

   The complete list of DSA signature generation capabilities may be
   advertised by the ACVP compliant crypto module:

   +---------+---------------+-------+----------------------+----------+
   | JSON    | Description   | JSON  | Valid Values         | Optional |
   | Value   |               | type  |                      |          |
   +---------+---------------+-------+----------------------+----------+
   | l       | The length in | value | 2048, or 3072        | No       |
   |         | bits of the   |       |                      |          |
   |         | field and the |       |                      |          |
   |         | length in     |       |                      |          |
   |         | bits of prime |       |                      |          |
   |         | p.            |       |                      |          |
   |         |               |       |                      |          |
   | n       | The length in | value | 224, or 256 when L   | No       |



Fussell                 Expires December 3, 2016                [Page 8]

Internet-Draft                Sym Alg JSON                     June 2016


   |         | bits of q     |       | is 2048. Otherwise   |          |
   |         | which is a    |       | 256.                 |          |
   |         | prime factor  |       |                      |          |
   |         | of (p-1).     |       |                      |          |
   |         |               |       |                      |          |
   | hashAlg | The hash      | array | Any non-empty subset | No       |
   |         | functions     |       | of {"sha2-224",      |          |
   |         | supported     |       | "sha2-256",          |          |
   |         | when signing  |       | "sha2-384",          |          |
   |         | a message.    |       | "sha2-512",          |          |
   |         |               |       | "sha2-512/224",      |          |
   |         |               |       | "sha2-512/256"}.     |          |
   +---------+---------------+-------+----------------------+----------+

               Table 6: DSA sigGen Capabilities JSON Values

2.3.5.  The sigVer Mode Capabilities

   The DSA sigVer mode capabilities are advertised as JSON objects,
   which are elements of the 'algSpecs' array in the ACVP registration
   message.  See the ACVP specification for details on the registration
   message.

   Each DSA sigVer mode capability set is advertised as a self-contained
   JSON object.

2.3.5.1.  sigVer Full Set of Capabilities

   The complete list of DSA signature verification capabilities may be
   advertised by the ACVP compliant crypto module:

   +---------+---------------+-------+----------------------+----------+
   | JSON    | Description   | JSON  | Valid Values         | Optional |
   | Value   |               | type  |                      |          |
   +---------+---------------+-------+----------------------+----------+
   | l       | The length in | value | 1024, 2048, or 3072  | No       |
   |         | bits of the   |       |                      |          |
   |         | field and the |       |                      |          |
   |         | length in     |       |                      |          |
   |         | bits of prime |       |                      |          |
   |         | p.            |       |                      |          |
   |         |               |       |                      |          |
   | n       | The length in | value | 160 when L is 1024.  | No       |
   |         | bits of q     |       | 224, or 256 when L   |          |
   |         | which is a    |       | is 2048. Otherwise   |          |
   |         | prime factor  |       | 256.                 |          |
   |         | of (p-1).     |       |                      |          |
   |         |               |       |                      |          |



Fussell                 Expires December 3, 2016                [Page 9]

Internet-Draft                Sym Alg JSON                     June 2016


   | hashAlg | The hash      | array | Any non-empty subset | No       |
   |         | functions     |       | of {"sha-1",         |          |
   |         | supported     |       | "sha2-224",          |          |
   |         | when          |       | "sha2-256",          |          |
   |         | verifying a   |       | "sha2-384",          |          |
   |         | message.      |       | "sha2-512",          |          |
   |         |               |       | "sha2-512/224",      |          |
   |         |               |       | "sha2-512/256"}.     |          |
   +---------+---------------+-------+----------------------+----------+

               Table 7: DSA sigVer Capabilities JSON Values

2.4.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation session would require multiple test vector
   sets to be downloaded and processed by the ACVP client.  Each test
   vector set represents an individual DSA function.  This section
   describes the JSON schema for a test vector set used with DSA
   algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.The following table
   describes the JSON elements at the top level of the hierarchy.

   +----------------+---------------------------------------+----------+
   | JSON Value     | Description                           | JSON     |
   |                |                                       | type     |
   +----------------+---------------------------------------+----------+
   | acvVersion     | Protocol version identifier           | value    |
   |                |                                       |          |
   | vsId           | Unique numeric identifier for the     | value    |
   |                | vector set                            |          |
   |                |                                       |          |
   | algorithm      | DSA                                   | value    |
   |                |                                       |          |
   | mode           | The DSA mode used for the test        | value    |
   |                | vectors.                              |          |
   |                |                                       |          |
   | testGroups     | Array of test group JSON objects,     | array    |
   |                | which are defined in Section 2.4.1    |          |
   +----------------+---------------------------------------+----------+

                      Table 8: Vector Set JSON Object





Fussell                 Expires December 3, 2016               [Page 10]

Internet-Draft                Sym Alg JSON                     June 2016


2.4.1.  Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the secure hash JSON elements of the Test
   Group JSON object.

   The test group for DSA is as follows:

   +-----------+-------------------------------+----------+------------+
   | JSON      | Description                   | JSON     | Optional   |
   | Value     |                               | type     |            |
   +-----------+-------------------------------+----------+------------+
   | l         | Length in bits of prime       | value    | No         |
   |           | modulus p                     |          |            |
   |           |                               |          |            |
   | n         | Length in bits of prime       | value    | No         |
   |           | divisor q                     |          |            |
   |           |                               |          |            |
   | p         | Domain parameter P            | value    | Yes        |
   |           |                               |          |            |
   | q         | Domain parameter Q            | value    | Yes        |
   |           |                               |          |            |
   | g         | Domain parameter G            | value    | Yes        |
   |           |                               |          |            |
   | hashAlg   | The hash algorithm used in    | value    | No         |
   |           | the test group                |          |            |
   |           |                               |          |            |
   | pqMode    | The specific pq generation    | value    | No         |
   |           | mode used in the test group   |          |            |
   |           |                               |          |            |
   | gMode     | The specific g generation     | value    | No         |
   |           | mode used in the test group   |          |            |
   |           |                               |          |            |
   | tests     | Array of individual test      | array    | No         |
   |           | vector JSON objects, which    |          |            |
   |           | are defined in Section 2.4.2  |          |            |
   +-----------+-------------------------------+----------+------------+

                     Table 9: Vector Group JSON Object

2.4.2.  Test Case JSON Schema





Fussell                 Expires December 3, 2016               [Page 11]

Internet-Draft                Sym Alg JSON                     June 2016


   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each DSA test vector.

   +--------------+----------------------------+-----------+-----------+
   | JSON Value   | Description                | JSON type | Optional  |
   +--------------+----------------------------+-----------+-----------+
   | tcId         | Numeric identifier for the | value     | No        |
   |              | test case, unique across   |           |           |
   |              | the entire vector set.     |           |           |
   |              |                            |           |           |
   | p            | The prime modulus          | value     | Yes       |
   |              |                            |           |           |
   | q            | The prime divisor of p - 1 | value     | Yes       |
   |              |                            |           |           |
   | domainSeed   | The seed used to generate  | value     | Yes       |
   |              | p and q in the probable    |           |           |
   |              | method                     |           |           |
   |              |                            |           |           |
   | counter      | The counter used to        | value -   | Yes       |
   |              | generate p and q in the    | integer   |           |
   |              | probable method            |           |           |
   |              |                            |           |           |
   | pSeed        | The seed used to generate  | value     | Yes       |
   |              | p in the provable method   |           |           |
   |              |                            |           |           |
   | qSeed        | The seed used to generate  | value     | Yes       |
   |              | q in the provable method   |           |           |
   |              |                            |           |           |
   | pCounter     | The counter used to        | value -   | Yes       |
   |              | generate p in the provable | integer   |           |
   |              | method                     |           |           |
   |              |                            |           |           |
   | qCounter     | The counter used to        | value -   | Yes       |
   |              | generate q in the provable | integer   |           |
   |              | method                     |           |           |
   |              |                            |           |           |
   | g            | The generator              | value     | Yes       |
   |              |                            |           |           |
   | h            | The index value provided   | value     | Yes       |
   |              | to the g generator in the  |           |           |
   |              | unverifiable method        |           |           |
   |              |                            |           |           |
   | index        | The index value provided   | value     | Yes       |
   |              | to the g generator in the  |           |           |
   |              | canonical method           |           |           |
   |              |                            |           |           |



Fussell                 Expires December 3, 2016               [Page 12]

Internet-Draft                Sym Alg JSON                     June 2016


   | r            | The signature component R  | value     | Yes       |
   |              |                            |           |           |
   | s            | The signature component S  | value     | Yes       |
   |              |                            |           |           |
   | y            | The public key component Y | value     | Yes       |
   |              |                            |           |           |
   | message      | The message used to        | value     | Yes       |
   |              | generate signature or      |           |           |
   |              | verify signature           |           |           |
   +--------------+----------------------------+-----------+-----------+

                      Table 10: Test Case JSON Object

2.5.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

   +-----------------+---------------------------------------+---------+
   | JSON Value      | Description                           | JSON    |
   |                 |                                       | type    |
   +-----------------+---------------------------------------+---------+
   | acvVersion      | Protocol version identifier           | value   |
   |                 |                                       |         |
   | vsId            | Unique numeric identifier for the     | value   |
   |                 | vector set                            |         |
   |                 |                                       |         |
   | testResults     | Array of JSON objects that represent  | array   |
   |                 | each test vector result, as defined   |         |
   |                 | by the tables below                   |         |
   +-----------------+---------------------------------------+---------+

                 Table 11: Vector Set Response JSON Object

   The following table describes the JSON object that represents a
   vector set response for DSA.

   +--------------+-------------------+---------------------+----------+
   | JSON Value   | Description       | JSON type           | Optional |
   +--------------+-------------------+---------------------+----------+
   | p            | The prime modulus | value               | Yes      |
   |              |                   |                     |          |
   | q            | The prime divisor | value               | Yes      |
   |              | of p - 1          |                     |          |
   |              |                   |                     |          |
   | g            | The generator     | value               | Yes      |



Fussell                 Expires December 3, 2016               [Page 13]

Internet-Draft                Sym Alg JSON                     June 2016


   |              |                   |                     |          |
   | x            | The private key   | value               | Yes      |
   |              | component X       |                     |          |
   |              |                   |                     |          |
   | y            | The public key    | value               | Yes      |
   |              | component Y       |                     |          |
   |              |                   |                     |          |
   | r            | The signature     | value               | Yes      |
   |              | component R       |                     |          |
   |              |                   |                     |          |
   | s            | The signature     | value               | Yes      |
   |              | component S       |                     |          |
   |              |                   |                     |          |
   | domainSeed   | The seed used to  | value               | Yes      |
   |              | generate p and q  |                     |          |
   |              | in the probable   |                     |          |
   |              | method            |                     |          |
   |              |                   |                     |          |
   | counter      | The counter used  | value - integer     | Yes      |
   |              | to generate p and |                     |          |
   |              | q in the probable |                     |          |
   |              | method            |                     |          |
   |              |                   |                     |          |
   | pSeed        | The seed used to  | value               | Yes      |
   |              | generate p in the |                     |          |
   |              | provable method   |                     |          |
   |              |                   |                     |          |
   | qSeed        | The seed used to  | value               | Yes      |
   |              | generate q in the |                     |          |
   |              | provable method   |                     |          |
   |              |                   |                     |          |
   | pCounter     | The counter used  | value - integer     | Yes      |
   |              | to generate p in  |                     |          |
   |              | the provable      |                     |          |
   |              | method            |                     |          |
   |              |                   |                     |          |
   | qCounter     | The counter used  | value - integer     | Yes      |
   |              | to generate q in  |                     |          |
   |              | the provable      |                     |          |
   |              | method            |                     |          |
   |              |                   |                     |          |
   | result       | The pass or fail  | "passed"/"failed"   | Yes      |
   |              | result of the     |                     |          |
   |              | verify            |                     |          |
   +--------------+-------------------+---------------------+----------+

                 Table 12: Vector Set Response JSON Object




Fussell                 Expires December 3, 2016               [Page 14]

Internet-Draft                Sym Alg JSON                     June 2016


2.6.  Acknowledgements

   TBD...

2.7.  IANA Considerations

   This memo includes no request to IANA.

2.8.  Security Considerations

   Security considerations are addressed by the ACVP specification.

3.  Normative References

   [ACVP]     authSurName, authInitials., "ACVP Specification", 2016.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, DOI 10.17487/
              RFC2119, March 1997, <https://www.rfc-editor.org/info/
              rfc2119>.

Appendix A.  Example DSA JSON Object

   The following sections contain example JSON for the various DSA
   modes: keyPair, sigGen, sigVer, pqgGen and pqgVer.  Note that all
   binary HEX representations are in big-endian format.

A.1.  Example DSA PQGGen Capabilities JSON Object

   The following is a example JSON object advertising support for DSA
   pqgGen.


   {
       "algorithm": "DSA",
       "mode": "pqgGen",
       "prereqVals": [
         {
             "algorithm": "SHA",
             "valValue": "123456"
         },
         {
             "algorithm": "DRBG",
             "valValue": "123456"
         }
       ],
       "algSpecs": [
       {



Fussell                 Expires December 3, 2016               [Page 15]

Internet-Draft                Sym Alg JSON                     June 2016


         "pqGen": [
           "probable",
           "provable"
         ],
         "gGen": [
           "unverifiable",
           "canonical"
         ],
         "l": 2048,
         "n": 224,
         "hashAlg": [
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       },
       {
         "pqGen": [
           "probable",
           "provable"
         ],
         "gGen": [
           "unverifiable",
           "canonical"
         ],
         "l": 2048,
         "n": 256,
         "hashAlg": [
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/256"
         ]
       },
       {
         "pqGen": [
           "probable",
           "provable"
         ],
         "gGen": [
           "unverifiable",
           "canonical"
         ],
         "l": 3072,
         "n": 256,



Fussell                 Expires December 3, 2016               [Page 16]

Internet-Draft                Sym Alg JSON                     June 2016


         "hashAlg": [
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/256"
         ]
       }
     ]
   }


A.2.  Example DSA PQGVer Capabilities JSON Object

   The following is a example JSON object advertising support for DSA
   pqgVer.


   {
       "algorithm": "DSA",
       "mode": "pqgVer",
       "prereqVals": [
         {
             "algorithm": "SHA",
             "valValue": "123456"
         },
         {
             "algorithm": "DRBG",
             "valValue": "123456"
         }
       ],
       "algSpecs": [
       {
         "pqGen": [
           "probable",
           "provable"
         ],
         "gGen": [
           "unverifiable",
           "canonical"
         ],
         "l": 1024,
         "n": 160,
         "hashAlg": [
           "sha-1",
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",



Fussell                 Expires December 3, 2016               [Page 17]

Internet-Draft                Sym Alg JSON                     June 2016


           "sha2-512/224",
           "sha2-512/256"
         ]
       },
       {
         "pqGen": [
           "probable",
           "provable"
         ],
         "gGen": [
           "unverifiable",
           "canonical"
         ],
         "l": 2048,
         "n": 224,
         "hashAlg": [
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       },
       {
         "pqGen": [
           "probable",
           "provable"
         ],
         "gGen": [
           "unverifiable",
           "canonical"
         ],
         "l": 2048,
         "n": 256,
         "hashAlg": [
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/256"
         ]
       },
       {
         "pqGen": [
           "probable",
           "provable"
         ],
         "gGen": [



Fussell                 Expires December 3, 2016               [Page 18]

Internet-Draft                Sym Alg JSON                     June 2016


           "unverifiable",
           "canonical"
         ],
         "l": 3072,
         "n": 256,
         "hashAlg": [
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/256"
         ]
       }
     ]
   }


A.3.  Example DSA KeyGen Capabilities JSON Object

   The following is a example JSON object advertising support for DSA
   keyGen.


   {
       "algorithm": "DSA",
       "mode": "keyGen",
       "prereqVals": [
         {
             "algorithm": "SHA",
             "valValue": "123456"
         },
         {
             "algorithm": "DRBG",
             "valValue": "123456"
         }
       ],
       "algSpecs": [
       {
         "n": 224,
         "l": 2048
       },
       {
         "n": 256,
         "l": 2048
       },
       {
         "n": 256,
         "l": 3072
       }



Fussell                 Expires December 3, 2016               [Page 19]

Internet-Draft                Sym Alg JSON                     June 2016


     ]
   }


A.4.  Example DSA SigGen Capabilities JSON Object

   The following is a example JSON object advertising support for DSA
   sigGen.


   {
       "algorithm": "DSA",
       "mode": "sigGen",
       "prereqVals": [
       {
         "n": 224,
         "l": 2048,
         "hashAlg": [
           "sha-1",
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       },
       {
         "n": 256,
         "l": 2048,
         "hashAlg": [
           "sha-1",
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       },
       {
         "n": 256,
         "l": 3072,
         "hashAlg": [
           "sha-1",
           "sha2-224",
           "sha2-256",
           "sha2-384",



Fussell                 Expires December 3, 2016               [Page 20]

Internet-Draft                Sym Alg JSON                     June 2016


           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       }
     ]
   }


A.5.  Example DSA SigVer Capabilities JSON Object

   The following is a example JSON object advertising support for DSA
   sigVer.


   {
       "algorithm": "DSA",
       "mode": "sigVer",
       "prereqVals": [
       {
         "n": 160,
         "l": 1024,
         "hashAlg": [
           "sha-1",
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       },
       {
         "n": 224,
         "l": 2048,
         "hashAlg": [
           "sha-1",
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       },
       {
         "n": 256,
         "l": 2048,



Fussell                 Expires December 3, 2016               [Page 21]

Internet-Draft                Sym Alg JSON                     June 2016


         "hashAlg": [
           "sha-1",
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       },
       {
         "n": 256,
         "l": 3072,
         "hashAlg": [
           "sha-1",
           "sha2-224",
           "sha2-256",
           "sha2-384",
           "sha2-512",
           "sha2-512/224",
           "sha2-512/256"
         ]
       }
     ]
   }


A.6.  Example Test DSA PQGGen JSON Object

   The following is a example JSON object for DSA pqgGen, test vectors
   sent from the ACVP server to the crypto module and the response.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "DSA",
           "mode": "pqgGen",
           "testGroups": [
               {
                   "l": 2048,
                   "n": 224,
                   "hashAlg": "sha2-224",
                   "pqMode": "probable",
                   "testType": "GDT",



Fussell                 Expires December 3, 2016               [Page 22]

Internet-Draft                Sym Alg JSON                     June 2016


                   "tests": [
                       {
                           "tcId": 1,
                       }
                   ]
               },
               {
                   "l": 2048,
                   "n": 224,
                   "hashAlg": "sha2-224",
                   "pqMode": "provable",
                   "testType": "GDT",
                   "tests": [
                       {
                           "tcId": 2,
                       }
                   ]
               },
               {
                   "l": 2048,
                   "n": 224,
                   "hashAlg": "sha2-224",
                   "testType": "GDT",
                   "gMode": "unverifiable",
                   "tests": [
                       {
                         "tcId": 3,
                         "p": "B9D5DEC1F8541708FF43F29134D913AFF5F47A56A18932039C07008E5DF83FD520349226C8F47ED213A43372188E3A22246766C753FA66A4666499802C67F0E827057D0B8DF5089602D5BD45652F500F1755D02294963A7E7F219BA261FA8804A2B4F4E5DAC97577892A5A6CD16A106DE30C386993986BE54EE3F147F7774B99662358CD6A7B49A1B5ACE7EA1121BEF0DC485FE50379A6A5B130F6D92C495CBCB789D79B7C28A955EE86222001B4C8C55DCE924E4F3FBAC8D9886BEC8B3846B37BDC0B6468EBB302EF74A505FB41753E02FE8F2AF3E930303D6B5F805EC090AF963766746DC5546F32D3F57A80AF4730544353939A3C5E2A09BF87D52DF30CBF",
                         "q": "9F3FCC1DA20ACCD5C3E1C97B04E0FE38B4E8E9ACC6AA076CD0A1BD81"
                       },
                   ]
               },
               {
                   "l": 2048,
                   "n": 224,
                   "hashAlg": "sha2-224",
                   "testType": "GDT",
                   "gMode": "canonical",
                   "tests": [
                       {
                         "tcId": 4,
                         "p": "CACDDA5F26C38B7EF49E8AC524AB8798FAF1328D7B64DCFC8DCEC1A129C7153D81D086FF9EE82A78ACBE4672EB4415C96FD7889BD22CFB9CDD6637D246607655E60EB927F56C115D56D4B4EB124FA0CB2EF9CED3FAF539EF6F78564267AB7E0D1506D3554D191C21ADA02177D2F87ABC5ECD00A570ECEE2E3E9AF2A044D76C6DE7CDC319FB36DE181521F92DB5DC6C89D71B6D9B192C1AA56060144BAE4202C904758560409EE87788793AFFFC1AB2B608841772CE13A782EC8CDE91838CB77F32CC8F31FF345AEB54BC6FC1DB29DDBA83E5BD5E879CC025ADBC198D7568D88F4E815AC2246D8BEF381AA1579F04EE653C125742F18E4090B983B8025AD531E5",
                         "q": "A4D538BAE42A3531663DD60DD8ACA2F0415C483DE36EF62EB4B2CEA3",
                         "domainSeed": "E8A171F4CDF1674093EA6771EE3DC6737018834C9A346097B49119F8",
                         "index": "AD"
                       },
                   ]
               }



Fussell                 Expires December 3, 2016               [Page 23]

Internet-Draft                Sym Alg JSON                     June 2016


           ]
       }
   ]


   The following is a example JSON object for DSA PQGGen test results
   sent from the crypto module to the ACVP server.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "testResults": [
               {
                 "tcId": 1,
                 "p": "AF57210AEC6154DF56A7A7AA8ADAC766938482FFE59F846A6F0909A273A55594459A47C110D5A552E8E6F66FC029736E10A7E2BD8982142368ECC21A5CAAD0AF622447ED9CD8BC058F19F94F45249BDDF294D82AF392796F513E88DACD8B596E204A6CA41046F0B66370A1E35718A0894E90D5294E7197DA1371DF905B5E374272A980D9563DC27E619718397E21A860277D9D789972B21636C836F716BD353928CD191D9E9640E413A0F06D297B49AD036D9BF8CFBBDCCD1DCC6CEA8B0A834147779BB043E85DC782DAAE8FC712A6D01F1F2251D980C467EAE5553856FB1942DF39B0898729B6F9439FE10DD266DE6FE956A4E24311497168DF7B62D366CC87",
                 "q": "C2B5571D7A042507ED4B66FA9A0D162FC9DAAB1511AD1DB4951BCAA9",
                 "counter": 86
               },
               {
                 "tcId": 2,
                 "p": "9C0571B778FE82E447007618AE687CC9F3CAA5F3233F6559EAA8FA9C90F47991B0CCF3331764D5C10E93D476CB603638FFF96BAA155385D03823F57C8FA1848B2B7D9508FC402AC9412A05A915470DA770E2B6F9E75AC6BFD61651E523340964840C8DA4630E4429AEBA529ECC4F7DB20E2A301E18E5CE87120A39E563322C64317540680AB581A3FA9CD7845CCC528E3793CE4D7D34BF8020FD8AA191AF3CB0BC21CA4DE448067F0FE0405FA859C6779EF37832F948BDFC1716BF1D3CA6CC1070D7D3217CF1FA51D179B1DE4F3E190E7AA9AD359295310ADFB250EBC900797243CC14B275BD48FD0A7161D4585D893D3E6CCFE856B03B4596EE87A721697ECF",
                 "q": "CCF209C4E61FFC0B9363AFFF2FE7094B672B39D93CCCDB26C20872A7",
                 "pSeed": "FC10A9DE4B63CAB3FE4BEC69D4BE8A2B3AA4318F16DED95FD86C4D93",
                 "qSeed": "FC10A9DE4B63CAB3FE4BEC69D4BE8A2B3AA4318F16DED95FD86C2225",
                 "pCounter": 1514,
                 "qCounter": 46
               },
               {
                 "tcId": 3,
                 "g": "01098AD5E87869EF692ABECEB678C93C565AC9AED02016411176FF6E3003511A425C26A4E30A2AB9AE9D21CBDA505E3931605220913B10129B72019D5A0CFAC34241E69E3E9D9ECFD29B4057B5B8D32FBA664CD7F34C1F7012831DF7BB017F6E887DAB24BB556D79BCA5D4A4D29DA23442C44C17FBE2EFAC2E02E6BA0FD705D6C1110CC388C4A5AA1B0527EBDD55A4818DDAFDBF86ABD9E8FA490BBC1A2E842862895CD6D6C9AC5043A47B4DFC527E6804B2EC369ECD53712EA21EABDA63FE61A88B3519056DEC16C52D43ED9EC3B140836569BEC28AFEBC476B4049E2E244E22BD20BA2ED35527E60BC1E7F81CDC25B084FFDD0064BA100AD5267F87E1C3DAD"
               },
               {
                 "tcId": 4,
                 "g": "5C4AB5D4C901A37511DCC0A21D9E19356D31C521C1377C357DC38D5F997D1743CBF9A200D5D6F084EA75220DC7136189FC60E4461F9902E7BEDF2A0A58739E672BCD00D178684756E8E5B2D9425640CE728FD183A4BD24EFC0B2806B722CF33EC7B39E9E70AE128DBF03F8188B279926B3773C572D5A5CAC30B9FB278F66957B803F3DC8C67827184CC7ACA32088A4DDB7343F6207F8803833D403BD73D752AAB9F1F75E6242C0EF25F1F14C451EA3A2614248291EBD8D184C103F83A77BC7667C4096C72C2E5D5A629F6555B7C00C094DE65C4311765823E18C7FC150984BF4A53997D560F2186BCC0AD62F21A71E7DA2E1A26D90DB3BCC5C98CD85F856A4B1"
               }
           ]
       }
   ]


A.7.  Example Test DSA PQGVer JSON Object

   The following is a example JSON object for DSA PQGVer, test vectors
   sent from the ACVP server to the crypto module and the response.



Fussell                 Expires December 3, 2016               [Page 24]

Internet-Draft                Sym Alg JSON                     June 2016


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "DSA",
           "testGroups": [
             {
               "l": 1024,
               "n": 160,
               "hashAlg": "sha-1",
               "testType": "GDT",
               "pqMode": "probable",
               "tests": [
                 {
                   "tcId": 1,
                   "p": "9D9269AC94DB5003355DF597CD4136A049EEE19F0843A8B90E75E9CC37261713F53120EC3BDF10DECACFB369B6CED7FFC05DF938FB001C2DE8929524E36DFB9B8741503E23F471862D2C963152FD907441E5532B7E401765BB35AB7B0AB90DC5C13936E0CB5B46261F5F2DF944BBE2EC24AD37AB427CC52B20FBB95A38DCA267",
                   "q": "C5C97FD66D441234E781EA5E94C4448BCB040B1F",
                   "domainSeed": "259947680F2833C3BE3C7AFCFDFB18BF231ADFD5",
                   "counter": 309
                 },
               ]
             },
             {
               "l": 1024,
               "n": 160,
               "hashAlg": "sha-1",
               "testType": "GDT",
               "pqMode": "provable",
               "tests": [
                 {
                   "tcId": 36,
                   "p": "4BDC98F8302E24CEDCE682F8040E65D6920A29499CDB7C0E4BC15EAF7496A60A7BF3D9717658831945D558B845C2D293D31BEC1285BCF1254D0F50B3486AA4359FC7BAD7A139F17E1DAF068D00C91D9B75A61918CB45D235CA7BAA68D6A0C94B635982625E4739EC34B85857F1BBA0F778275311B6088E212A181EDB26263775",
                   "q": "A00C3FEAF8F56910DA55DF1B12C2B519BF226DC1",
                   "pCounter": 1874,
                   "qCounter": 115,
                   "pSeed": "C4967615C4E13913F2E4659EF7ECCD05A205A791",
                   "qSeed": "C4967615C4E13913F2E4659EF7ECCD05A2057F52"
                 },
               ]
             },
             {
               "l": 1024,
               "n": 160,
               "hashAlg": "sha-1",
               "testType": "GDT",
               "gMode": "unverifiable",



Fussell                 Expires December 3, 2016               [Page 25]

Internet-Draft                Sym Alg JSON                     June 2016


               "tests": [
                 {
                   "tcId": 211,
                   "p": "A1648B0F29F5D38DA50753824EE0B1A6E33751DC498CFE4994AAE7F8E3082704E8F97FFC41F19D18845687F8CE1C4319BCEC9E37F3958B4D59D70C63FFB574F5C2866F4D15513B01637AD89551A3A319F7ADC7182E04766767AEF971D1E23763A12ED17CF3376514F00723CD935B99E4AABD836D43B38A9E0FCBF0A8709304B1",
                   "q": "9BCF7E1625844A88EABB9C489F2F57916CD2FCAB",
                   "g": "0FB0987B157E12F15D78D53CD14106B98F6D2CC978B08A4BE87EADF01463490E87DAFD4B95FF907257A5B570799690545A78781C98BFD94264F3B92AEF00872E0CBC2B07C5301F96A804A39E5E3274540194350865079816A031AE8C389FE9033D212B667F8311AE88D78351955F0D86C704002CC039260B64784BFCB7E14C04",
                   "h": "02",
                   "domainSeed": "D9F63E102A97A2C21EB39EDCC7B593C117BC7DBC"
                 },
               ]
             },
             {
               "l": 1024,
               "n": 160,
               "hashAlg": "sha-1",
               "testType": "GDT",
               "gMode": "canonical",
               "tests": [
                 {
                   "tcId": 246,
                   "p": "9A1B46A4498962D12FDE300EB25B65E06DB00ED31D3AB653D5244894A243A149034FF193EC603C2872287F2B14E628C1B9C9391A56B544DA0906103BB308BC1196CA0BF92C7BFE4CA3C593243CB695C1EFC727557D85B9E0B0A07599636C6692DCD8895C87F66797CC9F61B3AE06FA94A2301D40A0D280E60DE40F66310244C9",
                   "q": "B70E07662CADF2A4191470948B040BE39BD56671",
                   "g": "45659A0B48B5B581E5CA68C8B81731DEE8381619A0F6EF421E20FB26CB0F78DE3571C73C98441BAE2E2C7B1201E95A32E4BD28D347AC5DFEA5848E9AD48C579D17756AF49E4E620B85E9EE4FFE1C4F8B111F161FA2FF292529FAF97776877B34C3B35950C0A1A27FBEC78164B1D48AD6E0F8D58E09EA2E5ACE96C3F8C0250678",
                   "index": "45"
                 },
               ]
             }
           ]
       }
   ]


   The following is a example JSON object for DSA PQGVer test results
   sent from the crypto module to the ACVP server.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "testResults": [
             {
               "tcId": 1,
               "result": "failed",
             },
             {



Fussell                 Expires December 3, 2016               [Page 26]

Internet-Draft                Sym Alg JSON                     June 2016


               "tcId": 36,
               "result": "failed",
             },
             {
               "tcId": 211,
               "result": "passed",
             },
             {
               "tcId": 211,
               "result": "passed",
             }
           ]
       }
   ]


A.8.  Example Test DSA KeyGen JSON Object

   The following is a example JSON object for DSA KeyGen, test vectors
   sent from the ACVP server to the crypto module and the response.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "DSA",
           "mode": "keyGen",
           "testGroups": [
             {
               "l": 2048,
               "n": 224,
               "tests": [
                 {
                   "tcId": 1
                 },
               ]
             }
           ]
       }
   ]


   The following is a example JSON object for DSA KeyGen test results
   sent from the crypto module to the ACVP server.




Fussell                 Expires December 3, 2016               [Page 27]

Internet-Draft                Sym Alg JSON                     June 2016


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "testResults": [
             {
               "tcId": 1,
               "p": "9D75F12AD16C09A618F3D256271327F0431E65C2F8C6F1D40A261000EC163ED2AB9F3637DF2B3DAB7512C001BE108664BC1050F10F4CC2896024372521D5D05E8C240DDB3FC7F0D0204538A93193C2099DA7FB3DC5D8A0EE2E84D10FF014C2FF42675EFFBBBB4AEEE5815C4E7B59B5F70C1CA714CA969C55628864B9B5EB60F99090A59A77FC4B6DEA4E015519BF68C1F75A55B560330B4F556A09D252CB7C6BA7988C34A57092D517949A952A95D5D166036339523683FDA00BA36C8B9D1BC502B5ACC1E209FE5D73637AA82753BD4316982D3F66CCA393D611703629A9EE4E20BABAB52D04383B448F309A0DE2825B64F2CDDE0851B009C9F1A8C245407EFB",
               "q": "F9146BFEC592547B8C6973785D9604578F5A72EDA6AE4D59674F39BF",
               "g": "96A7DD911D076093EBBA4D92FBC817ABADC916E1939086384CB2AAFE9F7D340EB06D2F28E2BB8BA4CFC65E173D9E776DB21C8156DFA5339082B2AE88523726B7620EB3601D75F7D0E88C8DBBD1EC248862ABF82A436FC24B59AD2A4DFE4156752CA3CD42575C73C9C2CFDF2253F966D6CAE94A358D0A116A66637A9A62349E3977FAEA59FB14D9A4482504AEFB3B89772018014BC0850CB50D8DD054AC5B3B2247578888D169246A8BA3E37AB01C5F2B66D3ECCFCC8EA5888D24E80F8A6E4E4BDAE582E2EB43ECDCECCF0D759784EADDE21490D090E458FA8A7172174E6AB0505BE295ADAAC49BBDAAAA36E56D5298F639A5F15DA3DD755D02AFA7C75EB39841",
               "x": "6316A9021906CB3F9F61F479BA591F14749CECFF90A890D14D7DD7AC",
               "y": "8520DE9F113D659F70870013D8B9E30E1B171625A1A40791D6A27B55FDEB88C027D56EAA8C007895CA8241B85E005841105326355E7EB915BCD2E7D94A0E2222B70EFA4F836E5EAEFB33A999DC6F478C8C1F5F0AD031EBC672738A18C4FF22661C9077608CE8A3AB296FEA57B07A21C4057B6069C32FBD915A449A97E1535968139892B5AFC15C9BD094F96C2FF5C593DA3AFCE43CB13590FF938548545B33D0CD6FBA5DBE2233737A76C6ECA47B5DB45C2E4B9CD3D77724C0652A3D4DFA85FEF6F36B5A3399B6F09AD3227CE4B258224537B33FA1BFAEE1C83BCEC704F426748960B8973CE0443F21E240DD4C5295043CF0BF41D7553B08CC6E87C64F943985"
             },
           ]
       }
   ]


A.9.  Example Test DSA Generation JSON Object

   The following is a example JSON object for DSA SigGen, test vectors
   sent from the ACVP server to the crypto module and the response.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "DSA",
           "mode": "sigGen",
           "testGroups": [
               {
                   "l": 2048,
                   "n": 224,
                   "sha": "sha-1",
                   "tests": [
                       {
                           "tcId": 1,
                           "message": "C1FEBB069145F6A9693A2EEAD3A4771743725113B173576429DFA1B95CD577C29ADAD1DBF82CCA583578DBB4EAB237BE10553C701A647492D9B4325C9E2C2245EF199D0A63876C7FE26C78260631185B3B40E57F1A66DC37E4346365ABADC5AD9FE1E6030E73FEF5D456D7F79C59C73D19DE0963D9C126D51DAB7E627D41D6B963147FCD6E323A45A3BF40403CFAE36397E0A6826629C21EAF553649B8A2B4159713F180BC5E1DC061708C9CE0D52A53F5370432566ECD55953C2C8CF29BB5305B2116674DD99A9B12FDF1347E585BDCE128E46ED31036AE7B3F5957FA30BD52A40BF43BB20C7CD9A5D8428D1D4895EF9427BDB0ED5A3C4F5CC874CAB2407455"
                       }
                   ]
               }
           ]
       }



Fussell                 Expires December 3, 2016               [Page 28]

Internet-Draft                Sym Alg JSON                     June 2016


   ]


   The following is a example JSON object for DSA SigGen test results
   sent from the crypto module to the ACVP server.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "testResults": [
             {
               "tcId": 1,
               "p": "C8DC6C77CC31ADAE68F3221D59C75538F6956517FF915B96939D0355D3AE7D00789EDDFF13C6707CFAC855EE79FC5A25F7243FF8D6FAD5E89CC799FB275ADB2A6F573FDF69FBF3C3C358C51E229B7799D78416F33F2F20420F35BDABB967435C78EFE843BADF4D93A65538B54723BBF1489D20482A295224CA870EE7F65BC7A17611221D58DB4B51D9C32A359D93032DD97942E8042EC4458D1E78B97D783D14243AEFDE455ED9AEC1925FE49E4B2A9B2160D710CCBEA6BC679E2A2A5307F5CD6B7C8E1078E83DF39A636ACE7E6EED18FBDC56ED89AC21B2ED133566D4696609E0AD0C95DC776893AB71AC9E223CE318CE26FBAE29B812075975F6B73DAF3529",
               "q": "B1B7BCF2467F8CC46FCDD2A41327C2698D9E0A3F36682E17546EAE5B",
               "g": "6C07130A6F6D05AAC9350936EE06B1303035FE460CEBF21DDA00CC08CD5E8A788D8C3F6B4B0A567A82DBF373CE36A40ADCF77D0CB6CA9AB93D1C0051E354AEB27BBC808A4950E91E2BFFFEF7427DBEA5E05BC9A3C003F6796C0A3EF3CF7D30378657A0966AE952BDC038645199F3C2FBBFD0B4E6E489E97D6DF8A9AD4356B34A3CD289DF9BA53F95A62E110B2BA84D668D7F72EA6CA471B6624F0F2E5CB54C9E96367CD4659BC64EC731B7F60CE0F08B58CFB29090DBDE6BDD7EC16689A9CC3913F3F009E03280342150C0899814532F471594C883B3941ADA81EB95274BB0B8900C492D92AD5686141DBB302DD2C2B4EEA8C2C7AD9B616DF0A520B9CCF7074F",
               "y": "79143F63ECCC06B3D35C61DA2FB8ED359F8FBF014D699C3B6E150E60443BA461C256498F52262AD3850FECDA5F01F4702F5411BF25F0D9A4CF21F9B84B8FEF8C5E83563A1AE35C253D07011E5492106F46C7DF2624948E3662DAC129E5A094A6180F24480D3FFBD2F223156E68EBD6378ECBA010DF0CB6B3DD12045D8015E66160821AF5A12C8FE239AB331EBCDE6B906A40197769A74780700420C40428A81FBDEB94B9FE37183E9401167AFF6AEAE9968A6FBD11AFB3EB60ED076627CC2873EA2034BAEF2427C1BABF858D4E783B0FE3C51B39661EFBD9518F93A554E5E37428AFC62CF0C61A3B9248B56BBA0282E9BB7A8A6FB14D2CA4AAA9DC3245722525",
               "r": "4E7F70A92EC0E6871E2EA27585C0263E2AF539D5F1402A24E01FDB4B",
               "s": "641A74C54A0B642DED9FE6EEA311299F4FC759CA98D6EC339A823314"
             },
           ]
       }
   ]


A.10.  Example Test DSA SigVer JSON Object

   The following is a example JSON object for DSA SigVer, test vectors
   sent from the ACVP server to the crypto module and the response.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "algorithm": "DSA",
           "testGroups": [
             {
               "l": 1024,
               "n": 160,
               "p": "A48828B4A4E149C2D1FC66F108D370A2A9E87DBD49BC09A27017621A9BFBD3686162E7F3DB585207960C240FEEDC954D46D2B704495DD9BA1DD8ECE76F3BA69D6AF09EE4F21AF60D93517266ECA0D7C4940BE62F6D62C68CBE2C4AA225424F14B4A18FE19F950F7D756F56E5422F17E02951472BC454A4F7B615E0E94FD5AEE9",
               "q": "D3C53E62338D4231E42FA9683175C404FBF52759",
               "g": "7BDDD6B8E9B4667397B278F98F446C418EF1A502068B3082F9CE1D639F5FAA67048ACD4F50E1F855467465A653D2245B7E31C910A18EF79F098ACF73BFC43B1B5E7BFB065FB7A89583C5C23105018D0525AFA9C40B6C343E69CFC2B6B2A87FB4265FDE13D6F19A7BF7A1302AA14EDFA56FD1526241316D1BA182683B8E306CDA",



Fussell                 Expires December 3, 2016               [Page 29]

Internet-Draft                Sym Alg JSON                     June 2016


               "hashAlg": "sha-1",
               "tests": [
                 {
                   "tcId": 1,
                   "message": "1A128C1A61091CE52A8B89D69A3FFA5ECCD1FE70",
                   "y": "A3A2F1AFC3091204B7D7ED3617A80E0FD57221BE67E852A1558CA08984CB56F3A0EF37749B5EA4D2EC824ED5E7EDB0D25A72C8DEFA0F409909E31C2C23BB7A24B8103F11F9781A0F0A15FE6F6DAEFD42CD5FA7444221CB545BB0CDB95DC9D76E0DB9AF193E6832934537B0B05D177BA8F7DA48D9DD84D27B8AFE9481BE520B",
                   "r": "C390851DE10669399308D9F401B0286AA1F4189D",
                   "s": "26BE6EFDCD2ED6946BFCFE2D396AB3A2E84B2FF8"
                 },
               ]
             }
           ]
       }
   ]


   The following is a example JSON object for DSA generation test
   results sent from the crypto module to the ACVP server.


   [
       {
           "acvVersion": "0.4"
       },
       {
           "vsId": 1564,
           "testResults": [
               {
                   "tcId": 1,
                   "result": "passed"
               }
           ]
       }
   ]


Author's Address

   Barry Fussell (editor)
   Cisco Systems, Inc.
   170 West Tasman Dr.
   San Jose, CA  95134
   USA

   Email: bfussell@cisco.com






Fussell                 Expires December 3, 2016               [Page 30]
