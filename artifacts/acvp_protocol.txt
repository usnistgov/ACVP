



Internet Engineering Task Force                          B. Fussell, Ed.
Internet-Draft                                             Cisco Systems
Intended status: Informational                         February 16, 2017
Expires: August 20, 2017


              Automated Cryptographic Validation Protocol
                      draft-ietf-acvp-protocol-0.2

Abstract

   This document defines the Automated Cryptographic Validation
   Protocol(ACVP).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79. 

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 20, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Fussell                  Expires August 20, 2017                [Page 1]

Internet-Draft              Abbreviated Title              February 2017


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  Audience  . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  Goals . . . . . . . . . . . . . . . . . . . . . . . . . .   4
     2.3.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   5
   3.  Architecture  . . . . . . . . . . . . . . . . . . . . . . . .   5
     3.1.  Server/Client Architecture  . . . . . . . . . . . . . . .   5
     3.2.  Server/Proxy Architecture . . . . . . . . . . . . . . . .   6
   4.  ACV Protocol  . . . . . . . . . . . . . . . . . . . . . . . .   6
     4.1.  HTTP URI Hierarchy  . . . . . . . . . . . . . . . . . . .   7
     4.2.  HTTP URI Operations . . . . . . . . . . . . . . . . . . .   7
   5.  Security  . . . . . . . . . . . . . . . . . . . . . . . . . .   8
   6.  Authentication  . . . . . . . . . . . . . . . . . . . . . . .   8
   7.  Traceability  . . . . . . . . . . . . . . . . . . . . . . . .   9
   8.  Encoding  . . . . . . . . . . . . . . . . . . . . . . . . . .   9
   9.  Versioning  . . . . . . . . . . . . . . . . . . . . . . . . .   9
   10. Messaging . . . . . . . . . . . . . . . . . . . . . . . . . .   9
     10.1.  Product Registration/Capabilities Exchange . . . . . . .   9
     10.2.  Known Answer Test (KAT) Exchange . . . . . . . . . . . .  10
   11. Message Formats . . . . . . . . . . . . . . . . . . . . . . .  10
     11.1.  Establish Connection HTTPS GET/200 OK  . . . . . . . . .  11
     11.2.  Product Registration with Capabilities . . . . . . . . .  11
     11.3.  Vector Set Download Request  . . . . . . . . . . . . . .  14
     11.4.  Submit Test Results  . . . . . . . . . . . . . . . . . .  16
     11.5.  Validation Results Request . . . . . . . . . . . . . . .  17
     11.6.  Optional Flows . . . . . . . . . . . . . . . . . . . . .  18
   12. Vector Set Expiration . . . . . . . . . . . . . . . . . . . .  18
     12.1.  Resending Test Responses . . . . . . . . . . . . . . . .  20
   13. Error Codes . . . . . . . . . . . . . . . . . . . . . . . . .  20
   14. Other Considerations  . . . . . . . . . . . . . . . . . . . .  21
   15. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  21
   16. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  21
   17. Normative References  . . . . . . . . . . . . . . . . . . . .  21
   Appendix A.  JSON Formatting Guidelines . . . . . . . . . . . . .  21
   Appendix B.  JSON Encoded Error Messages  . . . . . . . . . . . .  22
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  22

1.  Introduction

   ACVP enables communication between a cryptographic module that is
   embedded inside of a device or otherwise running on a platform
   accessible via computer network, and an external testing system,
   using standard network communication interfaces and protocols.  This
   communication protocol can also be used to validate the correctness
   of the implementations of the algorithms in the cryptographic module



Fussell                  Expires August 20, 2017                [Page 2]

Internet-Draft              Abbreviated Title              February 2017


   with a validation authority.  This document describes how ACVP is
   structured with respect to the client-server model, the messaging
   protocol, optional features and flows.

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

2.  Overview

   ACVP has the following goals:

   o  To work in situations where the testing system is remote from the
      cryptographic module, e.g. running as a process on a separate
      device.

   o  To enable automated testing that can take place with a minimum of
      human interaction.

   o  To enable the testing system to discover the capabilities of the
      module being tested; that is, the particular algorithms and
      parameters that the module supports.

   o  To provide extensibility that can be used to introduce tests for
      new algorithms, and new tests for existing algorithms.

   o  To be compatible with emerging automated validation systems
      wherever possible, especially the FIPS-140 Cryptographic Algorithm
      Validation Program.

   o  To provide a standard communication method so that vendors can
      utilize the same testing service for FIPS-140, 3rd party crypto
      verification and product FCS readiness testing.

   ACVP defines how to communicate a request (to execute a cryptographic
   operation) to a cryptographic module, and how to communicate the
   corresponding response (containing the output of that operation) back
   to a testing system.  It defines a transport (based on HTTP or
   HTTPS), an encoding and message format (which is negotiated), and a
   set of message exchanges.  Each vector test set corresponds to a
   single message exchange driven from the client associated with the
   module under test.  ACVP does not define the cryptographic
   algorithms, nor does it detail the precise conditions for a response
   to be acceptable.  Instead, it references existing specifications for
   those algorithms, and defines a mapping between the data on the wire
   and the algorithm testing specification.  ACVP does not define



Fussell                  Expires August 20, 2017                [Page 3]

Internet-Draft              Abbreviated Title              February 2017


   detailed conformance criteria, such as those in FIPS-140.  Instead,
   it aims to be independent of particular conformance criteria, so that
   it can be used in multiple domains with different (even potentially
   conflicting) conformance criteria.  ACVP does not define an interface
   that can be used to manage or control a cryptographic module.

2.1.  Audience

   This document is written to address multiple audiences:

   o  Crypto module developers who require validation testing

   o  Crypto validation organizations who will perform validation
      testing

   o  Crypto module customers that desire validation testing results or
      verifiable artifacts of testing

2.2.  Goals

   The goals for this document are to provide a messaging protocol that
   can be used with existing authentication and communication protocols
   to provide a way to test crypto modules.  The following functions are
   outside the scope of this document:

   o  The API to the cryptographic module

   o  How the KATs are generated

   o  How the results/artifacts are stored or managed

   o  Authentication used

   o  Scalability

   o  Management interface

   With that in mind there are several expectations when building a
   server used as a validation authority.  A validation authority shall
   use HTTPS, TLS 1.2 or greater and mutual authentication.  Therefore a
   client that expects to be used with a validation authority shall have
   the same requirements.  A server, proxy or client developed for the
   purposes of internal organizational testing only may chose not to
   include some of those features.







Fussell                  Expires August 20, 2017                [Page 4]

Internet-Draft              Abbreviated Title              February 2017


2.3.  Terminology

   TBD

3.  Architecture

                        Server/Client Architecture


                              +----------------------------------------+
                              |                    +-----------------+ |
   +----------+               | Entropy ---------->| DRBG----Encrypt | |
   | ACV      |               |                    |         Auth    | |
   | Server   |<=============>| +--------+         |                 | |
   +----------+               | | ACV    |<------->| PKI-----Key Est | |
                              | | Client |    ^    |         Sign    | |
                              | +--------+    |    |                 | |
                              |            Crypto  | Crypto Module   | |
                              |            Module  +-----------------+ |
                              |              API                       |
                              |                                        |
                              |        Device Under Test (DUT)         |
                              +----------------------------------------+



                                 Figure 1

3.1.  Server/Client Architecture

   A server client model is used where the roles are defined as:

   o  ACV Client - resides in, or accessible from, the device under test
      and communicates with the ACV server using Java Script Object
      Notation (JSON) as well as the crypto module using product
      specific methods.

   o  ACV Server - Sends JSON formatted messaging and KATs to the ACV
      client and processes KAT responses.

   o  ACV Proxy - Resides between the ACV server and ACV client to proxy
      the connection for the client.  This is particularly useful when
      the client does not support TLS, key management or have signature
      capabilities and they are required by the server.  An example
      architecture is provided in Figure 2.

   o  Device Under Test - contains the ACV client and the crypto module
      under test which can include various algorithms and functions that



Fussell                  Expires August 20, 2017                [Page 5]

Internet-Draft              Abbreviated Title              February 2017


      encrypt/decrypt, generate keys, signatures, perform varifications
      and DRBG functions.

   o  Crpyographic Module API - This is the interface to the crypto
      module from the ACV Client.  This interface is environment
      specific and will vary depending on the API available on the
      crypto module.

3.2.  Server/Proxy Architecture

                         Server/Proxy Architecture



                 +-----------------------------------------------------+
                 |                         +-------------------------+ |
 +----------+    |     +----------+        |                         | |
 | ACV      |    |     | ACV      |        |                         | |
 | Server   |<========>| Proxy    |<======>| +--------+   +--------+ | |
 +----------+    |     +----------+        | | ACV    |<->| Crypto | | |
                 |                         | | Client |   | Module | | |
                 |                         | +--------+   +--------+ | |
                 |                         |                         | |
                 |                         |      DUT                | |
                 |                         +-------------------------+ |
                 | Vendor/Customer Premise                             |
                 +-----------------------------------------------------+


                                 Figure 2

4.  ACV Protocol

   The ACV protocol will utilize existing mechanisms for transport
   coordinated with JSON formatted messaging.
















Fussell                  Expires August 20, 2017                [Page 6]

Internet-Draft              Abbreviated Title              February 2017


                             Protocol Layering

   +-----------------------------------------------+
   | JSON Formatted ACVP request/response messages |
   +-----------------------------------------------+
   | HTTP[S] message transfer and signaling        |
   +-----------------------------------------------+
   | TLS for transport security(recommended)       |
   +-----------------------------------------------+
   | TCP for transport                             |
   |_______________________________________________|


                                 Figure 3

4.1.  HTTP URI Hierarchy


             +---------------------------------------------+
                server              path prefix
             +----------------+---+---------------+-----------+
     https://my-acvpserver.com:123/validation/acvp/register
             +----------------+---+---------------+-----------+
                               port                operation


                                 Figure 4

4.2.  HTTP URI Operations

   Operations and their corresponding operation names




















Fussell                  Expires August 20, 2017                [Page 7]

Internet-Draft              Abbreviated Title              February 2017


   +--------------------------+-------------+-----------+--------------+
   | Operation                | Operation   | HTTP      | Details      |
   |                          | Path        | Method    |              |
   +--------------------------+-------------+-----------+--------------+
   | Registration and DUT     | /register   | POST      | Section 11.2 |
   | Capabilities             |             |           |              |
   |                          |             |           |              |
   | Vector Set download      | /vectors    | GET       | Section 11.3 |
   | request                  |             |           |              |
   |                          |             |           |              |
   | Submit Vector Test       | /vectors    | POST      | Section 11.4 |
   | Results                  |             |           |              |
   |                          |             |           |              |
   | Request Validation       | /results    | GET       | Section 11.5 |
   | Results                  |             |           |              |
   |                          |             |           |              |
   | Request server to cancel | /cancel     | POST      | Section 11.6 |
   | session                  |             |           |              |
   +--------------------------+-------------+-----------+--------------+

                                  Table 1

   The operation path is appended to the path prefix to form the URI
   used with HTTP GET or POST to perform the desired ACVP operation.  An
   example valid URI absolute path for the "/register" operation is
   "/validation/acvp/register".  To register a DUT the ACVP client would
   use the following HTTP request-line:

   POST /validation/acvp/register HTTP/1.1

   Likewise, to request a specific vector set from the server the ACVP
   client would use the following request-line:

   GET /validation/acvp/vectors?vsId=1 HTTP/1.1

5.  Security

   It is recommended that HTTPS and TLS 1.2 or greater be used in order
   to enforce a secure communication method.  Not all environments will
   have TLS so HTTP with some level of authentication may be the only
   option.

6.  Authentication

   It is recommended that an authentication scheme be used.  Depending
   on the target environment and usage objectives, that can be as weak
   as basic HTTP authentication or as strong as TLS mutual certificate
   authentication.  Definition of an authentication scheme will not be



Fussell                  Expires August 20, 2017                [Page 8]

Internet-Draft              Abbreviated Title              February 2017


   discussed here, but should be agreed upon between the client and
   server owning entities including the servers owned by the validation
   authorities.  For the purposes of the message flow examples, no
   authentication will be used.

7.  Traceability

   TBD

8.  Encoding

   The encoding used for the request/response messaging will be JSON.
   The data will be identified by: Content-type: application/json In
   order to allow environment specific extensions to a particular
   version of the ACV protocol, a top-level JSON keyword, extensions
   will be used to extend the OE description and/or the capabilities.
   Extensions may be ignored by the ACV server.  Vector and vector
   response data will be JSON encoded.

9.  Versioning

   The version of the ACVP protocol will be carried with each message
   and will contain a simple major.minor format.  Major version changes
   will not be backward compatible, however additions and enhancements
   that do not disrupt compatibility will be indicated with a minor
   version change.  A server may accept a down-level version from the
   client if it can process at a lower level.  If not, it will reject
   the session.  All subsequent messages will carry the negotiated
   version value.

10.  Messaging

10.1.  Product Registration/Capabilities Exchange

   The product registration message will include many of the normal
   cryptographic algorithm identification line items that are found when
   filling out a testing form.  This pre-test message will carry the
   Company name, primary contact (OE information) as well as a detailed
   list of the supported cryptographic algorithms to be tested during a
   session.  The server will return the vector test list to the client.
   It will consist of a list of vector set IDs (vsId) each of which
   represent a set of test vectors which can be used to request the test
   vectors at a later time.








Fussell                  Expires August 20, 2017                [Page 9]

Internet-Draft              Abbreviated Title              February 2017


10.2.  Known Answer Test (KAT) Exchange

   The KAT exchange consists of the ACV client requesting a particular
   set of vectors selected from the vector test list.  The server
   responds with the test vectors.  Once the client has run the vectors
   the response data will be returned to the server for processing.  The
   client will repeat this process until all of the tests in the session
   test list have been processed.  The client may request results from
   the server at any time, however if test sets have not been completed
   the overall status will be incomplete.

11.  Message Formats

   Servers may require a contextual path in the URI prior to the service
   section and clients/proxies must be able to support it.

   Unique variable definitions to identify the vector set, device and
   session include:

   o  Session - represented by a JSON Web Token(JWT).  Within the JWT,
      the JWT ID(JTI) will be a unique identifier that will be generated
      by the server and can be used as a session ID.

   o  Vector Set - represented by the VS-ID which represents a specific
      CAVS vector request file, e.g. gcmEncryptIntIV128.req.  Passed to
      the client as part of the capabilities exchange.

   JWT example:

{
"alg" : "none"
}
   {
      "iss" : "nist.org",
      "exp" : 1426420800,
      "company" : "MyCompany",
      "jti" : 0987654321,
      "pkey" : "cc74f56acdba635079383a03941d68db55c7b3c2fcd0f9716c9b62d56d3f8f546e9ec0244203b6ab4a82c08a46b1dbc243c6434861e31ab51065f41dbce00482498d4474d1ed3b09dc727af6b9c788fdb5da283c5a98cf8ac9e473f34644c6bbfc146e28f8158f725ce25bcb73e0a2c05378739d101df15a0c1297a1a2e3abc7912e24caba5465e78f694ad0d3cf48f2f01c4580d774d592684756efbdf0cc7648470dd78a3b38973b18946e71c8feaf2f28b93a2ff36b1cc31236e5845145899e8a0438aeb1073bc0d23d5c7898845d5227867a38234739595d55a44e41a39feff8eb447757fc6b246d92f02fe43b46e46c7403a5966f40ba4e01ca64e955c5"
   }
   {
   Empty octet string (since alg is none).
   }

                                 Figure 5

   The JWT can be secured if desired using the header encryption "alg"
   value defined to HS256(HMAC-SHA256) or one of the other secure
   values.  Key agreement would follow RFC7518.



Fussell                  Expires August 20, 2017               [Page 10]

Internet-Draft              Abbreviated Title              February 2017


   The first four claims are required, however "pkey" is an optional
   private claim used to pass the key used for encrypting the database
   at the server.  Enabling this option is discussed further in
   Section 11.2

11.1.  Establish Connection HTTPS GET/200 OK

   Establish the connection, send POST and receive 200 OK response with
   JWT from server.

POST /validation/acvp/register HTTP1.1
User Agent: acvp-client/0.2
Host: www.my-acvpserver.com
Capabilities information(see next section)

..authentication happens here..

HTTP 1.1 200 OK
Status: 200 OK
Content-Type: application/json
Content-Length: (length of JWT)
{
"accessToken" :
"eyJhbGciOiJIUzI1NiIsI.eyJpc3MiOiJodHRwczotcGxlL.mFrs3Zo8eaSNcxiNfvRh9dqKP4F1cB",
}

Once the session is established the client must include the JWT with
each message.


                                 Figure 6

   The authentication mechanism will be defined by the server.

11.2.  Product Registration with Capabilities

   POST the registration to the server consisting of the ACVP version,
   Operating Environment (OE), vector encoding, capabilities and any
   extensions.  In addition there are a few parameters that specify
   session specific information:

   o  certificateRequest - If an algorithm certificate is not desired
      for this registration populate the field "certificateRequest" with
      "no", otherwise "yes".

   o  debugRequest - If this vector session is for the purposes of
      testing the client or DUT prior to a certificate request and




Fussell                  Expires August 20, 2017               [Page 11]

Internet-Draft              Abbreviated Title              February 2017


      desires the answers to the vectors as well, indicate with "yes",
      otherwise omit the keyword or indicate with "no"

   o  production - If this is a production environment indicate so with
      "yes", otherwise omit this keyword or indicate with "no".  A
      production environment may not be able to support intermediate
      value tests and therefore those tests will be excluded.

   o  encryptAtRest - The client may request the server to encrypt all
      data at rest by registering "encryptAtRest" with "yes".  Omitting
      the "encryptAtRest" field or registering with "no" will indicate
      to the server that no encryption is require for the data at rest.

   Note that when a certificate request is made, production and
   debugRequest shall be omitted or set to "no".  Conversely if no
   certificate is requested, the operationalEnvironment section may be
   omitted.


   POST /validation/acvp/register HTTP1.1
   User Agent:
   Host: www.my-acvpserver.com
   Accept:
   {
   "operation" : "register",
   "acvVersion" : "0.2",
   "certificateRequest" : "yes",
   "debugRequest" : "no",
   "production" : "no",
   "encryptAtRest" : "yes",
   "oeInformation" : {
   "vendorName" : "Cisco",
   "vendorURL" : "www.cisco.com",
   "contact" : "John Doe",
   "contactEmail" : "johndoe@cisco.com",
   "moduleName" : "Cisco ACV Test Module 1.0",
   "moduleType" : "Software",
   "operationalEnvironment" : {
   "moduleVersion" : "1.0",
   "processor" : "Intel Woodcrest",
   "operatingSystem" : "Linux 3.1"
        {
        "implementationDescription" :
             "Sample crypto module for demonstrating ACV protocol."
        },
                               },
                      },
   "capabilityExchange" : {



Fussell                  Expires August 20, 2017               [Page 12]

Internet-Draft              Abbreviated Title              February 2017


   "algorithms" : [
            {
   "algorithm" : "AES-GCM",
   "prereqVals" : [{"algorithm" : "AES", "valValue" : "123456"},
                   {"algorithm" : "DRBG", "valValue" : "123456"}],
   "direction": [
       "encrypt",
       "decrypt"
   ],
   "ivGen" : "internal",
   "ivGenMode" : "8.2.1",
   "keyLen" : [
               128,
               256
                ],
   "tagLen" : [
               96
                  ],
   "ivLen" : [
               96
                  ],
   "ptLen" : [
               0,
               128,
               136
                  ],
   "aadLen" : [
               128,
               136
                  ]
             }
          ]
      }
   }

                                 Figure 7

   Successful response from server is 200 OK and a set of vector set
   identifiers.  The extensions section is optional and can be
   implementation specific for value add.  Follow on versions could
   include protocol information.










Fussell                  Expires August 20, 2017               [Page 13]

Internet-Draft              Abbreviated Title              February 2017


200 OK Response:
{
"version" : "0.2",
"capabilityResponse" : { "vectorSets" : [
                       {"vsId":1437},
                       {"vsId":1438}] } ,
"testSession" :       {"testId":458} ,
"accessToken" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiAibmlzdC5vcmciLCJleHAiOiAxNDYyOTg0OTUzLCJjb21wYW55IjogIkNpc2NvIiwianRpIjo0NTh9.zDhd3WrLcb1Xf5-VKOX6k-G70mACbi1tdir8qHAMPyQ"
}

                                 Figure 8

11.3.  Vector Set Download Request

   After registration, the server provides a list of vector sets to the
   client, each identified by a VS-ID.  The client shall download,
   process, and upload test results for each vector set, one at a time.
   Note that the client shall upload complete test results for each
   processed vector set, i.e. containing a result for every test case in
   the vector set.

   GET /validation/acvp/vectors?vsId=1437  HTTP1.1
   User Agent: acvp-client/0.2
   Host: www.my-acvpserver.com
   Authorization: Bearer JWT

                                 Figure 9

   The server will respond with the vector set associated with the vsId
   for the client to process.  The actual test group content contained
   in the response will vary depending on the specific sub-specification
   of the algorithm and testType being tested.



















Fussell                  Expires August 20, 2017               [Page 14]

Internet-Draft              Abbreviated Title              February 2017


   200 OK Response:
   Status: 200 OK
   Content-Type: application/json
   Content-Length: <length of results>
   {
     "acvVersion": "0.2",
     "vsId": 1437,
     "algorithm": "AES-GCM",
     "direction": "encrypt",
     "testGroups": [
       {
         "keyLen": 128,
         "ivLen": 96,
         "ptLen": 0,
         "aadLen": 128,
         "tagLen": 128,
         "testType" : "KAT"
         "tests": [
           {
             "tcId": 12340,
             "key": "30BA1DBCB530347A148FB286D9A59757",
             "pt": "",
             "aad": "6CA553A59DFBD8F7E0DA619470F8986C"
           },
           {
             "tcId": 12341,
             "key": "AB7BB9349285B3E7403E99FED8B5060E",
             "pt": "",
             "aad": "79504FF995F70FFD328D7070CCBD62F1"
           }.....

           <With debugRequest set iv, ct and tag would be included>


                                 Figure 10

   If the server did not have enough time to generate the vector set for
   a given test session, the server may reply:













Fussell                  Expires August 20, 2017               [Page 15]

Internet-Draft              Abbreviated Title              February 2017


   HTTP 1.1 200 OK
   Status: 200 OK
   Content-Type: application/json
   Content-Length: <length of results>
   {
   "vsId": 1437,
   "version" : 0.2,
   "retry" : 10
   }

                                 Figure 11

   Where the retry value represents the number of seconds for the client
   to wait before retrying the request.  The server may set the retry
   value based on the current server load and expected processing time
   to generate the vector set.

11.4.  Submit Test Results

   The client will send this request to submit the test results for an
   individual vector set.  Similar to the vector set download the format
   will vary depending on the specific sub-specification of the
   algorithm and testType being tested.

      POST /validation/acvp/vectors?vsId=1437 HTTP1.1
      User Agent: acvp-client/0.2
      Host: www.my-acvpserver.com
      Authorization: Bearer JWT
      Accept:
      {
      "acvVersion": "0.2",
      "vsId": 1437,
      "testResults": [
      {
      "tcId": 12340,
      "iv": "01020304C077A707E56C22AC",
      "ct": "",
      "tag": "53B15E85E377F8B5B6BFC2DE915FD622"
      },
      {
      "tcId": 12341,
      "iv": "01020304D666587803BCBAD7",
      "ct": "",
      "tag": "E7B1F2D77D82C6EB3C9CEFF16C376D9C"
      }, ...

                                 Figure 12




Fussell                  Expires August 20, 2017               [Page 16]

Internet-Draft              Abbreviated Title              February 2017


11.5.  Validation Results Request

   The client will send this request to learn the validation results for
   an individual vector set.

GET /validation/acvp/results?vsId=1437 HTTP1.1
User Agent:
Host: www.my-acvpserver.com
Accept: /


Response to GET is:

HTTP 1.1 200 OK
Status: 200 OK
Content-Type: application/json
Content-Length: <length of results>
{
"version" : "0.2",
"results" : {
    "vsId" : 1437,
    "disposition" : "incomplete",
    "tests" : [
            { "tcId" : 12340, "result" : "passed", "reason" : ""},
            { "tcId" : 12341, "result" : "incomplete", "reason" : ""},
            { "tcId" : 12342, "result" : "failed", "reason" : "Authentication tag mismatch"}
              ]
   }
}

                                 Figure 13

   The results request is an optional flow since some clients may not
   require success/fail information.  Another possibility is to provide
   an out of band management session on the server may provide access to
   algorithm test results.

   Disposition is defined overall for the entire vector set as:

   o  FAIL indicates at least one test case has failed.

   o  UNRECEIVED indicates the server has not received responses from
      the client for all the test cases.

   o  INCOMPLETE indicates not all tests have been processed by the
      server, however none have failed thus far.





Fussell                  Expires August 20, 2017               [Page 17]

Internet-Draft              Abbreviated Title              February 2017


   o  EXPIRED indicates not all the test case responses were received
      from the client prior to expiry.

   o  PASSED indicates all test cases have been processed by the server
      and have passed.

   Result is defined for individual test cases:

   o  FAIL indicates the test case has failed.

   o  UNRECEIVED indicates the server has not received a response from
      the client for the test case.

   o  INCOMPLETE indicates the server has not processed the test case.

   o  EXPIRED indicates the client did not send the test case response
      to the server prior to expiry.

   o  PASSED indicates the test case passed.

   o  REASON provides additional detail for the test result.

11.6.  Optional Flows

   The cancel URI can be used by the client to free a session.  The
   server is responsible for maintaining any database information for
   traceability or debugging purposes it desires.  This may be important
   for those cases where there are test failures.

   POST /validation/acvp/cancel HTTP1.1
   User Agent: acvp-client/0.2
   Host: www.my-acvpserver.com
   Authorization: Bearer JWT

                                 Figure 14

   The server response will always be 200 OK.

12.  Vector Set Expiration

   Vector sets can expire.  For example, in terms of a validation
   authority use, the vector sets are one-time use only.  Old vector
   sets can never be reused to obtain a new validation certificate for
   an algorithm implementation or to update an existing certificate.
   Expiration is a server specific definition which depends on database
   costs, need for artifacts, etc.  If the vector set has expired, the
   server will reply with an expired response when the client attempts
   to download the vector set:



Fussell                  Expires August 20, 2017               [Page 18]

Internet-Draft              Abbreviated Title              February 2017


   HTTP 1.1 200 OK
   Status: 200 OK
   Content-Type: application/json
   Content-Length: <length of results>
   {
   "version" : "0.2",
   "vsId" : <vs-id>,
   "status" : "expired"
   }

                                 Figure 15

   The ACVP protocol requires server implementations to generate KAT
   values and retain the data while the ACVP client processes and
   returns the results.  Some crypto modules implementing the client-
   side ACVP protocol may not return results immediately.  The ACVP
   protocol design implies the server must retain the KAT values to
   verify the client KAT responses at some time in the future.  However,
   some KAT vector sets are fairly large, which could place significant
   storage requirements on ACVP server implementations.  To alleviate
   long term storage requirements, ACVP allows for an expiration
   timestamp to be set when a KAT vector set is generated by the server.

   The vector set expiration timestamp must be included by the server in
   the vector set when the client downloads the vector set.  The server
   may change the expiration timestamp of a previously issued vector set
   to extend its lifetime subject to server policy.  The expiration
   timestamp must be in the 'expiry' JSON value, which is included in
   the JSON encoded vector set.  The expiry JSON value will be a string
   value of the UTC timestamp using form "YYYY-MM-DD HH:MM:SS".  The
   following figure shows a partial JSON encoded vector set that
   contains the expiry value.



















Fussell                  Expires August 20, 2017               [Page 19]

Internet-Draft              Abbreviated Title              February 2017


                   {
                     "acvVersion": "0.2",
                     "vsId": 1437,
                     "expiry": "2018-12-31 23:59:59",
                     "algorithm": "AES-GCM",
                     "direction": "encrypt",
                     "testGroups": [
                       {
                         "keyLen": 128,
                         "ivLen": 96,
                         "ptLen": 0,
                         "aadLen": 128,
                         "tagLen": 128,
                         "tests": [
                           {
                             "tcId": 12340,
                             "key": "1529BAC6229586F057FAA59353851686",
                             "pt": "",
                             "aad": "4B11160620475D8EE440C3795CF62D26"
                           },
                           .
                           .
                           .
                           <remainder of vector set omitted from figure>
                           .
                           .
                           .


                                 Figure 16

12.1.  Resending Test Responses

   When one or more test cases fails, the client will need to correct
   the issue in the crypto module and send the responses again.  The
   resending of responses for failed test cases will occur for an entire
   vector set.  Therefore, even if only a single test case in the vector
   set failed, the client will need to download, process, and upload
   responses to the server for the entire vector set (presumably after
   the problem has been corrected in the DUT).  The resending of vector
   set responses must occur prior to expiry.

13.  Error Codes

   Errors will follow HTTP[S] numbering scheme.  In addition errors as
   well as 200 messages may carry JSON encoded information that
   describes in detail the error and any associated troubleshooting




Fussell                  Expires August 20, 2017               [Page 20]

Internet-Draft              Abbreviated Title              February 2017


   information.  A non-exhaustive list of JSON encoded error messages
   are in Appendix B.

14.  Other Considerations

   When an ACVP client is attached to a cryptographic module that is in
   use, access to ACVP MUST be controlled so that only an administrator
   or other authorized user can send and receive ACVP messages.  This is
   because an attacker that has access to ACVP can potentially use it to
   probe for weaknesses in the cryptographic module.

15.  Acknowledgements

   Original ACVP created by David McGrew, Bill Hudson and Anthony Grieco
   of Cisco Systems.

16.  IANA Considerations

   This memo includes no request to IANA.

17.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

Appendix A.  JSON Formatting Guidelines

   All JSON keywords shall use lower camelCase format with no
   underscores or hyphens and use the following characters only a-z,
   A-Z, 0-9.  Keywords shall abbreviate common words and phrases
   wherever possible for brevity.

   For example: password length - pwLen plain text length - ptLen

   Keywords should be chosen such that they are informative and brief,
   for example:

   { "acvVersion" : "0.2", "results" : { "disposition" : "incomplete", }

   Metadata assigned to the keyword may use any format which best
   reflects the information being represented including hyphens,
   underscores alternating case, numbers, etc.  However, brevity should
   be a major consideration, for example:

   "algorithms" : [ { "algorithm" : "AES-GCM", "mode" : "modes", "ivGen"
   : "internal", "ivGenMode" : "8.2.1", } All metadata representing



Fussell                  Expires August 20, 2017               [Page 21]

Internet-Draft              Abbreviated Title              February 2017


   strings or big numbers shall use double quotes at both ends.  Big
   numbers require conversion from strings to whatever format is used by
   the DUT.  Numerical values of integer size or with decimal points may
   use quotations if those values are generally used as a string, for
   example the acvVersion would generally be used in displaying
   information not in any mathematical operations.  Something like
   keyLen or ptLen values would be better used without quotes to avoid
   having to convert the string to an integer for use in the code.

Appendix B.  JSON Encoded Error Messages

   TBD

Author's Address

   Barry Fussell (editor)
   Cisco Systems
   170 West Tasman Dr.
   San Jose, CA  95134
   USA

   Email: bfussell@cisco.com





























Fussell                  Expires August 20, 2017               [Page 22]
