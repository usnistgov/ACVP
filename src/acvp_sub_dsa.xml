<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subdsa-0.4" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
  <!-- ***** FRONT MATTER ***** -->
  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
    <title abbrev="Sym Alg JSON">ACVP DSA Algorithm JSON Specification</title>
    <!-- add 'role="editor"' below for the editors if appropriate -->
    <!-- Another author who claims to be an editor -->
    <author fullname="Barry Fussell" initials="B.F." role="editor" surname="Fussell">
      <organization>Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>170 West Tasman Dr.</street>
          <!-- Reorder these if your country does things differently -->
          <city>San Jose</city>
          <region>CA</region>
          <code>95134</code>
          <country>USA</country>
        </postal>
        <email>bfussell@cisco.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date month="June" year="2016" />
    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
         in the current day and month for you. If the year is not the current one, it is
         necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
         purpose of calculating the expiry date).  With drafts it is normally sufficient to
         specify just the year. -->
    <!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>TBD</workgroup>
    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
         If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->
    <keyword>acvp</keyword>
    <keyword>crypto</keyword>
    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->
    <abstract>
      <t>This document defines the JSON schema for using DSA algorithms with the ACVP specification.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing DSA algorithms using ACVP.</t>
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted in                                                                       
          <xref target="RFC2119">RFC 2119</xref>.                                                        
        </t>
      </section>
    </section>
    <section anchor="caps_reg" title="Capabilities Registration">
      <t>ACVP requires crypto modules to register their capabilities. This allows the crypto module to advertise support for specific algorithms, notifying the ACVP server which algorithms need test vectors generated for the validation process. This section describes the constructs for advertising support of DSA algorithms to the ACVP server.</t>
      <t>The algorithm capabilities are advertised as JSON objects within the 'algorithms' value of the ACVP registration message. The 'algorithms' value is an array, where each array element is an individual JSON object defined in this section. The 'algorithms' value is part of the 'capability_exchange' element of the ACVP JSON registration message. See the ACVP specification for details on the registration message.</t>
      <section anchor="prereq_algs" title="Required Prerequisite Algorithms for DSA Validations">
        <t>Each DSA implementation relies on other cryptographic primitives. For example, DSA uses an underlying SHA algorithm. Each of these underlying algorithm primitives must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</t>
        <texttable anchor="rereqs_table" title="Required DSA Prerequisite Algorithms JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>algorithm</c>
          <c>a prerequisite algorithm</c>
          <c>value</c>
          <c>DRBG, SHA, SHA_OPT2</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>valValue</c>
          <c>algorithm validation number</c>
          <c>value</c>
          <c>actual number or "same"</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>prereqAlgVal</c>
          <c>prerequistie algorithm validation</c>
          <c>object with algorithm and valValue properties</c>
          <c>see above</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>prereqVals</c>
          <c>prerequistie algorithm validations</c>
          <c>array of prereqAlgVal objects</c>
          <c>see above</c>
          <c>No</c>
        </texttable>
      </section>
      <section anchor="dsa_caps_reg" title="DSA Algorithm Capabilities Registration">
        <t>Each algorithm capability advertised is a self-contained JSON object using the following values.</t>
        <texttable anchor="caps_table" title="DSA Algorithm Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>algorithm</c>
          <c>The algorithm under test</c>
          <c>value</c>
          <c>"DSA"</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>mode</c>
          <c>The DSA mode to be validated</c>
          <c>value</c>
          <c>"pqgGen", "pqgVer", "keyGen", "sigGen", "sigVer"</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>prereqVals</c>
          <c>prerequistie algorithm validations</c>
          <c>array of prereqAlgVal objects</c>
          <c>See                                                                                     
            <xref target="prereq_algs" />
          </c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>algSpecs</c>
          <c>array of JSON objects, each with fields pertaining to the global DSA mode indicated above and identified uniquely by the combination of the DSA "mode" and indicated properties</c>
          <c>Array of JSON objects</c>
          <c>See                                                                                     
            <xref target="supported_modes" />
          </c>
          <c>No</c>
        </texttable>
      </section>
      <section anchor="supported_modes" title="Supported DSA Modes Capabilities">
        <t>The DSA mode capabilities are advertised as JSON objects within the 'algSpecs'	value of the ACVP registration message - see                                                   
          <xref target="caps_table"/>. The 'algSpecs' value is an array, where each	array element is a JSON object corresponding to a particular DSA mode defined in this section. The 'algSpecs'	value is part of the 'capability_exchange' element of the ACVP JSON registration message.	See the ACVP specification for details on the registration message.                                        
        </t>
        <t>Each DSA mode's capabilities are advertised as JSON objects.</t>
        <section anchor="mode_pqgGen" title="The pqgGen Mode Capabilities">
          <t>The DSA pqgGen mode capabilities are advertised as JSON objects, which are elements of the 'algSpecs' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
          <t>Each DSA pqgGen mode capability set is advertised as a self-contained JSON object.</t>
          <section anchor="mode_pqgGenFullSet" title="pqgGen Full Set of Capabilities">
            <t>The complete list of DSA pqg generation capabilities may be advertised by the ACVP compliant crypto module:</t>
            <texttable anchor="pqgGen_table" title="DSA pqgGen Capabilities JSON Values">
              <ttcol align="left">JSON Value</ttcol>
              <ttcol align="left">Description</ttcol>
              <ttcol align="left">JSON type</ttcol>
              <ttcol align="left">Valid Values</ttcol>
              <ttcol align="left">Optional</ttcol>
              <c>l</c>
              <c>The length in bits of the field and the length in bits of prime p.</c>
              <c>value</c>
              <c>2048, or 3072</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>n</c>
              <c>The length in bits of q which is a prime factor of (p-1).</c>
              <c>value</c>
              <c>224, or 256 when L is 2048. Otherwise 256.</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>pqGen</c>
              <c>The methods supported to generate p and q.</c>
              <c>array</c>
              <c>Any non-empty subset of {"probable", "provable"}.</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>gGen</c>
              <c>The methods supported to generate g.</c>
              <c>array</c>
              <c>Any non-empty subset of {"unverifiable", "canonical"}.</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>hashAlg</c>
              <c>The hash functions supported when generating p, q and g.</c>
              <c>array</c>
              <c>Any non-empty subset of {"sha2-224", "sha2-256", "sha2-384", "sha2-512", "sha2-512/224", "sha2-512/256"}. Note that the digest size of the hash function MUST be equal to or greater than N.</c>
              <c>No</c>
            </texttable>
          </section>
        </section>
        <section anchor="mode_pqgVer" title="The pqgVer Mode Capabilities">
          <t>The DSA pqgVer mode capabilities are advertised as JSON objects, which are elements of the 'algSpecs' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
          <t>Each DSA pqgVer mode capability set is advertised as a self-contained JSON object.</t>
          <section anchor="mode_pqgVerFullSet" title="pqgVer Full Set of Capabilities">
            <t>The complete list of DSA pqg verification capabilities may be advertised by the ACVP compliant crypto module:</t>
            <texttable anchor="pqgVer_table" title="DSA pqgVer Capabilities JSON Values">
              <ttcol align="left">JSON Value</ttcol>
              <ttcol align="left">Description</ttcol>
              <ttcol align="left">JSON type</ttcol>
              <ttcol align="left">Valid Values</ttcol>
              <ttcol align="left">Optional</ttcol>
              <c>l</c>
              <c>The length in bits of the field and the length in bits of prime p.</c>
              <c>value</c>
              <c>1024, 2048, or 3072</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>n</c>
              <c>The length in bits of q which is a prime factor of (p-1).</c>
              <c>value</c>
              <c>160 when L is 1024. 224, or 256 when L is 2048. Otherwise 256.</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>pqGen</c>
              <c>The methods supported to generate p and q.</c>
              <c>array</c>
              <c>Any non-empty subset of {"probable", "provable"}.</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>gGen</c>
              <c>The methods supported to generate g.</c>
              <c>array</c>
              <c>Any non-empty subset of {"unverifiable", "canonical"}.</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>hashAlg</c>
              <c>The hash functions supported when generating p, q and g.</c>
              <c>array</c>
              <c>Any non-empty subset of {"sha-1", "sha2-224", "sha2-256", "sha2-384", "sha2-512", "sha2-512/224", "sha2-512/256"}. Note that the digest size of the hash function MUST be equal to or greater than N.</c>
              <c>No</c>
            </texttable>
          </section>
        </section>
        <section anchor="mode_keyGen" title="The keyGen Mode Capabilities">
          <t>The DSA keyGen mode capabilities are advertised as JSON objects, which are elements of the 'algSpecs' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
          <t>Each DSA keyGen mode capability set is advertised as a self-contained JSON object.</t>
          <section anchor="mode_keyGenFullSet" title="keyGen Full Set of Capabilities">
            <t>The complete list of DSA key generation capabilities may be advertised by the ACVP compliant crypto module:</t>
            <texttable anchor="keyGen_table" title="DSA keyGen Capabilities JSON Values">
              <ttcol align="left">JSON Value</ttcol>
              <ttcol align="left">Description</ttcol>
              <ttcol align="left">JSON type</ttcol>
              <ttcol align="left">Valid Values</ttcol>
              <ttcol align="left">Optional</ttcol>
              <c>l</c>
              <c>The length in bits of the field and the length in bits of prime p.</c>
              <c>value</c>
              <c>2048, or 3072</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>n</c>
              <c>The length in bits of q which is a prime factor of (p-1).</c>
              <c>value</c>
              <c>224, or 256 when L is 2048. Otherwise 256.</c>
              <c>No</c>
            </texttable>
          </section>
        </section>
        <section anchor="mode_sigGen" title="The sigGen Mode Capabilities">
          <t>The DSA sigGen mode capabilities are advertised as JSON objects, which are elements of the 'algSpecs' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
          <t>Each DSA sigGen mode capability set is advertised as a self-contained JSON object.</t>
          <section anchor="mode_sigGenFullSet" title="sigGen Full Set of Capabilities">
            <t>The complete list of DSA signature generation capabilities may be advertised by the ACVP compliant crypto module:</t>
            <texttable anchor="sigGen_table" title="DSA sigGen Capabilities JSON Values">
              <ttcol align="left">JSON Value</ttcol>
              <ttcol align="left">Description</ttcol>
              <ttcol align="left">JSON type</ttcol>
              <ttcol align="left">Valid Values</ttcol>
              <ttcol align="left">Optional</ttcol>
              <c>l</c>
              <c>The length in bits of the field and the length in bits of prime p.</c>
              <c>value</c>
              <c>2048, or 3072</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>n</c>
              <c>The length in bits of q which is a prime factor of (p-1).</c>
              <c>value</c>
              <c>224, or 256 when L is 2048. Otherwise 256.</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>hashAlg</c>
              <c>The hash functions supported when signing a message.</c>
              <c>array</c>
              <c>Any non-empty subset of {"sha2-224", "sha2-256", "sha2-384", "sha2-512", "sha2-512/224", "sha2-512/256"}.</c>
              <c>No</c>
            </texttable>
          </section>
        </section>
        <section anchor="mode_sigVer" title="The sigVer Mode Capabilities">
          <t>The DSA sigVer mode capabilities are advertised as JSON objects, which are elements of the 'algSpecs' array in the ACVP registration message. See the ACVP specification for details on the registration message.</t>
          <t>Each DSA sigVer mode capability set is advertised as a self-contained JSON object.</t>
          <section anchor="mode_sigVerFullSet" title="sigVer Full Set of Capabilities">
            <t>The complete list of DSA signature verification capabilities may be advertised by the ACVP compliant crypto module:</t>
            <texttable anchor="sigVer_table" title="DSA sigVer Capabilities JSON Values">
              <ttcol align="left">JSON Value</ttcol>
              <ttcol align="left">Description</ttcol>
              <ttcol align="left">JSON type</ttcol>
              <ttcol align="left">Valid Values</ttcol>
              <ttcol align="left">Optional</ttcol>
              <c>l</c>
              <c>The length in bits of the field and the length in bits of prime p.</c>
              <c>value</c>
              <c>1024, 2048, or 3072</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>n</c>
              <c>The length in bits of q which is a prime factor of (p-1).</c>
              <c>value</c>
              <c>160 when L is 1024. 224, or 256 when L is 2048. Otherwise 256.</c>
              <c>No</c>
              <c/>
              <c/>
              <c/>
              <c/>
              <c/>
              <c>hashAlg</c>
              <c>The hash functions supported when verifying a message.</c>
              <c>array</c>
              <c>Any non-empty subset of {"sha-1", "sha2-224", "sha2-256", "sha2-384", "sha2-512", "sha2-512/224", "sha2-512/256"}.</c>
              <c>No</c>
            </texttable>
          </section>
        </section>
      </section>
      <section anchor="test_vectors" title="Test Vectors">
        <t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to the ACVP server for validation. A typical ACVP validation session would require multiple test vector sets to be downloaded and processed by the ACVP client. Each test vector set represents an individual DSA function. This section describes the JSON schema for a test vector set used with DSA algorithms.</t>
        <t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire vector set as well as individual test vectors to be processed by the ACVP client.The following table describes the JSON elements at the top level of the hierarchy. </t>
        <texttable anchor="vs_top_table" title="Vector Set JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <c>acvVersion</c>
          <c>Protocol version identifier</c>
          <c>value</c>
          <c/>
          <c/>
          <c/>
          <c>vsId</c>
          <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
          <c/>
          <c/>
          <c/>
          <c>algorithm</c>
          <c>DSA</c>
          <c>value</c>
          <c/>
          <c/>
          <c/>
          <c>mode</c>
          <c>The DSA mode used for the test vectors.</c>
          <c>value</c>
          <c/>
          <c/>
          <c/>
          <c>testGroups</c>
          <c>Array of test group JSON objects, which are defined in                                                                               
            <xref target="tgjs" />
          </c>
          <c>array</c>
        </texttable>
        <section title="Test Groups JSON Schema" anchor="tgjs">
          <t>The testGroups element at the top level in the test vector JSON object is an array of test  groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</t>
          <t> The test group for DSA is as follows:</t>
          <texttable anchor="vs_tg_table5" title="Vector Group JSON Object">
            <ttcol align="left">JSON Value</ttcol>
            <ttcol align="left">Description</ttcol>
            <ttcol align="left">JSON type</ttcol>
            <ttcol align="left">Optional</ttcol>
            <c>l</c>
            <c>Length in bits of prime modulus p</c>
            <c>value</c>
            <c>No</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>n</c>
            <c>Length in bits of prime divisor q</c>
            <c>value</c>
            <c>No</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>p</c>
            <c>Domain parameter P</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>q</c>
            <c>Domain parameter Q</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>g</c>
            <c>Domain parameter G</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>hashAlg</c>
            <c>The hash algorithm used in the test group</c>
            <c>value</c>
            <c>No</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>pqMode</c>
            <c>The specific pq generation mode used in the test group</c>
            <c>value</c>
            <c>No</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>gMode</c>
            <c>The specific g generation mode used in the test group</c>
            <c>value</c>
            <c>No</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>tests</c>
            <c>Array of individual test vector JSON objects, which are defined in                                                                                             
              <xref target="tvjs" />
            </c>
            <c>array</c>
            <c>No</c>
          </texttable>
        </section>
        <section title="Test Case JSON Schema" anchor="tvjs">
          <t>Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA test vector.</t>
          <texttable anchor="vs_tc_table5" title="Test Case JSON Object">
            <ttcol align="left">JSON Value</ttcol>
            <ttcol align="left">Description</ttcol>
            <ttcol align="left">JSON type</ttcol>
            <ttcol align="left">Optional</ttcol>
            <c>tcId</c>
            <c>Numeric identifier for the test case, unique across the entire vector set.</c>
            <c>value</c>
            <c>No</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>p</c>
            <c>The prime modulus</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>q</c>
            <c>The prime divisor of p - 1</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>domainSeed</c>
            <c>The seed used to generate p and q in the probable method</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>counter</c>
            <c>The counter used to generate p and q in the probable method</c>
            <c>value - integer</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>pSeed</c>
            <c>The seed used to generate p in the provable method</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>qSeed</c>
            <c>The seed used to generate q in the provable method</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>pCounter</c>
            <c>The counter used to generate p in the provable method</c>
            <c>value - integer</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>qCounter</c>
            <c>The counter used to generate q in the provable method</c>
            <c>value - integer</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>g</c>
            <c>The generator</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>h</c>
            <c>The index value provided to the g generator in the unverifiable method</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>index</c>
            <c>The index value provided to the g generator in the canonical method</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>r</c>
            <c>The signature component R</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>s</c>
            <c>The signature component S</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>y</c>
            <c>The public key component Y</c>
            <c>value</c>
            <c>Yes</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>message</c>
            <c>The message used to generate signature or verify signature</c>
            <c>value</c>
            <c>Yes</c>
          </texttable>
        </section>
      </section>
      <section anchor="vector_responses" title="Test Vector Responses">
        <t>After the ACVP client downloads and processes a vector set, it must send the response vectors back to the ACVP server. The following table describes the JSON object that represents a vector set response.</t>
        <texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <c>acvVersion</c>
          <c>Protocol version identifier</c>
          <c>value</c>
          <c/>
          <c/>
          <c/>
          <c>vsId</c>
          <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
          <c/>
          <c/>
          <c/>
          <c>testResults</c>
          <c>Array of JSON objects that represent each test vector result, as defined by the tables below</c>
          <c>array</c>
        </texttable>
        <t>The following table describes the JSON object that represents a vector set response for DSA.</t>
        <texttable anchor="vr_top_table5" title="Vector Set Response JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>p</c>
          <c>The prime modulus</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>q</c>
          <c>The prime divisor of p - 1</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>g</c>
          <c>The generator</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>x</c>
          <c>The private key component X</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>y</c>
          <c>The public key component Y</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>r</c>
          <c>The signature component R</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>s</c>
          <c>The signature component S</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>domainSeed</c>
          <c>The seed used to generate p and q in the probable method</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>counter</c>
          <c>The counter used to generate p and q in the probable method</c>
          <c>value - integer</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>pSeed</c>
          <c>The seed used to generate p in the provable method</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>qSeed</c>
          <c>The seed used to generate q in the provable method</c>
          <c>value</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>pCounter</c>
          <c>The counter used to generate p in the provable method</c>
          <c>value - integer</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>qCounter</c>
          <c>The counter used to generate q in the provable method</c>
          <c>value - integer</c>
          <c>Yes</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>result</c>
          <c>The pass or fail result of the verify</c>
          <c>"passed"/"failed"</c>
          <c>Yes</c>
        </texttable>
      </section>
      <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
      <section anchor="Acknowledgements" title="Acknowledgements">
        <t>TBD...</t>
      </section>
      <!-- Possibly a 'Contributors' section ... -->
      <section anchor="IANA" title="IANA Considerations">
        <t>This memo includes no request to IANA.</t>
      </section>
      <section anchor="Security" title="Security Considerations">
        <t>Security considerations are addressed by the ACVP specification.</t>
      </section>
    </section>
  </middle>
  <!--  *****BACK MATTER ***** -->
  <back>
    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->      &RFC2119;                                                        
      <reference anchor="ACVP">
        <!-- the following is the minimum to make xml2rfc happy -->
        <front>
          <title>ACVP Specification</title>
          <author initials="authInitials" surname="authSurName">
            <organization>NIST</organization>
          </author>
          <date year="2016" />
        </front>
      </reference>
    </references>
    <section anchor="app-reg-ex" title="Example DSA JSON Object">
      <t>The following sections contain example JSON for the various DSA modes: keyPair, sigGen, sigVer, pqgGen and pqgVer. Note that all binary HEX representations are in big-endian format.</t>
      <section anchor="app-reg-ex0" title="Example DSA PQGGen Capabilities JSON Object">
        <t>The following is a example JSON object advertising support for DSA pqgGen.</t>
        <figure>
          <artwork>
            <![CDATA[
{
    "algorithm": "DSA",
    "mode": "pqgGen",
    "prereqVals": [
      {
          "algorithm": "SHA",
          "valValue": "123456"
      },
      {
          "algorithm": "DRBG",
          "valValue": "123456"
      }
    ],
    "algSpecs": [
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 2048,
      "n": 224,
      "hashAlg": [
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 2048,
      "n": 256,
      "hashAlg": [
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 3072,
      "n": 256,
      "hashAlg": [
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/256"
      ]
    }
  ]
}
            ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-reg-ex1" title="Example DSA PQGVer Capabilities JSON Object">
        <t>The following is a example JSON object advertising support for DSA pqgVer.</t>
        <figure>
          <artwork>
            <![CDATA[
{
    "algorithm": "DSA",
    "mode": "pqgVer",
    "prereqVals": [
      {
          "algorithm": "SHA",
          "valValue": "123456"
      },
      {
          "algorithm": "DRBG",
          "valValue": "123456"
      }
    ],
    "algSpecs": [
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 1024,
      "n": 160,
      "hashAlg": [
        "sha-1",
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 2048,
      "n": 224,
      "hashAlg": [
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 2048,
      "n": 256,
      "hashAlg": [
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 3072,
      "n": 256,
      "hashAlg": [
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/256"
      ]
    }
  ]
}
            ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-reg-ex2" title="Example DSA KeyGen Capabilities JSON Object">
        <t>The following is a example JSON object advertising support for DSA keyGen.</t>
        <figure>
          <artwork>
            <![CDATA[
{
    "algorithm": "DSA",
    "mode": "keyGen",
    "prereqVals": [
      {
          "algorithm": "SHA",
          "valValue": "123456"
      },
      {
          "algorithm": "DRBG",
          "valValue": "123456"
      }
    ],
    "algSpecs": [
    {
      "n": 224,
      "l": 2048
    },
    {
      "n": 256,
      "l": 2048
    },
    {
      "n": 256,
      "l": 3072
    }
  ]
}
            ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-reg-ex3" title="Example DSA SigGen Capabilities JSON Object">
        <t>The following is a example JSON object advertising support for DSA sigGen.</t>
        <figure>
          <artwork>
            <![CDATA[
{
    "algorithm": "DSA",
    "mode": "sigGen",
    "prereqVals": [
    {
      "n": 224,
      "l": 2048,
      "hashAlg": [
        "sha-1",
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    },
    {
      "n": 256,
      "l": 2048,
      "hashAlg": [
        "sha-1",
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    },
    {
      "n": 256,
      "l": 3072,
      "hashAlg": [
        "sha-1",
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    }
  ]
}
            ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-reg-ex4" title="Example DSA SigVer Capabilities JSON Object">
        <t>The following is a example JSON object advertising support for DSA sigVer.</t>
        <figure>
          <artwork>
            <![CDATA[
{
    "algorithm": "DSA",
    "mode": "sigVer",
    "prereqVals": [
    {
      "n": 160,
      "l": 1024,
      "hashAlg": [
        "sha-1",
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    },
    {
      "n": 224,
      "l": 2048,
      "hashAlg": [
        "sha-1",
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    },
    {
      "n": 256,
      "l": 2048,
      "hashAlg": [
        "sha-1",
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    },
    {
      "n": 256,
      "l": 3072,
      "hashAlg": [
        "sha-1",
        "sha2-224",
        "sha2-256",
        "sha2-384",
        "sha2-512",
        "sha2-512/224",
        "sha2-512/256"
      ]
    }
  ]
}
            ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-vs-ex5" title="Example Test DSA PQGGen JSON Object">
        <t>The following is a example JSON object for DSA pqgGen, test vectors sent from the ACVP server to the crypto module and the response.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "mode": "pqgGen",
        "testGroups": [
            {
                "l": 2048,
                "n": 224,
                "hashAlg": "sha2-224",
                "pqMode": "probable",
                "testType": "GDT",
                "tests": [
                    {
                        "tcId": 1,
                    }
                ]
            },
            {
                "l": 2048,
                "n": 224,
                "hashAlg": "sha2-224",
                "pqMode": "provable",
                "testType": "GDT",
                "tests": [
                    {
                        "tcId": 2,
                    }
                ]
            },
            {
                "l": 2048,
                "n": 224,
                "hashAlg": "sha2-224",
                "testType": "GDT",
                "gMode": "unverifiable",
                "tests": [
                    {
                      "tcId": 3,
                      "p": "B9D5DEC1F8541708FF43F29134D913AFF5F47A56A18932039C07008E5DF83FD520349226C8F47ED213A43372188E3A22246766C753FA66A4666499802C67F0E827057D0B8DF5089602D5BD45652F500F1755D02294963A7E7F219BA261FA8804A2B4F4E5DAC97577892A5A6CD16A106DE30C386993986BE54EE3F147F7774B99662358CD6A7B49A1B5ACE7EA1121BEF0DC485FE50379A6A5B130F6D92C495CBCB789D79B7C28A955EE86222001B4C8C55DCE924E4F3FBAC8D9886BEC8B3846B37BDC0B6468EBB302EF74A505FB41753E02FE8F2AF3E930303D6B5F805EC090AF963766746DC5546F32D3F57A80AF4730544353939A3C5E2A09BF87D52DF30CBF",
                      "q": "9F3FCC1DA20ACCD5C3E1C97B04E0FE38B4E8E9ACC6AA076CD0A1BD81"
                    },
                ]
            },
            {
                "l": 2048,
                "n": 224,
                "hashAlg": "sha2-224",
                "testType": "GDT",
                "gMode": "canonical",
                "tests": [
                    {
                      "tcId": 4,
                      "p": "CACDDA5F26C38B7EF49E8AC524AB8798FAF1328D7B64DCFC8DCEC1A129C7153D81D086FF9EE82A78ACBE4672EB4415C96FD7889BD22CFB9CDD6637D246607655E60EB927F56C115D56D4B4EB124FA0CB2EF9CED3FAF539EF6F78564267AB7E0D1506D3554D191C21ADA02177D2F87ABC5ECD00A570ECEE2E3E9AF2A044D76C6DE7CDC319FB36DE181521F92DB5DC6C89D71B6D9B192C1AA56060144BAE4202C904758560409EE87788793AFFFC1AB2B608841772CE13A782EC8CDE91838CB77F32CC8F31FF345AEB54BC6FC1DB29DDBA83E5BD5E879CC025ADBC198D7568D88F4E815AC2246D8BEF381AA1579F04EE653C125742F18E4090B983B8025AD531E5",
                      "q": "A4D538BAE42A3531663DD60DD8ACA2F0415C483DE36EF62EB4B2CEA3",
                      "domainSeed": "E8A171F4CDF1674093EA6771EE3DC6737018834C9A346097B49119F8",
                      "index": "AD"
                    },
                ]
            }
        ]
    }
]
            ]]>
          </artwork>
        </figure>
        <t>The following is a example JSON object for DSA PQGGen test results sent from the crypto module to the ACVP server.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "testResults": [
            {
              "tcId": 1,
              "p": "AF57210AEC6154DF56A7A7AA8ADAC766938482FFE59F846A6F0909A273A55594459A47C110D5A552E8E6F66FC029736E10A7E2BD8982142368ECC21A5CAAD0AF622447ED9CD8BC058F19F94F45249BDDF294D82AF392796F513E88DACD8B596E204A6CA41046F0B66370A1E35718A0894E90D5294E7197DA1371DF905B5E374272A980D9563DC27E619718397E21A860277D9D789972B21636C836F716BD353928CD191D9E9640E413A0F06D297B49AD036D9BF8CFBBDCCD1DCC6CEA8B0A834147779BB043E85DC782DAAE8FC712A6D01F1F2251D980C467EAE5553856FB1942DF39B0898729B6F9439FE10DD266DE6FE956A4E24311497168DF7B62D366CC87",
              "q": "C2B5571D7A042507ED4B66FA9A0D162FC9DAAB1511AD1DB4951BCAA9",
              "counter": 86
            },
            {
              "tcId": 2,
              "p": "9C0571B778FE82E447007618AE687CC9F3CAA5F3233F6559EAA8FA9C90F47991B0CCF3331764D5C10E93D476CB603638FFF96BAA155385D03823F57C8FA1848B2B7D9508FC402AC9412A05A915470DA770E2B6F9E75AC6BFD61651E523340964840C8DA4630E4429AEBA529ECC4F7DB20E2A301E18E5CE87120A39E563322C64317540680AB581A3FA9CD7845CCC528E3793CE4D7D34BF8020FD8AA191AF3CB0BC21CA4DE448067F0FE0405FA859C6779EF37832F948BDFC1716BF1D3CA6CC1070D7D3217CF1FA51D179B1DE4F3E190E7AA9AD359295310ADFB250EBC900797243CC14B275BD48FD0A7161D4585D893D3E6CCFE856B03B4596EE87A721697ECF",
              "q": "CCF209C4E61FFC0B9363AFFF2FE7094B672B39D93CCCDB26C20872A7",
              "pSeed": "FC10A9DE4B63CAB3FE4BEC69D4BE8A2B3AA4318F16DED95FD86C4D93",
              "qSeed": "FC10A9DE4B63CAB3FE4BEC69D4BE8A2B3AA4318F16DED95FD86C2225",
              "pCounter": 1514,
              "qCounter": 46
            },
            {
              "tcId": 3,
              "g": "01098AD5E87869EF692ABECEB678C93C565AC9AED02016411176FF6E3003511A425C26A4E30A2AB9AE9D21CBDA505E3931605220913B10129B72019D5A0CFAC34241E69E3E9D9ECFD29B4057B5B8D32FBA664CD7F34C1F7012831DF7BB017F6E887DAB24BB556D79BCA5D4A4D29DA23442C44C17FBE2EFAC2E02E6BA0FD705D6C1110CC388C4A5AA1B0527EBDD55A4818DDAFDBF86ABD9E8FA490BBC1A2E842862895CD6D6C9AC5043A47B4DFC527E6804B2EC369ECD53712EA21EABDA63FE61A88B3519056DEC16C52D43ED9EC3B140836569BEC28AFEBC476B4049E2E244E22BD20BA2ED35527E60BC1E7F81CDC25B084FFDD0064BA100AD5267F87E1C3DAD"
            },
            {
              "tcId": 4,
              "g": "5C4AB5D4C901A37511DCC0A21D9E19356D31C521C1377C357DC38D5F997D1743CBF9A200D5D6F084EA75220DC7136189FC60E4461F9902E7BEDF2A0A58739E672BCD00D178684756E8E5B2D9425640CE728FD183A4BD24EFC0B2806B722CF33EC7B39E9E70AE128DBF03F8188B279926B3773C572D5A5CAC30B9FB278F66957B803F3DC8C67827184CC7ACA32088A4DDB7343F6207F8803833D403BD73D752AAB9F1F75E6242C0EF25F1F14C451EA3A2614248291EBD8D184C103F83A77BC7667C4096C72C2E5D5A629F6555B7C00C094DE65C4311765823E18C7FC150984BF4A53997D560F2186BCC0AD62F21A71E7DA2E1A26D90DB3BCC5C98CD85F856A4B1"
            }
        ]
    }
]
            ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-vs-ex6" title="Example Test DSA PQGVer JSON Object">
        <t>The following is a example JSON object for DSA PQGVer, test vectors sent from the ACVP server to the crypto module and the response.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "testGroups": [
          {
            "l": 1024,
            "n": 160,
            "hashAlg": "sha-1",
            "testType": "GDT",
            "pqMode": "probable",
            "tests": [
              {
                "tcId": 1,
                "p": "9D9269AC94DB5003355DF597CD4136A049EEE19F0843A8B90E75E9CC37261713F53120EC3BDF10DECACFB369B6CED7FFC05DF938FB001C2DE8929524E36DFB9B8741503E23F471862D2C963152FD907441E5532B7E401765BB35AB7B0AB90DC5C13936E0CB5B46261F5F2DF944BBE2EC24AD37AB427CC52B20FBB95A38DCA267",
                "q": "C5C97FD66D441234E781EA5E94C4448BCB040B1F",
                "domainSeed": "259947680F2833C3BE3C7AFCFDFB18BF231ADFD5",
                "counter": 309
              },
            ]
          },
          {
            "l": 1024,
            "n": 160,
            "hashAlg": "sha-1",
            "testType": "GDT",
            "pqMode": "provable",
            "tests": [
              {
                "tcId": 36,
                "p": "4BDC98F8302E24CEDCE682F8040E65D6920A29499CDB7C0E4BC15EAF7496A60A7BF3D9717658831945D558B845C2D293D31BEC1285BCF1254D0F50B3486AA4359FC7BAD7A139F17E1DAF068D00C91D9B75A61918CB45D235CA7BAA68D6A0C94B635982625E4739EC34B85857F1BBA0F778275311B6088E212A181EDB26263775",
                "q": "A00C3FEAF8F56910DA55DF1B12C2B519BF226DC1",
                "pCounter": 1874,
                "qCounter": 115,
                "pSeed": "C4967615C4E13913F2E4659EF7ECCD05A205A791",
                "qSeed": "C4967615C4E13913F2E4659EF7ECCD05A2057F52"
              },
            ]
          },
          {
            "l": 1024,
            "n": 160,
            "hashAlg": "sha-1",
            "testType": "GDT",
            "gMode": "unverifiable",
            "tests": [
              {
                "tcId": 211,
                "p": "A1648B0F29F5D38DA50753824EE0B1A6E33751DC498CFE4994AAE7F8E3082704E8F97FFC41F19D18845687F8CE1C4319BCEC9E37F3958B4D59D70C63FFB574F5C2866F4D15513B01637AD89551A3A319F7ADC7182E04766767AEF971D1E23763A12ED17CF3376514F00723CD935B99E4AABD836D43B38A9E0FCBF0A8709304B1",
                "q": "9BCF7E1625844A88EABB9C489F2F57916CD2FCAB",
                "g": "0FB0987B157E12F15D78D53CD14106B98F6D2CC978B08A4BE87EADF01463490E87DAFD4B95FF907257A5B570799690545A78781C98BFD94264F3B92AEF00872E0CBC2B07C5301F96A804A39E5E3274540194350865079816A031AE8C389FE9033D212B667F8311AE88D78351955F0D86C704002CC039260B64784BFCB7E14C04",
                "h": "02",
                "domainSeed": "D9F63E102A97A2C21EB39EDCC7B593C117BC7DBC"
              },
            ]
          },
          {
            "l": 1024,
            "n": 160,
            "hashAlg": "sha-1",
            "testType": "GDT",
            "gMode": "canonical",
            "tests": [
              {
                "tcId": 246,
                "p": "9A1B46A4498962D12FDE300EB25B65E06DB00ED31D3AB653D5244894A243A149034FF193EC603C2872287F2B14E628C1B9C9391A56B544DA0906103BB308BC1196CA0BF92C7BFE4CA3C593243CB695C1EFC727557D85B9E0B0A07599636C6692DCD8895C87F66797CC9F61B3AE06FA94A2301D40A0D280E60DE40F66310244C9",
                "q": "B70E07662CADF2A4191470948B040BE39BD56671",
                "g": "45659A0B48B5B581E5CA68C8B81731DEE8381619A0F6EF421E20FB26CB0F78DE3571C73C98441BAE2E2C7B1201E95A32E4BD28D347AC5DFEA5848E9AD48C579D17756AF49E4E620B85E9EE4FFE1C4F8B111F161FA2FF292529FAF97776877B34C3B35950C0A1A27FBEC78164B1D48AD6E0F8D58E09EA2E5ACE96C3F8C0250678",
                "index": "45"
              },
            ]
          }
        ]
    }
]
            ]]>
          </artwork>
        </figure>
        <t>The following is a example JSON object for DSA PQGVer test results sent from the crypto module to the ACVP server.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "testResults": [
          {
            "tcId": 1,
            "result": "failed",
          },
          {
            "tcId": 36,
            "result": "failed",
          },
          {
            "tcId": 211,
            "result": "passed",
          },
          {
            "tcId": 211,
            "result": "passed",
          }
        ]
    }
]
            ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-vs-ex7" title="Example Test DSA KeyGen JSON Object">
        <t>The following is a example JSON object for DSA KeyGen, test vectors sent from the ACVP server to the crypto module and the response.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "mode": "keyGen",
        "testGroups": [
          {
            "l": 2048,
            "n": 224,
            "tests": [
              {
                "tcId": 1
              },
            ]
          }
        ]
    }
]
            ]]>
          </artwork>
        </figure>
        <t>The following is a example JSON object for DSA KeyGen test results sent from the crypto module to the ACVP server.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "testResults": [
          {
            "tcId": 1,
            "p": "9D75F12AD16C09A618F3D256271327F0431E65C2F8C6F1D40A261000EC163ED2AB9F3637DF2B3DAB7512C001BE108664BC1050F10F4CC2896024372521D5D05E8C240DDB3FC7F0D0204538A93193C2099DA7FB3DC5D8A0EE2E84D10FF014C2FF42675EFFBBBB4AEEE5815C4E7B59B5F70C1CA714CA969C55628864B9B5EB60F99090A59A77FC4B6DEA4E015519BF68C1F75A55B560330B4F556A09D252CB7C6BA7988C34A57092D517949A952A95D5D166036339523683FDA00BA36C8B9D1BC502B5ACC1E209FE5D73637AA82753BD4316982D3F66CCA393D611703629A9EE4E20BABAB52D04383B448F309A0DE2825B64F2CDDE0851B009C9F1A8C245407EFB",
            "q": "F9146BFEC592547B8C6973785D9604578F5A72EDA6AE4D59674F39BF",
            "g": "96A7DD911D076093EBBA4D92FBC817ABADC916E1939086384CB2AAFE9F7D340EB06D2F28E2BB8BA4CFC65E173D9E776DB21C8156DFA5339082B2AE88523726B7620EB3601D75F7D0E88C8DBBD1EC248862ABF82A436FC24B59AD2A4DFE4156752CA3CD42575C73C9C2CFDF2253F966D6CAE94A358D0A116A66637A9A62349E3977FAEA59FB14D9A4482504AEFB3B89772018014BC0850CB50D8DD054AC5B3B2247578888D169246A8BA3E37AB01C5F2B66D3ECCFCC8EA5888D24E80F8A6E4E4BDAE582E2EB43ECDCECCF0D759784EADDE21490D090E458FA8A7172174E6AB0505BE295ADAAC49BBDAAAA36E56D5298F639A5F15DA3DD755D02AFA7C75EB39841",
            "x": "6316A9021906CB3F9F61F479BA591F14749CECFF90A890D14D7DD7AC",
            "y": "8520DE9F113D659F70870013D8B9E30E1B171625A1A40791D6A27B55FDEB88C027D56EAA8C007895CA8241B85E005841105326355E7EB915BCD2E7D94A0E2222B70EFA4F836E5EAEFB33A999DC6F478C8C1F5F0AD031EBC672738A18C4FF22661C9077608CE8A3AB296FEA57B07A21C4057B6069C32FBD915A449A97E1535968139892B5AFC15C9BD094F96C2FF5C593DA3AFCE43CB13590FF938548545B33D0CD6FBA5DBE2233737A76C6ECA47B5DB45C2E4B9CD3D77724C0652A3D4DFA85FEF6F36B5A3399B6F09AD3227CE4B258224537B33FA1BFAEE1C83BCEC704F426748960B8973CE0443F21E240DD4C5295043CF0BF41D7553B08CC6E87C64F943985"
          },
        ]
    }
]
            ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-vs-ex8" title="Example Test DSA Generation JSON Object">
        <t>The following is a example JSON object for DSA SigGen, test vectors sent from the ACVP server to the crypto module and the response.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "mode": "sigGen",
        "testGroups": [
            {
                "l": 2048,
                "n": 224,
                "sha": "sha-1",
                "tests": [
                    {
                        "tcId": 1,
                        "message": "C1FEBB069145F6A9693A2EEAD3A4771743725113B173576429DFA1B95CD577C29ADAD1DBF82CCA583578DBB4EAB237BE10553C701A647492D9B4325C9E2C2245EF199D0A63876C7FE26C78260631185B3B40E57F1A66DC37E4346365ABADC5AD9FE1E6030E73FEF5D456D7F79C59C73D19DE0963D9C126D51DAB7E627D41D6B963147FCD6E323A45A3BF40403CFAE36397E0A6826629C21EAF553649B8A2B4159713F180BC5E1DC061708C9CE0D52A53F5370432566ECD55953C2C8CF29BB5305B2116674DD99A9B12FDF1347E585BDCE128E46ED31036AE7B3F5957FA30BD52A40BF43BB20C7CD9A5D8428D1D4895EF9427BDB0ED5A3C4F5CC874CAB2407455"
                    }
                ]
            }
        ]
    }
]
            ]]>
          </artwork>
        </figure>
        <t>The following is a example JSON object for DSA SigGen test results sent from the crypto module to the ACVP server.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "testResults": [
          {
            "tcId": 1,
            "p": "C8DC6C77CC31ADAE68F3221D59C75538F6956517FF915B96939D0355D3AE7D00789EDDFF13C6707CFAC855EE79FC5A25F7243FF8D6FAD5E89CC799FB275ADB2A6F573FDF69FBF3C3C358C51E229B7799D78416F33F2F20420F35BDABB967435C78EFE843BADF4D93A65538B54723BBF1489D20482A295224CA870EE7F65BC7A17611221D58DB4B51D9C32A359D93032DD97942E8042EC4458D1E78B97D783D14243AEFDE455ED9AEC1925FE49E4B2A9B2160D710CCBEA6BC679E2A2A5307F5CD6B7C8E1078E83DF39A636ACE7E6EED18FBDC56ED89AC21B2ED133566D4696609E0AD0C95DC776893AB71AC9E223CE318CE26FBAE29B812075975F6B73DAF3529",
            "q": "B1B7BCF2467F8CC46FCDD2A41327C2698D9E0A3F36682E17546EAE5B",
            "g": "6C07130A6F6D05AAC9350936EE06B1303035FE460CEBF21DDA00CC08CD5E8A788D8C3F6B4B0A567A82DBF373CE36A40ADCF77D0CB6CA9AB93D1C0051E354AEB27BBC808A4950E91E2BFFFEF7427DBEA5E05BC9A3C003F6796C0A3EF3CF7D30378657A0966AE952BDC038645199F3C2FBBFD0B4E6E489E97D6DF8A9AD4356B34A3CD289DF9BA53F95A62E110B2BA84D668D7F72EA6CA471B6624F0F2E5CB54C9E96367CD4659BC64EC731B7F60CE0F08B58CFB29090DBDE6BDD7EC16689A9CC3913F3F009E03280342150C0899814532F471594C883B3941ADA81EB95274BB0B8900C492D92AD5686141DBB302DD2C2B4EEA8C2C7AD9B616DF0A520B9CCF7074F",
            "y": "79143F63ECCC06B3D35C61DA2FB8ED359F8FBF014D699C3B6E150E60443BA461C256498F52262AD3850FECDA5F01F4702F5411BF25F0D9A4CF21F9B84B8FEF8C5E83563A1AE35C253D07011E5492106F46C7DF2624948E3662DAC129E5A094A6180F24480D3FFBD2F223156E68EBD6378ECBA010DF0CB6B3DD12045D8015E66160821AF5A12C8FE239AB331EBCDE6B906A40197769A74780700420C40428A81FBDEB94B9FE37183E9401167AFF6AEAE9968A6FBD11AFB3EB60ED076627CC2873EA2034BAEF2427C1BABF858D4E783B0FE3C51B39661EFBD9518F93A554E5E37428AFC62CF0C61A3B9248B56BBA0282E9BB7A8A6FB14D2CA4AAA9DC3245722525",
            "r": "4E7F70A92EC0E6871E2EA27585C0263E2AF539D5F1402A24E01FDB4B",
            "s": "641A74C54A0B642DED9FE6EEA311299F4FC759CA98D6EC339A823314"
          },
        ]
    }
]
          ]]>
          </artwork>
        </figure>
      </section>
      <section anchor="app-vs-ex9" title="Example Test DSA SigVer JSON Object">
        <t>The following is a example JSON object for DSA SigVer, test vectors sent from the ACVP server to the crypto module and the response.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "testGroups": [
          {
            "l": 1024,
            "n": 160,
            "p": "A48828B4A4E149C2D1FC66F108D370A2A9E87DBD49BC09A27017621A9BFBD3686162E7F3DB585207960C240FEEDC954D46D2B704495DD9BA1DD8ECE76F3BA69D6AF09EE4F21AF60D93517266ECA0D7C4940BE62F6D62C68CBE2C4AA225424F14B4A18FE19F950F7D756F56E5422F17E02951472BC454A4F7B615E0E94FD5AEE9",
            "q": "D3C53E62338D4231E42FA9683175C404FBF52759",
            "g": "7BDDD6B8E9B4667397B278F98F446C418EF1A502068B3082F9CE1D639F5FAA67048ACD4F50E1F855467465A653D2245B7E31C910A18EF79F098ACF73BFC43B1B5E7BFB065FB7A89583C5C23105018D0525AFA9C40B6C343E69CFC2B6B2A87FB4265FDE13D6F19A7BF7A1302AA14EDFA56FD1526241316D1BA182683B8E306CDA",
            "hashAlg": "sha-1",
            "tests": [
              {
                "tcId": 1,
                "message": "1A128C1A61091CE52A8B89D69A3FFA5ECCD1FE70",
                "y": "A3A2F1AFC3091204B7D7ED3617A80E0FD57221BE67E852A1558CA08984CB56F3A0EF37749B5EA4D2EC824ED5E7EDB0D25A72C8DEFA0F409909E31C2C23BB7A24B8103F11F9781A0F0A15FE6F6DAEFD42CD5FA7444221CB545BB0CDB95DC9D76E0DB9AF193E6832934537B0B05D177BA8F7DA48D9DD84D27B8AFE9481BE520B",
                "r": "C390851DE10669399308D9F401B0286AA1F4189D",
                "s": "26BE6EFDCD2ED6946BFCFE2D396AB3A2E84B2FF8"
              },
            ]
          }
        ]
    }
]
            ]]>
          </artwork>
        </figure>
        <t>The following is a example JSON object for DSA generation test results sent from the crypto module to the ACVP server.</t>
        <figure>
          <artwork>
            <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "testResults": [
            {
                "tcId": 1,
                "result": "passed"
            }
        ]
    }
]
          ]]>
          </artwork>
        </figure>
      </section>
    </section>
  </back>
</rfc>