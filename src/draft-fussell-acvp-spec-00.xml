<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3339 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339.xml">
<!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC7230 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7519 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7519.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
    (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="3"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
    (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-fussell-acvp-spec-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN" 
    they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
        full title is longer than 39 characters -->

    <title abbrev="ACV Protocol">Automated Cryptographic Validation Protocol</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Barry Fussell" initials="B.F." role="editor" surname="Fussell">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>170 West Tasman Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>bfussell@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="Apostol Vassilev" initials="A.V." role="editor" surname="Vassilev">
      <organization>National Institute of Standards and Technology</organization>

      <address>
        <postal>
          <street>100 Bureau Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>Gaithersburg</city>

          <region>MD</region>

          <code>20899</code>

          <country>USA</country>
        </postal>

        <email>apostol.vassilev@nist.gov</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="Harold Booth" initials="H.B." surname="Booth">
      <organization>National Institute of Standards and Technology</organization>

      <address>
        <postal>
          <street>100 Bureau Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>Gaithersburg</city>

          <region>MD</region>

          <code>20899</code>

          <country>USA</country>
        </postal>

        <email>harold.booth@nist.gov</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date year="2019"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
        in the current day for you. If only the current year is specified, xml2rfc will fill 
     in the current day and month for you. If the year is not the current one, it is 
     necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
     purpose of calculating the expiry date).  With drafts it is normally sufficient to 
     specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.  
     If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->

    <abstract>
      <t>The ACV Protocol provides a method for communication between a cryptographic module 
        that is embedded inside of a
        device or otherwise running on a platform accessible via computer network, and an external
        testing system, using standard network communication interfaces and protocols. This
        communication protocol can also be used to validate the correctness of the algorithm implementations in the cryptographic module with a validation authority.</t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction">
      <t>The ACV Protocol(ACVP) introduces a method to perform cryptographic 
         assessment and validations at a rate which meets typical industry development cycles.
         This provides the ability to deploy validated crypto with CVE fixes much faster
         than previous methods. This document describes how it is structured with respect
         to the client-server model, the messaging protocol, optional features and flows.</t>
    </section>

    <section title="Requirements Language">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in BCP 14, RFC 2119 <xref
      target="RFC2119"></xref>.</t>
    </section>

    <section anchor="caps_reg" title="Overview">
      <t>ACVP has the following goals:</t>
      <t>
        <list style="symbols">
          <t> To work in situations where the testing system is remote from the cryptographic
            module, e.g. running as a process on a separate device.</t>
          <t> To enable automated testing that can take place with a minimum of human
            interaction.</t>
          <t> To enable the testing system to discover the capabilities of the module being tested;
            that is, the particular algorithms and parameters that the module supports.</t>
          <t> To provide extensibility that can be used to introduce tests for new algorithms, and
            new tests for existing algorithms.</t>
          <t> To be compatible with emerging automated validation systems wherever possible,
            especially the FIPS-140 Cryptographic Algorithm Validation Program.</t>
          <t> To provide a standard communication method so that vendors can utilize the same
            testing service for FIPS-140, 3rd party crypto verification and product FCS readiness
            testing.</t>
        </list>
      </t>

      <t>ACVP defines how to communicate a request (to execute a cryptographic operation) to a
        cryptographic module, and how to communicate the corresponding response (containing the
        output of that operation) back to a testing system. It defines a transport (based on HTTP or
        HTTPS  <xref target="RFC7230"></xref>), an encoding and message format (which is negotiated), and a set of message
        exchanges. Each vector test set corresponds to a single message exchange driven from the
        client associated with the module under test. ACVP does not define the cryptographic
        algorithms, nor does it detail the precise conditions for a response to be acceptable.
        Instead, it references existing specifications for those algorithms, and defines a mapping
        between the data on the wire and the algorithm testing specification. ACVP does not define
        detailed conformance criteria, such as those in FIPS-140. Instead, it aims to be independent
        of particular conformance criteria, so that it can be used in multiple domains with
        different (even potentially conflicting) conformance criteria. ACVP does not define an
        interface that can be used to manage or control a cryptographic module.</t>
      <section title="Audience">
        <t>This document is written to address multiple audiences:</t>
        <t>
          <list style="symbols">
            <t> Crypto module developers who require validation testing</t>
            <t> Crypto module developers who require runtime crypto assessment testing</t>
            <t> Crypto validation organizations who will perform validation testing</t>
            <t> Crypto module customers that desire validation testing results or verifiable
              artifacts of testing</t>
          </list>
        </t>
      </section>

      <section title="Goals">
        <t>The goals for this document are to provide a messaging protocol that can be used with
          existing authentication and communication protocols to provide a way to test crypto
          modules. The following functions are outside the scope of this document:</t>
        <t>
          <list style="symbols">
            <t> The API to the cryptographic module</t>
            <t> How the tests are generated</t>
            <t> How the results/artifacts are stored or managed</t>
            <t> Authentication used</t>
            <t> Scalability</t>
            <t> Management interface</t>
          </list>
        </t>
        <t>With that in mind there are several expectations when building a server used as a
          validation authority. A validation authority SHALL use HTTPS
          <xref target="RFC7230"></xref>, TLS 1.2
          <xref target="RFC5246"></xref>
          or greater and
          mutual authentication. Therefore a client that expects to be used with a validation
          authority SHALL have the same requirements. A server, proxy or client developed for the
          purposes of internal organizational testing only MAY chose not to include some of those
          features.</t>
      </section>
    </section>


    <section title="Architecture">
        <t>A server/client/proxy model is used where the roles are defined as:</t>
        <t>
          <list style="symbols">
            <t> ACV Client - Communicates
              with the ACV server using Java Script Object Notation (JSON) and collects the
              test vectors and returns the test results using product specific methods.</t>
            <t> ACV Server - Sends JSON formatted messaging and test data to the ACV client and
              processes test responses.</t>
            <t> ACV Proxy - Resides between the ACV server and ACV client to proxy the connection
              for the client. This is particularly useful when the client does not support TLS, key
              management or have signature capabilities and they are required by the server. An
              example architecture is provided in Figure 3.</t>
            <t> Device Under Test - Contains the crypto module under test which
              can include various algorithms and functions that encrypt/decrypt, generate keys,
              signatures, perform varifications and DRBG functions. May also contain the ACVP
              client.</t>
            <t> Cryptographic Module API - This is the interface, manual or otherwise,
              to the crypto module. This interface is environment specific and will 
              vary depending on
              the crypto module and may not be limited to real-time operation. </t>
          </list>
        </t>

      <section title="Server/Client Architecture(realtime)">

      <figure align="center" anchor="xml_figure1a">

        <artwork align="left"><![CDATA[

                           +----------------------------------------+
                           |                    +-----------------+ |
+----------+               | Entropy ---------->| DRBG----Encrypt | |
| ACV      |               |                    |         Auth    | |
| Server   |<=============>| +--------+         |                 | |
+----------+               | | ACV    |<------->| PKI-----Key Est | |
                           | | Client |    ^    |         Sign    | |
                           | +--------+    |    |                 | |
                           |            Crypto  | Crypto Module   | |
                           |            Module  +-----------------+ |
                           |           Realtime                     |
                           |              API                       |
                           |                                        |
                           |        Device Under Test (DUT)         |
                           +----------------------------------------+


           ]]>        </artwork>

      </figure>
      </section>

      <section title="Server/Client Architecture(not realtime)">

      <figure align="center" anchor="xml_figure1b">

        <artwork align="left"><![CDATA[

                     +------------+
                     |            |             +-----------------+
+----------+         |            |  Entropy -->| DRBG----Encrypt |
| ACV      |         |            |             |         Auth    |
| Server   |<=======>| +--------+ |             |                 |
+----------+         | | ACV    | |             | PKI-----Key Est |
                     | | Client | | <==========>|         Sign    |
                     | +--------+ |       ^     |                 |
                     |            |       |     | Crypto Module   |
                     +------------+       |     |                 |
                                          |     +-----------------+
                                   Manual/Non-Realtime
                                    Vector Exchange

           ]]>        </artwork>

      </figure>

      </section>

      <section title="Server/Proxy Architecture">
        <figure align="center" anchor="xml_figure2">

          <artwork align="left"><![CDATA[


                +--------------------------------------------------+                           
                |                      +-------------------------+ |
+----------+    |    +---------+       |                         | |
| ACV      |    |    | ACV     |       |                         | |
| Server   |<=======>| Proxy   |<=====>| +--------+   +--------+ | |
+----------+    |    +---------+       | | ACV    |<->| Crypto | | |
                |                      | | Client |   | Module | | |
                |                      | +--------+   +--------+ | |
                |                      |                         | |
                |                      |      DUT                | |
                |                      +-------------------------+ |
                | Vendor/Customer Premise                          |
                +--------------------------------------------------+

           ]]>          </artwork>

        </figure>
      </section>

      <section title="Terminology">
        <t>The following terms are consistently used throughout this document and SHOULD be used throughout its extensions:</t>
        <t>
          <list style="symbols">
            <t>Test Session - The largest structure of an instance of ACVP. Often generated from a 
            single registration, it will contain many Test Vector Sets for the algorithms defined 
            in the registration.</t>
            <t>Test Vector Set - The set of tests and data corresponding to an individual algorithm
            from within a registration. Uniquely identified throughout an instance of ACVP by the 
            vsId. Contains many Test Groups.</t>
            <t>Test Group - The set of tests that share common properties within a Test Vector Set. 
            Uniquely identified within the Test Vector Set by the tgId. Contains many Test Cases.</t>
            <t>Test Case - The smallest unit of the tests that represents an individual testable
            operation as defined by the parent Test Group. Uniquely identified throughout the 
            Test Vector Set by the tcId.</t>
            <t>Registration - The JSON from the client to the server that describes the algorithms 
            and capabilities for which the client is seeking test cases and a validation. A 
            Registration can submit capabilities for multiple algorithms. Each algorithm will be
            broken into individual Test Vector Sets.</t>
            <t>Prompt - The JSON sent from the server to the client defining a single Test 
            Vector Set to use as inputs for testing. Exactly one prompt will exist for each 
            Test Vector Set.</t>
            <t>Response - The JSON from the client providing the desired cryptographic output
            for each of the Test Cases defined in the corresponding Prompt file. These are linked
            via the Test Vector Set vsId. As exactly one prompt exists for each vsId, one response
            will exist for each prompt.</t>
            <t>Disposition - The JSON from the server after the Response is submitted by the client
            detailing the correctness of the Test Cases. A "passed" disposition indicates that the
            particular algorithm in the Test Vector Set is ready for validation.</t>
            <t>OE - Operational Environment - The specific hardware and/or software the client's
            cryptographic implementation uses to run.</t>
            <t>Realtime - For the purposes of this document realtime is defined as the client
            receiving a vector set and immediately performing the tests and returning the results
            to the server. In general, this is a case where the ACVP client and DUT reside in the
            same box and directly commicate with each other. Non-realtime would refer to the case 
            where the client may gather vector sets from the server and through some means 
            introduce them to the DUT gather the results and send them back to the server.
            In general, this is a case where the DUT cannot communicate directly with the ACVP
            client.</t>
          </list>  
        </t>
      </section>
    </section>
    <section title="ACV Protocol">
      <t>The ACV protocol will utilize existing mechanisms for transport coordinated with JSON
        formatted messaging.</t>
      <figure align="center" anchor="xml_figure3">
        <preamble>Protocol Layering</preamble>
        <artwork align="left"><![CDATA[
+-----------------------------------------------+
| JSON Formatted ACVP request/response messages |
+-----------------------------------------------+
| HTTP[S] message transfer and signaling        |
+-----------------------------------------------+
| TLS for transport security(recommended)       |
+-----------------------------------------------+
| TCP for transport                             |
|_______________________________________________|

           ]]>
        </artwork>
      </figure>
      <section title="HTTP URI Hierarchy" anchor="uriComposition">
        <figure align="center" anchor="xml_figure4">
          <artwork align="left"><![CDATA[

         +-------------+--------------------+---------------+
            server          path prefix          resource
         +-------------+--------------------+---------------+
 https://acvts.nist.gov/acvp/validation/acvp/login
         +-------------+--------------------+---------------+
                          context  API   


           ]]>
          </artwork>

        </figure>
        <t>Note that deployments utilizing ACV Proxy server MAY use a different protocol, e.g.,
          HTTP, custom server, context and port number to interact with the DUT.</t>
      </section>

      <section title="HTTP URI Resources" anchor="uriResources">
        <t>In the table below, any parts of a resource path enclosed in curly braces, { or },
          are replaced by an instance of what is described in the braces. For 
          example {testSessionId} could be replaced with 1.</t>
        <texttable anchor="uri_table" title="Resources and their available operations">
          <preamble>
            An empty cell for a resource and HTTP Method combination denotes
              that the server returns an HTTP Status 405 code 
              <spanx style="emph">Method not allowed (405)</spanx>.
          </preamble>
          <ttcol align="left" width="20%">Resource</ttcol>
          <ttcol align="left" width="17%">GET (read)</ttcol>
          <ttcol align="left" width="17%">POST (create)</ttcol>
          <ttcol align="left" width="17%">PUT (update)</ttcol>
          <ttcol align="left" width="17%">DELETE</ttcol>

          <c>/vendors</c>
          <c>
            <xref target="vendors_get">Returns a list of vendors</xref>
          </c>
          <c>
            <xref target="vendors_post">Register a new vendor</xref>
          </c>
          <c/>
          <c/>

          <c>/vendors/{vendorId}</c>
          <c>
            <xref target="vendor_get">Retrieve Information for a specific vendor</xref>
          </c>
          <c/>
          <c>
            <xref target="vendor_put">Update a vendor</xref>
          </c>
          <c>
            <xref target="vendor_delete">Delete a vendor</xref>
          </c>

          <c>/oes</c>
          <c>
            <xref target="oes_get">Return a List of OEs</xref>
          </c>
          <c>
            <xref target="oes_post">Create a new OE</xref>
          </c>
          <c/>
          <c/>

          <c>/oes/{oeId}</c>
          <c>
            <xref target="oe_get">Retrieve Information for a OE</xref>
          </c>
          <c/>
          <c>
            <xref target="oe_put">Update an OE</xref>
          </c>
          <c>
            <xref target="oe_delete">Delete an OE</xref>
          </c>

          <c>/modules</c>
          <c>
            <xref target="modules_get">Return a List of Modules</xref>
          </c>
          <c>
            <xref target="modules_post">Register a new Module</xref>
          </c>
          <c/>
          <c/>

          <c>/modules/{moduleId}</c>
          <c>
            <xref target="module_get">Retrieve Information for a specific module</xref>
          </c>
          <c/>
          <c>
            <xref target="module_put">Update a module</xref>
          </c>
          <c>
            <xref target="module_delete">Delete a module</xref>
          </c>

          <c>/dependencies</c>
          <c>
            <xref target="dependencies_get">Returns a list of dependencies</xref>
          </c>
          <c>
            <xref target="dependencies_post">Create a new dependency</xref>
          </c>
          <c/>
          <c/>

          <c>/dependencies/properties</c>
          <c>
            <xref target="dependencies_properties_get">Returns a list of properties for
              dependencies</xref>
          </c>
          <c/>
          <c/>
          <c/>

          <c>/dependencies/{dependencyId}</c>
          <c>
            <xref target="dependency_get">Retrieve Information for a specific dependency</xref>
          </c>
          <c/>
          <c>
            <xref target="dependency_put">Update a dependency</xref>
          </c>
          <c>
            <xref target="dependency_delete">Delete a dependency</xref>
          </c>

          <c>/algorithms</c>
          <c>
            <xref target="algorithms_get">Return a List of Available Algorithms</xref>
          </c>
          <c/>
          <c/>
          <c/>

          <c>/algorithms/{algorithmId}</c>
          <c>
            <xref target="algorithm_get">Retrieve Information about an Algorithm</xref>
          </c>
          <c/>
          <c/>
          <c/>

          <c>/testSessions</c>
          <c>
            <xref target="testSessions_get">Returns a list of Test Sessions for the current
              user</xref> (Optional)
          </c>
          <c>
            <xref target="testSessions_post">Create a new Test Session</xref>
          </c>
          <c/>
          <c/>

          <c>/testSessions/{testSessionId}</c>
          <c>
            <xref target="testSession_get">Returns information about the specific Test
              Session</xref> (Optional)
          </c>
          <c/>
          <c>
            <xref target="testSession_put">Certify the Test Session for
              validation.</xref>
            <cref>should this be a POST instead?</cref>
          </c>
          <c>
            <xref target="testSession_delete">Cancel testing for a specific Test Session</xref>
          </c>

          <c>/testSessions/{testSessionId}/results</c>
          <c>
            <xref target="testSession_results_get">Request Validation Results for a Test
              Session</xref>
          </c>
          <c/>
          <c/>
          <c/>

          <c>/testSessions/{testSessionId}/vectorSets</c>
          <c>
            <xref target="vectorSets_get">Returns a list of Vector Sets for the specific Test
              Session</xref>
          </c>
          <c/>
          <c/>
          <c/>

          <c>/testSessions/{testSessionId}/vectorSets/{vectorSetId}</c>
          <c>
            <xref target="vectorSet_get">Vector Set download request</xref>
          </c>
          <c/>
          <c/>
          <c>
            <xref target="vectorSet_delete">Cancel testing for a specific Vector Set</xref>
          </c>

          <c>/testSessions/{testSessionId}/vectorSets/{vectorSetId}/results</c>
          <c>
            <xref target="vectorSet_results_get">Request Validation Results for a Vector
            Set</xref>
          </c>
          <c>
            <xref target="vectorSet_results_post">Initial Submission of Vector Set Test
              Results</xref>
            <cref>POST and PUT seem redundant</cref>
          </c>
          <c>
            <xref target="vectorSet_results_put">Update Vector Set Test Results
            Submission</xref>
          </c>
          <c/>

          <c>/testSessions/{testSessionId}/vectorSets/{vectorSetId}/expected</c>
          <c>
            <xref target="vectorSet_expected_get">Expected Test Results</xref> (Optional)
          </c>
          <c/>
          <c/>
          <c/>
        </texttable>

        <t> The resource path is appended to the path prefix to form the URI used with an HTTP
          Method to perform the desired ACVP operation. For example to create a new test session
          using the "/testSessions" resource is "/acvp/v1/testSessions" (assuming an empty context).
          To create a new Test Session, the ACVP client would use the following HTTP request-line: </t>
        <t>POST /acvp/v1/testSessions HTTP/1.1</t>

        <t>Likewise, to request a specific vector set from the server the ACVP client would use the
          following request-line:</t>

        <t>GET /acvp/v1/testSessions/1/vectorSets/1 HTTP/1.1</t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>It is RECOMMENDED that HTTPS and TLS 1.2 or greater be used in order to enforce a secure
        communication method. Not all environments will have TLS so HTTP with some level of
        authentication may be the only option.</t>

    <section title="Authentication">
      <t>It is RECOMMENDED that an authentication scheme be used. Typically, a JSON Web Token (JWT) is created by the server
       upon successful client authentication and returned to the client to use as an authorization mechanism for accessing
       the server resources - see        <xref target="jwtToken"/> below for more information.  Depending on the target
        environment and usage objectives, the authentication can be as weak as basic HTTP authentication or as
        strong as TLS mutual certificate authentication. Definition of an authentication scheme will
        not be discussed here, but should be agreed upon between the client and server owning
        entities including the servers owned by the validation authorities. For the purposes of the
        message flow examples, no authentication will be used.
      </t>
    </section>
    </section>

    <section title="Encoding">
      <t>The encoding used for the request/response messaging will be JSON. The data will be
        identified by: Content-type: application/json In order to allow environment specific
        extensions to a particular version of the ACV protocol, a top-level JSON keyword, extensions
        will be used to extend the OE description and/or the capabilities. Extensions MAY be ignored
        by the ACV server. Vector and vector response data will be JSON encoded.</t>
    </section>

    <section title="Versioning">
      <t>The version of the ACVP protocol will be carried with each message and will contain a
        simple major.minor format. Major version changes will not be backward compatible, however
        additions and enhancements that do not disrupt compatibility will be indicated with a minor
        version change. A server MAY accept a down-level version from the client if it can process
        at a lower level. If not, it will reject the session. All subsequent messages will carry the
        negotiated version value.</t>
    </section>

    <section title="Messaging and Workflow">

      <section title="Product Registration/Capabilities Exchange">
        <t>The product registration will utilize the URI resources 
        <xref target="uriResources"/> to register and provide cryptographic capabilities. 
          This exchange will consist of several message exchanges and carry the Company name, 
          primary contact (OE information) 
          as well as a detailed list of the supported cryptographic algorithms and their options
          to be tested during the testSession, see <xref target="xml_msgFlows"/>. </t>

      </section>

      <section title="Test Exchange">
        <t>The test exchange consists of the ACV client requesting a particular vectorSet
          associated with the testSession. The server responds with the vectorSet. The client
          has the option to process the vectorSet and return results(realtime) or request
          more vectorSets for processing at a later time(non-realtime).
          The client will repeat this process until all of the tests in the session test
          list have been processed. Once a vectorSet result has been POSTed to the server
          the client may request success/failure results from the server at any time,
          however if vectorSets have not been completed the overall status will be incomplete.
          A minimal message flow is described below <xref target="xml_msgFlows"/>. </t>
      </section>

      <section title="JSON Web Token (JWT)" anchor="jwtToken">
        <t>JSON Web Token is described in          <xref target="RFC7519">RFC 7519</xref> and is used as an
          authorization mechanism for gaining access to different resources.
        </t>

        <t>An example JWT:</t>
        <figure align="center">
          <artwork align="left"><![CDATA[
{
"alg" : "none"
}
   {
      "iss" : "nist.gov",
      "exp" : 1426420800,
      "company" : "MyCompany",
      "jti" : 0987654321,
      "pkey" : "cc74f56acdba635079383a03941d68db55c7b3c2fcd0f9716c9b62d56d3f8f546e9ec0244203b6ab4a82c08a46b1dbc243c6434861e31ab51065f41dbce00482498d4474d1ed3b09dc727af6b9c788fdb5da283c5a98cf8ac9e473f34644c6bbfc146e28f8158f725ce25bcb73e0a2c05378739d101df15a0c1297a1a2e3abc7912e24caba5465e78f694ad0d3cf48f2f01c4580d774d592684756efbdf0cc7648470dd78a3b38973b18946e71c8feaf2f28b93a2ff36b1cc31236e5845145899e8a0438aeb1073bc0d23d5c7898845d5227867a38234739595d55a44e41a39feff8eb447757fc6b246d92f02fe43b46e46c7403a5966f40ba4e01ca64e955c5"
   }
   {
   Empty octet string (since alg is none).
   }
           ]]>          </artwork>
        </figure>

        <t>The JWT can be secured if desired using the header encryption "alg" value defined to
          HS256(HMAC-SHA256) or one of the other secure values. Key agreement would follow RFC7518. </t>

        <t> The first four claims are required, however "pkey" is an optional private claim used to
          pass the key used for encrypting the database at the server. Enabling this option is
          discussed further in          <xref target="testSessions_post"/>
        </t>

        <section title="Authorization flows with JWT" anchor="jwtAuthFlows">
          <t>JSON Web Token is described in            <xref target="RFC7519">RFC 7519</xref> and is used as an
          authorization mechanism for gaining access to different resources.
          </t>

          <t>In order to access any resource which requires authorization a client must supply the JWT
          as an            <spanx style="verb">Authorization</spanx> header value as a
            <spanx style="verb">Bearer</spanx> token. An example header value is:
          </t>
          <figure align="center">
            <artwork align="left"><![CDATA[
            Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiAibmlzdC5vcmciLCJleHAiOiAxNDYyOTg0OTUzLCJjb21wYW55IjogIkNpc2NvIiwianRpIjo0NTh9.zDhd3WrLcb1Xf5-VKOX6k-G70mACbi1tdir8qHAMPyQ
           ]]>            </artwork>
          </figure>


          <figure align="center" anchor="xml_figureFlows">
            <preamble>Workflow authorization flows. All exchanges shown are over HTTP.</preamble>

          <artwork align="left"><![CDATA[
         +--------+---------------------------------+------+--------+
         | Client |                                 |Server|  Notes |
         +--------+---------------------------------+------+--------+
         |        |POST to /login or similar with   |      |        | 
         |        |appropriate credentials          |      |        |
         |        |-------------------------------->|      |        |
         |        |                                 |      |        |                                  
         |        |receive the access token         |      |        |
         |        |<-  -  -  -  -  -  -  -  -  -  - |      |        |
         |        |                                 |      |        |                                  
         ]]></artwork>
        </figure>
        </section>
        <section title="JWT Expiration/Renewal" anchor="jwtExpire">
          <t>The JWT access tokens received from either the 
              /login server endpoint SHALL be set to expire after a pre-defined period, 
              The specific length of the expiration period is  
              out of scope for this specification. However, the expiration period length impacts both the security and protocol overhead. Longer
              expiration periods reduce the overhead but increase the window for attacks. 
              Attempting to access a service with an expired JWT SHALL result in a "401 Unauthorized" HTTP status code. 
              
              A client may renew an expired JWT access token using the mechanism shown in            <xref target="xml_figureRenewalFlows"/>
 below. </t>
          <figure align="center" anchor="xml_figureRenewalFlows">
            <preamble>JWT access token renewal flows. All exchanges shown are over HTTP.</preamble>

          <artwork align="left"><![CDATA[
         +--------+---------------------------------+------+--------+
         | Client |                                 |Server|  Notes |
         +--------+---------------------------------+------+--------+
         |        |POST to /login or similar with   |      |        | 
         |        |appropriate credentials          |      |        |
         |        |and expired JWT access token     |      |        |
         |        |-------------------------------->|      |session |
         |        |                                 |      |or      |  
         |        |                                 |      |login   |  
         |        |                                 |      |JWT     |                                  
         |        |receive the renewed access token |      |        |
         |        |<-  -  -  -  -  -  -  -  -  -  - |      |        |
        ]]></artwork>
        </figure>
          </section>
      </section>


      <section anchor="flow" title="Message Flow">
        <t>The minimum message flow between client and server after receiving the JWT:
         <xref target="xml_msgFlows"/>
            </t>

          <figure align="center" anchor="xml_msgFlows">
            <preamble>Workflow message flows. All exchanges shown are over HTTP.</preamble>

          <artwork align="left"><![CDATA[
         +--------+-----------------------------------+------+------------+
         | Client |                                   |Server|  Notes     |
         +--------+-----------------------------------+------+------------+
         |        |POST /vendors                      |      |            | 
         |        |---------------------------------->|      |            |
         |        |                                   |      |            |
         |        |vendor URL                         |      |            |
         |        |<-  -  -  -  -  -  -  -  -  -  -  -|      |            |
         |        |                                   |      |            |
         |        |POST /modules                      |      |            |
         |        |---------------------------------->|      |            |
         |        |                                   |      |            |
         |        |module URL                         |      |            |
         |        |<-  -  -  -  -  -  -  -  -  -  -  -|      |            |
         |        |                                   |      |            | 
         |        |POST /oes                          |      |            |
         |        |---------------------------------->|      |            |
         |        |                                   |      |            |      
         |        |oes URL                            |      |            |
         |        |<-  -  -  -  -  -  -  -  -  -  -   |      |            |
         |        |                                   |      |            |                      
         |        |POST dependency                    |      |            | 
         |        |---------------------------------->|      |            |
         |        |                                   |      |            |                      
         |        |dependency URL                     |      |            |
         |        |<-  -  -  -  -  -  -  -  -  -  -  -|      |            |
         |        |                                   |      |            |                      
         |        |POST testSessions                  |      |            | 
         |        |---------------------------------->|      |            |
         |        |                                   |      |   Submit   |                      
         |        |testSessions URL                   |      |Registration|
         |        |<-  -  -  -  -  -  -  -  -  -  -  -|      |            |
         |        |                                   |      |            |                      
         |        |GET                                |      |            |                      
         |        |testSessions/1/vectorSets/1        |      |            | 
         |        |---------------------------------->|      |            |
         |        |                                   |      |  Retrieve  |                      
         |        |send test vectors for vsId 1       |      |   Prompt   |
         |        |<-  -  -  -  -  -  -  -  -  -  -  -|      |            |
         |        |                                   |      |            |                      
         |        |POST results                       |      |   Submit   |                      
         |        |---------------------------------->|      |  Response  |
         |        |                                   |      |            |                      
         |        |GET                                |      |            |                      
         |        |testSessions/1/vectorSets/1/results|      |            |                      
         |        |---------------------------------->|      |            |
         |        |                                   |      |  Retrieve  |                      
         |        |receive results                    |      |Disposition |
         |        |<-  -  -  -  -  -  -  -  -  -  -  -|      |            |
         ]]></artwork>
        </figure>

      </section>

      <section anchor="vendors" title="Vendor Resources">
        <t>The available properties for vendor resources are:          <list>
            <t>
              <spanx style="strong">url</spanx> -              <spanx style="verb">string</spanx>, identifier
              for this resource
            </t>
            <t>
              <spanx style="strong">name</spanx> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="strong">parentUrl</spanx> - a parent vendor identifier, allows for
              multiple divisions or business units to share a parent company identifier
            </t>
            <t>
              <spanx style="strong">website</spanx> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="strong">emails</spanx> - array of
              <spanx style="verb">string</spanx>s
            </t>
            <t>
              <spanx style="strong">contacts</spanx> - an array of contact objects,              <list>
                <t>
                  <spanx style="strong">name</spanx> -                  <spanx style="verb">string</spanx>
                </t>
                <t>
                  <spanx style="strong">emails</spanx> - array of
                  <spanx style="verb">string</spanx>s
                </t>
                <t>
                  <spanx style="strong">phoneNumbers</spanx> - array of phone objects,                  <list>
                    <t>
                      <spanx style="strong">number</spanx> -                      <spanx style="verb">string</spanx>
                    </t>
                    <t>
                      <spanx style="strong">type</spanx> -                      <spanx style="verb">string</spanx>, one
                      of (fax, voice)
                    </t>
                  </list>
                </t>
              </list>
            </t>
            <t>
              <spanx style="strong">address</spanx> - an address object,              <list>
                <t>
                  <spanx style="strong">street</spanx> -                  <spanx style="verb">string</spanx>
                </t>
                <t>
                  <spanx style="strong">locality</spanx> -                  <spanx style="verb">string</spanx>
                </t>
                <t>
                  <spanx style="strong">region</spanx> -                  <spanx style="verb">string</spanx>
                </t>
                <t>
                  <spanx style="strong">country</spanx> -                  <spanx style="verb">string</spanx>
                </t>
                <t>
                  <spanx style="strong">postalCode</spanx> -                  <spanx style="verb">string</spanx>
                </t>
              </list>
            </t>
          </list>
        </t>
        <section anchor="vendors_get" title="Vendor Listing">
          <t>
            <spanx style="strong">GET /vendors</spanx>
          </t>
          <t>Returns a listing of vendors.</t>
          <section title="Parameters">
            <t>
              <list>
                <t>
                  <xref target="paging">Paging Parameters</xref>
                </t>
              </list>
            </t>
          </section>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"vendors": [
        {
            "url": "/acvp/v1/vendors/1",
            "name": "Cisco",
            "website": "www.cisco.com",
            "contacts": [{
                "name": "John Doe",
                "email": "johndoe@cisco.com"
            }]
        },
        {
            "url": "/acvp/v1/vendors/2",
            "name": "Acme, LLC",
            "website": "www.acme.acme",
            "emails" : [ "inquiry@acme.acme" ],
            "contacts": [{
                "name": "Jane Smith",
                "emails": ["jane.smith@acme.acme"],
                "phoneNumbers" : [
                    {
                        "name": "555-555-0001",
                        "type" : "fax"
                    }, {
                        "name": "555-555-0002",
                        "type" : "voice"
                    }
                ],
                "address" : {
                    "street" : "123 Main Street",
                    "locality" : "Any Town",
                    "region" : "AnyState",
                    "country" : "USA",
                    "postalCode" : "123456"
                }
            }]
        }
    ]}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="vendors_post" title="Create a New Vendor">
          <t>
            <spanx style="strong">POST /vendors</spanx>
          </t>
          <t>Request the creation of a new Vendor.</t>
          <section title="Request">
            <t>
              <spanx style="verb">name</spanx> is required and all other properties are OPTIONAL.
              <spanx style="verb">url</spanx> is not allowed.
            </t>
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
      "name": "Acme, LLC",
      "website": "www.acme.acme",
      "emails" : [ "inquiry@acme.acme" ],
      "contacts": [{
          "name": "Jane Smith",
          "emails": ["jane.smith@acme.acme"],
          "phoneNumbers" : [
              {
                  "name": "555-555-0001",
                  "type" : "fax"
              }, {
                  "name": "555-555-0002",
                  "type" : "voice"
              }
          ],
          "address" : {
              "street" : "123 Main Street",
              "locality" : "Any Town",
              "region" : "AnyState",
              "country" : "USA",
              "postalCode" : "123456"
          }
      }]
    }
]
           ]]>              </artwork>
            </figure>
          </section>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"url": "/acvp/v1/vendors/2"}
]
         ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="vendor_get" title="Vendor Information">
          <t>
            <spanx style="strong">GET /vendors/{vendorId}</spanx>
          </t>
          <t>Retrieve Information for a specific vendor</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "url": "/acvp/v1/vendors/2",
        "name": "Acme, LLC",
        "website": "www.acme.acme",
        "emails" : [ "inquiry@acme.acme" ],
        "contacts": [{
            "name": "Jane Smith",
            "emails": ["jane.smith@acme.acme"],
            "phoneNumbers" : [
                {
                    "name": "555-555-0001",
                    "type" : "fax"
                }, {
                    "name": "555-555-0002",
                    "type" : "voice"
                }
            ],
            "address" : {
                "street" : "123 Main Street",
                "locality" : "Any Town",
                "region" : "AnyState",
                "country" : "USA",
                "postalCode" : "123456"
            }
        }]
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="vendor_put" title="Update an existing Vendor">
          <t>
            <spanx style="strong">PUT /vendors/{vendorId}</spanx>
          </t>
          <t>Update a vendor</t>
          <t>The            <spanx style="verb">url</spanx> property is not updateable.
          </t>
          <section title="Request">
            <t>Can be any subset of the updateable properties. If a property is not included its
              value is not changed. A              <spanx style="verb">null</spanx> value for a property
              indicates the value should be removed.
            </t>
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "name": "Acme, LLC",
        "website": "www.acme.acme",
        "emails" : [ "inquiry@acme.acme" ],
        "contacts": [{
            "name": "Jane Smith",
            "emails": ["jane.smith@acme.acme"],
            "phoneNumbers" : [
                {
                    "name": "555-555-0001",
                    "type" : "fax"
                }, {
                    "name": "555-555-0002",
                    "type" : "voice"
                }
            ],
            "address" : {
                "street" : "123 Main Street",
                "locality" : "Any Town",
                "region" : "AnyState",
                "country" : "USA",
                "postalCode" : "123456"
            }
        }]
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="vendor_delete" title="Remove a Vendor">
          <t>
            <spanx style="strong">DELETE /vendors/{vendorId}</spanx>
          </t>
          <t>Delete a specific vendor.</t>
          <t>The server is not required to remove the resource but MUST return an error if the
            resource will not be removed.</t>
        </section>
      </section>

      <section anchor="modules" title="Modules">
        <t>The available properties for module resources are:          <list>
            <t>
              <spanx style="strong">url</spanx> -              <spanx style="verb">string</spanx>, identifier
              for this resource
            </t>
            <t>
              <spanx style="strong">name</spanx> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="strong">version</spanx> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="strong">type</spanx> -              <spanx style="verb">string</spanx>, valid values are:              <list>
                <t>
                  <spanx style="verb">software</spanx> - software-based modules
                </t>
                <t>
                  <spanx style="verb">hardware</spanx> - hardware-based modules
                </t>
              </list>
            </t>
            <t>
              <spanx style="strong">vendorUrl</spanx> -              <spanx style="verb">string</spanx>,
              identifier for a              <xref target="vendors">vendor resource</xref>
            </t>
            <t>
              <spanx style="strong">implementationDescription</spanx> -
              <spanx style="verb">string</spanx>, a description of the implementation
            </t>
          </list>
        </t>

        <section anchor="modules_get" title="List Modules">
          <t>
            <spanx style="strong">GET /modules</spanx>
          </t>
          <t>Returns a List of available modules.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"modules": [
        {
            "url": "/acvp/v1/modules/1",
            "name": "ACME ACV Test Module",
            "version": "1.0",
            "type": "Software",
            "vendorUrl": "/acvp/v1/vendors/2",
            "implementationDescription" : "ACME test module."
        },
        {
            "url": "/acvp/v1/modules/2",
            "name": "ACME ACV Test Module",
            "version": "2.0",
            "type": "Software",
            "vendorUrl": "/acvp/v1/vendors/2",
            "implementationDescription" : "ACME test module with more features."
        }
    ]}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="modules_post" title="Register a new Module">
          <t>
            <spanx style="strong">POST /modules</spanx>
          </t>
          <t>Register a new module.</t>
          <section title="Request">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "name": "ACME ACV Test Module",
        "version": "3.0",
        "type": "Software",
        "vendorUrl": "/acvp/v1/vendors/2",
        "implementationDescription" : "ACME test module with more bells and whistles."
    }
]
           ]]>              </artwork>
            </figure>
          </section>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"url": "/acvp/v1/modules/5"}
]
         ]]>              </artwork>
            </figure>
          </section>
        </section>

        <section anchor="module_get" title="Retrieve information for a Module">
          <t>
            <spanx style="strong">GET /modules/{moduleId}</spanx>
          </t>
          <t>Returns information about a specific module.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "url": "/acvp/v1/modules/2",
        "name": "ACME ACV Test Module",
        "version": "2.0",
        "type": "Software",
        "vendorUrl": "/acvp/v1/vendors/2",
        "implementationDescription": "ACME test module with more features."
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="module_put" title="Update a Module">
          <t>
            <spanx style="strong">PUT /modules/{moduleId}</spanx>
          </t>
          <t>Update an existing module.</t>
          <t>It may not be possible to update all properties of a module once the module has been
            associated with a test session.</t>
          <section title="Request">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "implementationDescription" : "ACME test module with more bells and whistles."
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="module_delete" title="Delete a Module">
          <t>
            <spanx style="strong">DELETE /modules/{moduleId}</spanx>
          </t>
          <t>Delete a module or mark as no longer in use. (Optional)</t>
        </section>
      </section>

      <section anchor="oes" title="Operational Environments (OEs)">
        <t>The available properties for operational environment resources are:          <list>
            <t>
              <spanx style="strong">url</spanx> -              <spanx style="verb">string</spanx>, identifier
              for this resource
            </t>
            <t>
              <spanx style="strong">name</spanx> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="strong">dependencyUrls</spanx> - an array of
              <spanx style="verb">string</spanx>s which identify the              <xref target="dependencies">dependencies</xref> which comprise this OE.
            </t>
          </list>
        </t>
        <section anchor="oes_get" title="List Operational Environments">
          <t>
            <spanx style="strong">GET /oes</spanx>
          </t>
          <t>Returns a List of available operational environments.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"oes": [
        {
            "url": "/acvp/v1/oes/1",
            "name": "Windows 10 on Intel Xeon 5100 Series Processor",
            "dependencyUrls": [ "/acvp/v1/dependencies/1", "/acvp/v1/dependencies/2"]
        },
        {
            "url": "/acvp/v1/oes/2",
            "name": "Windows 10 on AMD 6272 Opteron Processor",
            "dependencyUrls": [ "/acvp/v1/dependencies/1", "/acvp/v1/dependencies/3"]
        }
    ]}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="oes_post" title="Create a new Operational Environment">
          <t>
            <spanx style="strong">POST /oes</spanx>
          </t>
          <t>Create a new operational environment.</t>
          <section title="Request">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "name": "Ubuntu Linux 3.1 on AMD 6272 Opteron Processor with Acme package installed",
        "dependencyUrls": [
            "/acvp/v1/dependencies/4",
            "/acvp/v1/dependencies/5",
            "/acvp/v1/dependencies/7"
        ]
    }
]
           ]]>              </artwork>
            </figure>
          </section>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"url": "/acvp/v1/oes/20"}
]
         ]]>              </artwork>
            </figure>
          </section>
        </section>

        <section anchor="oe_get" title="Retrieve information for an Operational Environment">
          <t>
            <spanx style="strong">GET /oes/{oeId}</spanx>
          </t>
          <t>Returns information about a specific operational environment.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "url": "/acvp/v1/oes/1",
        "name": "Windows 10 on Intel Xeon 5100 Series Processor",
        "dependencyUrls": [
            "/acvp/v1/dependencies/1",
            "/acvp/v1/dependencies/2"
        ]
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="oe_put" title="Update an Operational Environment">
          <t>
            <spanx style="strong">PUT /oes/{oeId}</spanx>
          </t>
          <t>Update an existing operational environment.</t>
          <t>It may not be possible to update all (or any) properties of an operational environment
            resource once the resource has been associated with a test session.</t>
          <section title="Request">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "name": "Windows 10 on Intel Xeon 5100 Series Processor",
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="oe_delete" title="Delete an Operational Environment">
          <t>
            <spanx style="strong">DELETE /oes/{oeId}</spanx>
          </t>
          <t>Delete an operational environment or mark as no longer in use. (Optional)</t>
        </section>
      </section>


      <section anchor="dependencies" title="Dependencies">
        <t>The available properties for dependency resources are:          <list>
            <t>
              <spanx style="strong">url</spanx> -              <spanx style="verb">string</spanx>, identifier
              for this resource
            </t>
            <t>
              <spanx style="strong">type</spanx> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="verb">{varies}</spanx> depending on the value of
              <spanx style="verb">type</spanx> as defined by the response of              <xref target="dependencies_properties_get"/>
            </t>
          </list>
        </t>
        <section anchor="dependencies_get" title="List Dependencies">
          <t>
            <spanx style="strong">GET /dependencies</spanx>
          </t>
          <t>Returns a List of available dependencies.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"dependencies": [
        {
            "type": "software",
            "name": "Linux 3.1",
            "cpe": "cpe-2.3:o:ubuntu:linux:3.1"
        },
        {
            "type": "processor",
            "manufacturer": "Intel",
            "family": "ARK",
            "name": "Xeon",
            "series": "5100",
            "features": ["rdrand"]
        }
    ]}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="dependencies_post" title="Register a new Dependency">
          <t>
            <spanx style="strong">POST /dependencies</spanx>
          </t>
          <t>Register a new dependency.</t>
          <section title="Request">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "type": "software",
        "name": "Linux 3.1",
        "cpe": "cpe-2.3:o:ubuntu:linux:3.1"
    }
]
           ]]>              </artwork>
            </figure>
          </section>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"url": "/acvp/v1/dependencies/7"}
]
         ]]>              </artwork>
            </figure>
          </section>
        </section>

        <section anchor="dependencies_properties_get" title="List Dependency Properties">
          <t>
            <spanx style="strong">GET /dependencies/properties</spanx>
          </t>
          <t>Returns the list of available dependency properties.</t>
          <t>An array of property objects is returned with the following properties:            <list>
              <t>
                <spanx style="strong">name</spanx> -                <spanx style="verb">string</spanx>
              </t>
              <t>
                <spanx style="strong">dataType</spanx> -                <spanx style="verb">string</spanx>
              </t>
              <t>
                <spanx style="strong">validTypes</spanx> - an array of
                <spanx style="verb">string</spanx>s where each element corresponds to a dependency
                type value that this property may be used with.
              </t>
              <t>
                <spanx style="strong">description</spanx> -                <spanx style="verb">string</spanx>
              </t>
            </list>
          </t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"properties": [
        {
            "name": "name",
            "dataType": "string",
            "validTypes": [
                "software",
                "processor"
            ],
            "description": "The name of the dependency."
        },
        {
            "name": "swid",
            "dataType": "string",
            "validTypes": ["software"],
            "description": "A Software identification (SWID) tag as described in ISO/IEC 19770-2:2015. NIST IR 8060, https://csrc.nist.gov/publications/detail/nistir/8060/final, provides guidance on creating and maintaining SWID tags."
        },
        {
            "name": "cpe",
            "dataType": "string",
            "validTypes": [
                "software",
                "processor"
            ],
            "description": "A Common Platform Enumeration (CPE) formatted name according to Version 2.3 of the CPE Naming Specification found in NISTIR 7695, https://csrc.nist.gov/publications/detail/nistir/7695/final."
        },
        {
            "name": "manufacturer",
            "dataType": "string",
            "validTypes": ["processor"],
            "description": "The name of the manufacturer of the processor dependency."
        },
        {
            "name": "family",
            "dataType": "string",
            "validTypes": ["processor"],
            "description": "The name of the family of the processor."
        },
        {
            "name": "series",
            "dataType": "string",
            "validTypes": ["processor"],
            "description": "The name of the series of the processor."
        }
    ]}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>

        <section anchor="dependency_get" title="Retrieve information for a Dependency">
          <t>
            <spanx style="strong">GET /dependencies/{dependencyId}</spanx>
          </t>
          <t>Returns information about a specific dependency.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "type": "software",
        "name": "Linux 3.1",
        "cpe": "cpe-2.3:o:ubuntu:linux:3.1"
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="dependency_put" title="Update a Dependency">
          <t>
            <spanx style="strong">PUT /dependencies/{dependencyId}</spanx>
          </t>
          <t>Update an existing dependency.</t>
          <t>It may not be possible to update all (or any) properties of a dependency resource once
            the resource has been associated with an operational environment.</t>
          <section title="Request">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "name": "Linux 3.1.0",
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="dependency_delete" title="Delete a Dependency">
          <t>
            <spanx style="strong">DELETE /dependencies/{dependencyId}</spanx>
          </t>
          <t>Delete a dependency or mark as no longer in use. (Optional)</t>
        </section>
      </section>

      <section anchor="algorithms" title="Algorithms">
        <t>The Algorithm resources are informational only.          <cref>Do we want to provide guidance on
            standardizing the output?</cref>
        </t>
        <section anchor="algorithms_get" title="Algorithms Listing">
          <t>
            <spanx style="strong">GET /algorithms</spanx>
          </t>
          <t>Returns a list of available Algorithms on the server.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"algorithms": [
        {
            "url": "/acvp/v1/algorithms/2",
            "name": "AES",
            "mode": "GCM",
            "versions": [
                <acvp-version>,
                <acvp-version>
            ]
        },
        {
            "url": "/acvp/v1/algorithms/3",
            "name": "AES",
            "mode": "ECB",
            "versions": [
                <acvp-version>
            ]
        }
    ]}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>

        <section anchor="algorithm_get" title="Algorithm Information">
          <t>
            <spanx style="strong">GET /algorithms/{algorithmId}</spanx>
          </t>
          <t>Retrieve Information for about a specific algorithm.</t>
          <section title="Response">
            <t>Response may vary from server depending on internal representation.              <cref>Is this ok?
                Or do we want to standardize?</cref>
            </t>
          </section>
        </section>
      </section>

      <section anchor="testSessions" title="Test Sessions">
        <t>The available properties for test session resources are:          <list>
            <t>
              <spanx style="strong">url</spanx> -              <spanx style="verb">string</spanx>, identifier
              for this resource
            </t>
            <t>
              <spanx style="strong">acvpVersion</spanx> -              <spanx style="verb">string</spanx>,
              version of ACV protocol used to created the test session.
            </t>
            <t>
              <spanx style="strong">createdOn</spanx> -              <xref target="dateType">date</xref>
            </t>
            <t>
              <spanx style="strong">expiresOn</spanx> -              <xref target="dateType">date</xref>
            </t>
            <t>
              <spanx style="strong">encryptAtRest</spanx> -              <spanx style="verb">boolean</spanx>
            </t>
            <t>
              <spanx style="strong">vectorSetUrls</spanx>
              <cref>should this instead be an array or should there be two different
                properties?</cref> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="strong">publishable</spanx>
              <cref>need a better name</cref> -
              <spanx style="verb">boolean</spanx>, indicates whether this test session may be
              submitted for validation 
            </t>
            <t>
              <spanx style="strong">passed</spanx>
              <cref>disposition for consistency?</cref>
              <spanx style="verb">boolean</spanx>, indicates whether all of the vector set tests
              have passed 
            </t>
            <t>
              <spanx style="strong">isSample</spanx> -              <spanx style="verb">boolean</spanx>, if true
              <xref target="vectorSet_expected_get">
                /testSessions/{testSessionId}/vectorSets/{vectorSetId}/expected</xref> will return
              expected result values. As well, Test Vector Sets MAY contain fewer Test Cases for quicker generation and verification.
            </t>
            <t>
              <spanx style="strong">production</spanx> -              <spanx style="verb">boolean</spanx>,
              indicates that the test session excludes tests that require intermediate values; this
              may cause the test session to have a              <spanx style="verb">publishable</spanx> value of
              <spanx style="verb">false</spanx>.
            </t>
          </list>
        </t>
        <section anchor="testSessions_get" title="Test Session Listing (Current User)">
          <t>
            <spanx style="strong">GET /testSessions</spanx>
          </t>
          <t>Returns a list of Test Sessions for the current user.</t>
          <t>This is an OPTIONAL operation.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"testSessions": [{
        "url": "/acvp/v1/testSessions/2",
        "acvpVersion": <acvp-version>,
        "createdOn": "2018-05-31T12:03:43Z",
        "expiresOn": "2018-06-30T12:03:43Z",
        "encryptAtRest": false,
        "vectorSetsUrl": "/acvp/v1/testSessions/2/vectorSets",
        "publishable": false,
        "passed": true,
        "production" : false,
        "isSample": true
    }]}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="testSessions_post" title="Create a New Test Session">
          <t>
            <spanx style="strong">POST /testSessions</spanx>
          </t>
          <t>Create a new Test Session.</t>
          <section title="Request">
            <t>
              <spanx style="verb">algorithms</spanx> is an array of algorithm objects. Each
              algorithm object has the following available properties:              <list>
                <t>
                  <spanx style="strong">algorithm</spanx> -                  <spanx style="verb">string</spanx>,
                  required
                </t>
              </list> Additional properties for each algorithm are based on the algorithm definition
              available in each sub-specification. 
            </t>
            <t>If not provided              <spanx style="verb">isSample</spanx>,
              <spanx style="verb">production</spanx> and              <spanx style="verb">encryptAtRest</spanx>
              default to              <spanx style="verb">false</spanx>.
            </t>
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
    "isSample" : true,
    "algorithms": [{
        "algorithm": "TEST_ALGO_1",
        "property1": true,
        "property2": ["operation1", "operation2"]
    }]}
]
           ]]>              </artwork>
            </figure>
          </section>
          <section title="Response">
            <t>
              <spanx style="verb">accessToken</spanx> is a              <xref target="RFC7519">JWT Token</xref>
              which MUST be supplied as described in              <xref target="jwtToken"/>
 in order to access
              the Test Session.</t>
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "url": "/acvp/v1/testSessions/2",
        "acvpVersion": <acvp-version>,
        "createdOn": "2018-05-31T12:03:43Z",
        "expiresOn": "2018-06-30T12:03:43Z",
        "encryptAtRest": false,
        "vectorSetsUrl": "/acvp/v1/testSessions/2/vectorSets",
        "publishable": false,
        "passed": true,
        "production": false,
        "isSample": true,
        "accessToken" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiAibmlzdC5vcmciLCJleHAiOiAxNDYyOTg0OTUzLCJjb21wYW55IjogIkNpc2NvIiwianRpIjo0NTh9.zDhd3WrLcb1Xf5-VKOX6k-G70mACbi1tdir8qHAMPyQ"
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="testSession_get" title="Test Session Information">
          <t>
            <spanx style="strong">GET /testSessions/{testSessionId}</spanx>
          </t>
          <t>Returns information about the specific Test Session</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "url": "/acvp/v1/testSessions/2",
        "acvpVersion": <acvp-version>,
        "createdOn": "2018-05-31T12:03:43Z",
        "expiresOn": "2018-06-30T12:03:43Z",
        "encryptAtRest": false,
        "vectorSetsUrl": "/acvp/v1/testSessions/2/vectorSets",
        "publishable": false,
        "passed": true,
        "production": false,
        "isSample": true
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="testSession_put" title="Submit For Validation">
          <t>
            <spanx style="strong">PUT /testSessions/{testSessionId}</spanx>
          </t>
          <t>Certify the Test Session for validation.</t>
          <t>Associates all of the testing information with the test session. The test session MUST
            be have both            <spanx style="verb">publishable</spanx> and
            <spanx style="verb">passed</spanx> set to            <spanx style="verb">true</spanx>.
          </t>
          <section title="Request">
            <t>Available properties:              <list>
                <t>
                  <spanx style="strong">moduleUrl</spanx> -                  <spanx style="verb">string</spanx>
                </t>
                <t>
                  <spanx style="strong">oeUrl</spanx> -                  <spanx style="verb">string</spanx>
                </t>
                <t>
                  <spanx style="strong">signature</spanx> - a signature object,                  <cref>no idea what
                    should go inside the signature block really. sigature algorithm, text signed,
                    certificate used?</cref>
                  <list>
                    <t>
                      <spanx style="strong">algorithm</spanx> -
                      <spanx style="verb">string</spanx>
                    </t>
                    <t>
                      <spanx style="strong">certificate</spanx> -
                      <spanx style="verb">string</spanx>
                    </t>
                    <t>
                      <spanx style="strong">digitalSignature</spanx> -
                      <spanx style="verb">string</spanx>
                    </t>
                  </list>
                </t>
                <t>
                  <spanx style="strong">algorithmPrerequisites</spanx> - array of algorithm
                  prerequiste objects, optional, for any algorithm that has a prerequisite that was
                  not included in testing, the prerequisite MUST be provided by adding an element to
                  this array                  <list>
                    <t>
                      <spanx style="strong">algorithm</spanx> -                      <spanx style="verb">string</spanx>,
                      name of the algorithm
                    </t>
                    <t>
                      <spanx style="strong">mode</spanx> -                      <spanx style="verb">string</spanx>, mode
                      of the algorithm, optional, not all algorithms have a mode
                    </t>
                    <t>
                      <spanx style="strong">prerequisites</spanx> -                      <cref>this needs some
                        additional work</cref>
                      <spanx style="verb">string</spanx>, array of prerequiste objects                      <list>
                        <t>
                          <spanx style="strong">algorithm</spanx> -
                          <spanx style="verb">string</spanx>, required
                        </t>
                        <t>
                          <spanx style="strong">validationId</spanx> -
                          <spanx style="verb">string</spanx>, required
                        </t>
                      </list>
                    </t>
                  </list>
                </t>
              </list>
            </t>
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "moduleUrl": "/acvp/v1/modules/20",
        "oeUrl": "/acvp/v1/oes/60",
        "algorithmPrerequisites": [{
            "algorithm": "TEST_ALGO_1",
            "prerequisites": [
                {
                    "algorithm": "TEST_ALGO_0",
                    "validationId": "123456"
                },
                {
                    "algorithm": "TEST_ALGO_0.1",
                    "validationId": "123456"
                }
            ]
        }],
        "signature": {
            "algorithm": "SHA256RSA",
            "certificate": "{base64encodedcertificate}",
            "digitalSignature": "{base64encodedsignature}"
        }
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="testSession_delete" title="Cancel Test Session">
          <t>
            <spanx style="strong">DELETE /testSessions/{testSessionId}</spanx>
          </t>
          <t>Delete a test session.</t>
          <t>Marks a test session as being cancelled and may be deleted by the server. Further
            operations with the test session resource may return 404 HTTP Status.</t>
        </section>
        <section anchor="testSession_results_get" title="Request Validation Results">
          <t>
            <spanx style="strong">GET /testSessions/{testSessionId}/results</spanx>
          </t>
          <t>Request Validation Results for a Test Session</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "passed": false,
        "results": [
            {
                "vectorSetUrl": "/acvp/v1/testSessions/2/vectorSets/1",
                "status": "incomplete"
            },
            {
                "vectorSetUrl": "/acvp/v1/testSessions/2/vectorSets/2",
                "status": "passed"
            }
        ]
    }
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
      </section>

      <section anchor="vectorSet" title="Vector Sets">
        <t>The REQUIRED properties for vector set resources are:          <list>
            <t>
              <spanx style="strong">url</spanx> -              <spanx style="verb">string</spanx>, identifier
              for this resource
            </t>
            <t>
              <spanx style="strong">vsId</spanx> -              <spanx style="verb">number</spanx>
            </t>
            <t>
              <spanx style="strong">algorithm</spanx> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="strong">mode</spanx> -              <spanx style="verb">string</spanx>
            </t>
            <t>
              <spanx style="strong">testGroups</spanx> - array of test group objects,              <list>
                <t>
                  <spanx style="verb">{varies}</spanx> - based on the values of
                  <spanx style="verb">algorithm</spanx> and                  <spanx style="verb">mode</spanx> there
                  are zero or more test group properties. 
                </t>
                <t>
                  <spanx style="strong">testType</spanx> - string defined in algorithm extensions outlining the procedure
                  to complete the corresponding test cases.
                  <spanx style="strong">tgId</spanx> - <spanx style="verb">number</spanx>
                  <spanx style="strong">tests</spanx> - array of test objects,                  <list>
                    <t>
                      <spanx style="strong">tcId</spanx> -                      <spanx style="verb">number</spanx>
                    </t>
                    <t>
                      <spanx style="verb">{varies}</spanx> - based on the values of
                      <spanx style="verb">algorithm</spanx> and                      <spanx style="verb">mode</spanx>
                      there are zero or more test properties. 
                    </t>
                  </list>
                </t>
              </list>
            </t>
          </list>
        </t>
        <section anchor="vectorSets_get" title="Vectors Set Listing">
          <t>
            <spanx style="strong">GET /testSessions/{testSessionId}/vectorSets</spanx>
          </t>
          <t>Returns a list of Vector Sets for the specific Test Session.</t>
          <t>The property returned is:            <list>
              <t>
                <spanx style="strong">vectorSetUrls</spanx> - array of
                <spanx style="verb">string</spanx>s
              </t>
            </list>
          </t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"vectorSetUrls": [
        "/acvp/v1/testSessions/2/vectorSets/1",
        "/acvp/v1/testSessions/2/vectorSets/2"
    ]}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="vectorSet_get" title="Vector Set Download">
          <t>
            <spanx style="strong">GET /testSessions/{testSessionId}/vectorSets/{vectorSetId}</spanx>
          </t>
          <t>Vector Set download request.</t>
          <t>The server will respond with the vector set associated with the vsId for the client to
            process. The test group content contained in the response will vary depending on the
            specific sub-specification of the algorithm and testType being tested.</t>
          <section title="Response">
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "vsId": 1,
        "algorithm": "TEST_ALGO_1",
        "testGroups": [
            {
                "tgId": 1,
                "testGroupProperty1": 1,
                "testType": "type1",
                "tests": [
                    {
                        "tcId": 1,
                        "testCaseProperty1": 1,
                        "testCaseProperty2": "2"
                    },
                    {
                        "tcId": 2,
                        "testCaseProperty1": 3,
                        "testCaseProperty2": "4"
                    }
                    ... additional tests ...
                ]
            },
            ... additional test groups ...
            {
                "tgId": 3,
                "testGroupProperty1": 2,
                "testType": "type2",
                "tests": [{
                    "tcId": 2139,
                    "testCaseProperty3": 10
                }]
            }
            ... additional test groups ...
        ]
    }
]
           ]]>              </artwork>
            </figure>
            <t>If the server did not have enough time to generate the vector set for a given test
              session, the server may reply:</t>
            <figure align="center">
              <artwork align="left"><![CDATA[
[
  { "acvVersion": <acvp-version> },
  { "vsId": 1,
    "retry" : 30
  }
]
           ]]>              </artwork>
            </figure>
            <t>Where:              <list>
                <t>
                  <spanx style="strong">retry</spanx> - represents the number of seconds for the
                  client to wait before retrying the request.
                </t>
              </list>
            </t>
            <t>The server may set the              <spanx style="verb">retry</spanx> value based on the current
              server load and expected processing time to generate the vector set.
            </t>
          </section>
        </section>
        <section anchor="vectorSet_delete" title="Cancel Testing of a Vector Set">
          <t>
            <spanx style="strong">DELETE /testSessions/{testSessionId}/vectorSets/{vectorSetId}</spanx>
          </t>
          <t>Cancel testing for a specific Vector Set.</t>
          <t>There may be cases where a particular vector set may not be cancelled and the entire
            Test Session will need to be cancelled instead.</t>
        </section>
        <section anchor="vectorSet_results_get" title="Request Validation Results">
          <t>
            <spanx style="strong">GET /testSessions/{testSessionId}/vectorSets/{vectorSetId}/results</spanx>
          </t>
          <t>Request Validation Results for a Vector Set.</t>
          <section title="Response">
            <t>The client will send this request to learn the validation results for an individual
              vector set. Properties are:              <list>
                <t>
                  <spanx style="strong">vsId</spanx> -                  <spanx style="verb">number</spanx>
                </t>
                <t>
                  <spanx style="strong">disposition</spanx> -                  <spanx style="verb">string</spanx>,
                  the overall result for the vector set with:                  <list>
                    <t>
                      <spanx style="verb">fail</spanx> - indicates at least one test case has
                      failed.
                    </t>
                    <t>
                      <spanx style="verb">unreceived</spanx> - indicates the server has not
                      received responses from the client for all the test cases.
                    </t>
                    <t>
                      <spanx style="verb">incomplete</spanx> - indicates not all tests have been
                      processed by the server, however none have failed thus far.
                    </t>
                    <t>
                      <spanx style="verb">expired</spanx> - indicates not all the test case
                      responses were received from the client prior to expiry.
                    </t>
                    <t>
                      <spanx style="verb">passed</spanx> - indicates all test cases have been
                      processed by the server and have passed.
                    </t>
                  </list>
                </t>
                <t>
                  <spanx style="strong">tests</spanx> - array of test result objects,                  <list>
                    <t>
                      <spanx style="strong">tcId</spanx> -                      <spanx style="verb">number</spanx>
                    </t>
                    <t>
                      <spanx style="strong">result</spanx> -                      <spanx style="verb">string</spanx>,
                      the result for a test case with:                      <list>
                        <t>
                          <spanx style="verb">fail</spanx> - indicates the test case has
                          failed.
                        </t>
                        <t>
                          <spanx style="verb">unreceived</spanx> - indicates the server has not
                          received a response from the client for the test case.
                        </t>
                        <t>
                          <spanx style="verb">incomplete</spanx> - indicates the server has not
                          processed the test case.
                        </t>
                        <t>
                          <spanx style="verb">expired</spanx> - indicates the client did not send
                          the test case response to the server prior to expiry.
                        </t>
                        <t>
                          <spanx style="verb">passed</spanx> - indicates the test case passed.
                        </t>
                      </list>
                      <spanx style="strong">reason</spanx> -                      <spanx style="verb">number</spanx>,
                      provides additional detail in case of a                      <spanx style="verb">failed</spanx>
                      <spanx style="verb">result</spanx> value.
                    </t>
                  </list>
                </t>
              </list>
            </t>
            <figure align="center">
              <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {"results": {
        "vsId": 1437,
        "disposition": "incomplete",
        "tests": [
            {
                "tcId": 12340,
                "result": "passed",
                "reason": ""
            },
            {
                "tcId": 12341,
                "result": "incomplete",
                "reason": ""
            },
            {
                "tcId": 12342,
                "result": "failed",
                "reason": "Algorithm reason XXX"
            }
        ]
    }}
]
           ]]>              </artwork>
            </figure>
          </section>
        </section>
        <section anchor="vectorSet_results_post" title="Submit Results">
          <t>
            <spanx style="strong">POST /testSessions/{testSessionId}/vectorSets/{vectorSetId}/results</spanx>
          </t>
          <t>Initial Submission of Vector Set Test Results.</t>
          <section title="Request">
            <t>The client will send this request to submit the test results for an individual vector
              set. Similar to the vector set download the format will vary depending on the specific
              sub-specification of the algorithm and testType being tested.</t>
            <figure align="center">
              <artwork align="left"><![CDATA[
[
  {"acvVersion": <acvp-version>},
  {
    "vsId": 1437,
    "testGroups": [{
      "tgId": 1,
      "tests": [{
          "tcId": 12340,
          "testCaseProperty1": "ABCD",
          "testCaseProperty2": "1234"
        },
        {
          "tcId": 12341,
          "testCaseProperty1": "5678",
          "testCaseProperty2": "FEDC"
        }, ...
      ]
    }, ...
    ]
  }
]
           ]]>              </artwork>
            </figure>
          </section>
          <section title="Response">
            <t>No content response. Standard HTTP status codes will indicate success or failure of
              the submission, but do not indicated the disposition of the tests.</t>
          </section>
        </section>
        <section anchor="vectorSet_results_put" title="Update Results Submission">
          <t>
            <spanx style="strong">PUT /testSessions/{testSessionId}/vectorSets/{vectorSetId}/results</spanx>
          </t>
          <t>Update Vector Set Test Results Submission.</t>
          <t> When one or more test cases fails, the client will need to correct the issue in the
            crypto module and send the responses again. The resending of responses for failed test
            cases will occur for an entire vector set. Therefore, even if only a single test case in
            the vector set failed, the client will need to download, process, and upload responses
            to the server for the entire vector set (presumably after the problem has been corrected
            in the implementation). The resending of vector set responses must occur prior to
            expiry.</t>
          <section title="Request">
            <t>The request content is identical to the request content described in              <xref target="vectorSet_results_post"/>
.</t>
          </section>
        </section>
        <section anchor="vectorSet_expected_get" title="Retrieve Expected Results">
          <t>
            <spanx style="strong">GET /testSessions/{testSessionId}/vectorSets/{vectorSetId}/expected</spanx>
          </t>
          <t>Expected Test Results.</t>
          <section title="Response">
            <t>The response is identical to the request content described in              <xref target="vectorSet_results_post"/>
.</t>
          </section>
        </section>
      </section>
    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <?rfc needLines="8" ?>

    <section title="Vector Set Expiration">
      <t>
        <cref>Vector Sets or Test Sessions? It would be far simpler if it was Test Session based
          rather than Vector Set based.</cref> Vector sets can expire. For example, in terms of a
        validation authority use, the vector sets are one-time use only. Old vector sets can never
        be reused to obtain a new validation certificate for an algorithm implementation or to
        update an existing certificate. Expiration is a server specific definition which depends on
        database costs, need for artifacts, etc. If the vector set has expired, the server will
        reply with an expired response when the client attempts to download the vector set: 
      </t>
      <figure align="center">
        <artwork align="left"><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "vsId": <vs-id>,
        "status": "expired"
    }
]
           ]]>        </artwork>
      </figure>

      <t>The ACVP protocol requires server implementations to generate test values and retain the
        data while the ACVP client processes and returns the results. Some crypto modules
        implementing the client-side ACVP protocol may not return results immediately. The ACVP
        protocol design implies the server must retain the test values to verify the client test
        responses at some time in the future. However, some test vector sets are fairly large, which
        could place significant storage requirements on ACVP server implementations. To alleviate
        long term storage requirements, ACVP allows for an expiration timestamp to be set when a
        test vector set is generated by the server.</t>
      <t>The vector set expiration timestamp must be included by the server in the vector set when
        the client downloads the vector set. The server may change the expiration timestamp of a
        previously issued vector set to extend its lifetime subject to server policy. The expiration
        timestamp must be in the 'expiry' JSON value, which is included in the JSON encoded vector
        set. The expiry JSON value will be a string value of the UTC timestamp using form
        "YYYY-MM-DD HH:MM:SS". The following figure shows a partial JSON encoded vector set that
        contains the expiry value.</t>

      <figure align="center">
        <artwork><![CDATA[
[
    {"acvVersion": <acvp-version>},
    {
        "vsId": 1437,
        "expiry": "2018-12-31 23:59:59",
        "algorithm": "TEST_ALGO_1",
        "testGroups": [
            {
                "tgId": 1,
                "testGroupProperty1": 1,
                "testType": "type1",
                "tests": [
                    {
                        "tcId": 1,
                        "testCaseProperty1": 1,
                        "testCaseProperty2": "2"
                    },
                    {
                        "tcId": 2,
                        "testCaseProperty1": 3,
                        "testCaseProperty2": "4"
                    },
            .
            .
            .
            <remainder of vector set omitted from figure>
            .
            .
            .
            ]
        }]
    }
]
        ]]></artwork>
      </figure>
    </section>

    <section title="Paging Parameters" anchor="paging">
      <t>Some        <cref>should we instead add a property to indicate that paging was enabled to allow
          implementations to decide?</cref> resources require paging in order to avoid returning
        large amounts of data. To faciliate paging the following Query parameters SHOULD be allowed
        on resources where paging is necessary.        <list>
          <t>
            <spanx style="verb">limit</spanx> - the number of entries to return
          </t>
          <t>
            <spanx style="verb">offset</spanx> - the offset into the list of entries
          </t>
        </list>
      </t>
      <t>The response will indicate the offset and the total count using
        <spanx style="verb">offset</spanx> and        <spanx style="verb">total</spanx> properties.
      </t>
    </section>

    <section title="Error Codes">
      <t>Errors will follow HTTP[S] numbering scheme. In addition errors as well as 200 messages may
        carry JSON encoded information that describes in detail the error and any associated
        troubleshooting information. Examples of client and server error messages are in
        Appendix B.</t>
    </section>

    <section title="Algorithm Test Extensions">
      <t>ACVP is intended to be an extensible protocol that supports testing of a large number of cryptographic 
        algorithms from several different classes defined by the community. See Appendix C for details.
        All algorithm identifiers intended for public use SHALL be documented by IANA in the ACVP IANA Registry <xref target="acvp-iana"/>.</t>
    </section>

    <section title="Custom Specification Objects">
      <section title="Date" anchor="dateType">
        <t>A date type is a time          <spanx style="verb">string</spanx> formatted according to the rules
          of          <xref target="RFC3339">RFC 3339</xref>; all date/times must use UTC time denoted by 'Z'
          suffix with no local timezone adjustment. Example is
          <spanx style="verb">2018-06-01T20:10:33Z</spanx>
        </t>
      </section>
      <section title="BitString">
        <t> Bitstrings are used to communicate a string of bits between the ACVP server and IUT. </t>
        <section title="Endianness">
          <t> BitStrings SHALL be considered in big endian order, unless otherwise specified by the
            algorithm. </t>
          <t> The hex string "FA" (assuming all bits are considered) SHALL represent the bits
            11111010 (in MSb) or the value 250. </t>
        </section>
        <section title="Hex to Bitstring Parsing">
          <t> "valueLen" will be used as the example, but it can apply to any bit length
            registration/vector set/etc parameters. </t>
          <t> When a "value" is provided along with a "valueLen", the "valueLen" MUST be considered
            when parsing the hex string represented in "value", EXCEPT in empty bitstring cases,
            which MUST be represented as an empty string "". Parsing Hex strings into Bit strings is
            especially important for algorithms such as the SHA variations that may only include a
            portion of bits from the provided hex string. When only a portion of bits from a Hex
            string are considered, bits for use in the bitstring SHALL be taken from the most
            significant bits, meaning the lesser significant bits are the bits that are dropped. </t>
          <section title="Hex string parsing examples">
            <t>
              <list style="symbols">
                <t> valueLen: 8, value: "FA", SHALL be parsed as the bits 11111010, or the value
                  250. </t>
                <t> valueLen: 7, value: "FA", SHALL be parsed as the bits 1111101, or the value
                  125. </t>
                <t> valueLen: 5, value: "FA", SHALL be parsed as the bits 11111, or the value 31. </t>
                <t> valueLen: 3, value: "FA", SHALL be parsed as the bits 111, or the value 7. </t>
                <t> valueLen: 0, value: "", SHALL be interpreted as an empty bit string. </t>
              </list>
            </t>
          </section>
        </section>
      </section>
      <section title="Range">
        <t> The Range object can be used to convey a range of values. It contains its own set of
          properties made up of "min", "max", and "increment". </t>
        <section title="Range JSON examples">
          <t> A range object specifying a minimum of 0, a maximum of 8, with an increment of 1. This
            range object includes the values 1, 2, 3, 4, 5, 6, 7, and 8. </t>
          <figure align="center">
            <artwork>
              <![CDATA[
{"myRange": {
    "min": 1,
    "max": 8,
    "increment": 1
}}
          ]]>
            </artwork>
          </figure>
          <t> A range object specifying a minimum of 0, a maximum of 8, with an increment of 2. This
            range object includes the values 0, 2, 4, 6, and 8. </t>
          <figure align="center">
            <artwork>
              <![CDATA[
{"myRange": {
    "min": 0,
    "max": 8,
    "increment": 2
}}
          ]]>
            </artwork>
          </figure>
        </section>
      </section>
      <section title="Domain">
        <t> The Domain object can be used to specify a set of values similar to Range, albeit with
          more control. A domain can be made up of an array of objects, where those objects can be
          literal values, and/or Range objects. </t>
        <section title="Domain JSON examples">
          <t> Several sample domain objects that state 0, 8, 16, 32, 96, 128, 192, and 256 are valid
            values. </t>
          <figure align="center">
            <artwork>
              <![CDATA[
{"myDomain": [
    {
        "min": 0,
        "max": 16,
        "increment": 8
    },
    32,
    96,
    {
        "min": 128,
        "max": 256,
        "increment": 64
    }
]}
          ]]>
            </artwork>
          </figure>

          <figure align="center">
            <artwork>
              <![CDATA[
{"myDomain": [ 0, 8, 16,  32, 96,  128, 192, 256 ]}
          ]]>
            </artwork>
          </figure>
        </section>
        <section title="Additional Domain Information">
          <t> Because the Domain is an array of objects consisting of (potentially) both literals
            and ranges, algorithms that use an array of integers can be used interchangably with the
            Domain object. </t>
        </section>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section title="Other Considerations">
      <t>When an ACVP client is attached to a cryptographic module that is in use, access to ACVP
        MUST be controlled so that only an administrator or other authorized user can send and
        receive ACVP messages. This is because an attacker that has access to ACVP can potentially
        use it to probe for weaknesses in the cryptographic module.</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="CONTRIBUTORS" title="Contributors">
      <t>Original ACV Protocol created by David McGrew, Bill Hudson and Anthony Grieco of Cisco Systems. Additional contributions made by Sam Farthing, Ellie Daw and Philip Perricone from Cisco Systems and Christopher Celi and Russell Hammett from NIST. </t>
    </section>


  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      &RFC2119;
      &RFC3339;
      &RFC5246;
      &RFC7230;
      &RFC7519;

      </references>
    <references title="Informative References">
      <reference anchor="acvp-iana" target="https://github.com/usnistgov/ACVP/blob/master/artifacts/draft-vassilev-acvp-iana-00.txt">      
              <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>ACVP IANA Registry</title>

          <author initials="N." surname="NIST">
            <organization>NIST</organization>
          </author>
          <date day="1" month="February" year="2018"/>
        </front>
      </reference>

      <reference anchor="CMVP" target="https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program">      
              <!-- the following is the minimum to make xml2rfc happy -->
        <front>
          <title>Cryptographic Algorithm Validation Program</title>
          <author initials="A." surname="Vass">
            <organization>NIST</organization>
          </author>
          <date day="1" month="February" year="2018"/>
        </front>

      </reference>
    </references>

    <section anchor="app-reg-ex" title="JSON Formatting Guidelines">
      <t>All JSON keywords SHALL use lower camelCase format with no underscores or hyphens and use
        the following characters only a-z, A-Z, 0-9. Keywords SHALL abbreviate common words and
        phrases wherever possible for brevity.</t>

      <t>For example: password length - pwLen plain text length - ptLen </t>

      <t>Keywords SHOULD be chosen such that they are informative and brief, for example: </t>

      <t> [ { "acvVersion": acvp-version }, { "results" : { "disposition" : "incomplete" } } ] </t>
      <t>Metadata assigned to the keyword may use any format which best reflects the information
        being represented including hyphens, underscores alternating case, numbers, etc. However,
        brevity should be a major consideration, for example:</t>
      <t> "algorithms" : [ { "algorithm" : "AES-GCM", "mode" : "modes", "ivGen" : "internal",
        "ivGenMode" : "8.2.1" } All metadata representing strings or big numbers SHALL use double
        quotes at both ends. Big numbers require conversion from strings to whatever format is used
        by the DUT. Numerical values of integer size or with decimal points may use quotations if
        those values are generally used as a string, for example the acvVersion would generally be
        used in displaying information not in any mathematical operations. Something like keyLen or
        ptLen values would be better used without quotes to avoid having to convert the string to an
        integer for use in the code. </t>

    </section>

    <section anchor="app-reg-ex2" title="Error Messages">
      <t>General or registration errors detected by the server SHALL result in an HTML error and description of the problem, for example:</t>
          <figure align="center">
            <artwork>
              <![CDATA[
    HTTP response: 400

    "error" : "Incorrectly formatted JSON (51:18): expected field name was not provided: inBit"
          ]]>
            </artwork>
          </figure>


      <t>Errors detected by the client SHOULD trigger an indication of the operation that failed and a detailed error description. This information can be sent to the clients local logging facility to provide traceability of communication issues, for example:
      </t>
          <figure align="center">
            <artwork>
              <![CDATA[

      ACV Operation: SHA-512
      Error: Unsupported hash algorithm
          ]]>
            </artwork>
          </figure>

    </section>

    <section anchor="app-add_alg" title="Adding a new algorithm">
    <t> Add instructions here.</t>
    </section>

    <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                     v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                     other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                     Modified comments around figure to reflect non-implementation of
                     figure indent control.  Put in reference using anchor="DOMINATION".
                     Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                     added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative 
                     images. Removed meta-characters from comments (causes problems).

v06 2010-04-01 TT     Changed ipr attribute values to latest ones. Changed date to
                     year only, to be consistent with the comments. Updated the 
                     IANA guidelines reference from the I-D to the finished RFC.  -->
  </back>
</rfc>
