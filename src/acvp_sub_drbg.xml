<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subdrbg-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="DRBG Alg JSON">ACVP Deterministic Random Bit Generator (DRBG) Algorithm JSON Specification</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Apostol Vassilev" initials="A.V." role="editor" surname="Vassilev">
      <organization>National Institute of Standards and Technology</organization>

      <address>
        <postal>
          <street>100 Bureau Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>Gaithersburg</city>

          <region>MD</region>

          <code>20899</code>

          <country>USA</country>
        </postal>

        <email>apostol.vassilev@nist.gov</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="March" year="2017"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>TBD</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>acvp</keyword>
    <keyword>cryptography</keyword>
    <keyword>random number</keyword>
    <keyword>pseudo-random bit generator</keyword>
    <keyword>validation testing</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document defines the JSON schema for testing DRBG implementations from SP 800-90A  with the ACVP specification.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically
              verify the cryptographic implementation of a software or hardware crypto module.
              The ACVP specification defines how a crypto module communicates with an ACVP
              server, including crypto capabilities negotiation, session management, authentication,
	      vector processing and more.  The ACVP specification does not define algorithm specific
	      JSON constructs for performing the crypto validation.  A series of ACVP sub-specifications
	      define the constructs for testing individual crypto algorithms.  Each sub-specification
	      addresses a specific class of crypto algorithms.  This sub-specification defines the JSON
	      constructs for testing NIST-approved DRBG algorithms from SP 800-90A <xref target="SP800-90A"/> using ACVP. </t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted in
	<xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
      <section anchor="defaults_def" title="Default values">
          <t>ACVP has default values for many of the input parameters for testing the DRBG algorithms.For example, the Entropy Input, Nonce, Personalization String, and Addtional Input parameters have default values. 
               The specific details and restrictions on each of these input lengths is specified in  <xref target="caps_reg"/>,  <xref target="caps_table"/> and the notes following it. To indicate a preference for using a 
               default value for any of these parameters, the value zero (0) should be set. If the implementation does not support one of these
              defaults, the corresponding supported bit length values shall be set explicitly. </t>
      </section>
    </section>

<section anchor="caps_reg" title="Capabilities Registration">
    <t>ACVP requires crypto modules to register their capabilities.  This allows the crypto
	module to advertise support for specific algorithms, notifying the ACVP server which
	algorithms need test vectors generated for the validation process.  This section
    describes the constructs for advertising support of DRBG algorithms to the ACVP server.</t>
       
	<section anchor="supported_algs" title="Supported DRBG Algorithms">
	    <t>The following DRBG algorithms and modes may be advertised by the ACVP compliant crypto module:</t>
	    <texttable anchor="algs_table" title="Supported DRBG Algorithm and Modes JSON Values">
          <ttcol align="left">JSON algorithm value</ttcol>
          <ttcol align="left">JSON mode value</ttcol>
          <c>"hashDRBG"</c>
          <c>"SHA-1"</c>
          <c/>
          <c>"SHA-224"</c>
          <c/>
          <c>"SHA-256"</c>
          <c/>
          <c>"SHA-384"</c>
          <c/>
          <c>"SHA-512"</c>
          <c/>
          <c>"SHA-512/224"</c>
          <c/>
          <c>"SHA-512/256"</c>
          <c/>
          <c/>
          <c>"hmacDRBG"</c>
          <c>"SHA-1"</c>
          <c/>
          <c>"SHA-224"</c>
          <c/>
          <c>"SHA-256"</c>
          <c/>
          <c>"SHA-384"</c>
          <c/>
          <c>"SHA-512"</c>
          <c/>
          <c>"SHA-512/224"</c>
          <c/>
          <c>"SHA-512/256"</c>
          <c/>
          <c/>
        <c>"ctrDRBG"</c>
          <c>"3KeyTDEA"</c>
          <c/>
          <c>"AES-128"</c>
          <c/>
          <c>"AES-192"</c>
          <c/>
          <c>"AES-256"</c>
</texttable>
	</section>
	<section anchor="prereq_algs" title="Required Prerequisite Algorithms for DRBG Validations">
	    <t>Each DRBG implementation relies on other cryptographic primitives (algorithms) - see <xref target="SP800-90A"/>. 
	    For example, a hashDRBG uses an underlying hash algorithm. Each of these underlying algorithm primitives 
	    must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</t>
	    <texttable anchor="rereqs_table" title="Required DRBG Prerequisite Algorithms JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>algorithm</c>
          <c>a prerequisite algorithm</c>
          <c>value</c>
          <c>"SHA", "HMAC", "AES", "TDES"</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>valValue</c>
          <c>algorithm validation number</c>
          <c>value</c>
          <c>actual number, e.g. "123456", or "same"</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>prereqAlgVal</c>
          <c>prerequistie algorithm validation</c>
          <c>object with algorithm and valValue properties</c>
          <c>see above</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>prereqVals</c>
          <c>prerequistie algorithm validations</c>
          <c>array of prereqAlgVal objects</c>
          <c>see above</c>
          <c>No</c>

</texttable>
	</section>
	<section anchor="supported_caps" title="Supported DRBG Algorithm Capabilities">
    <t>The algorithm capabilities are advertised as JSON objects within the 'algorithms'
	value of the ACVP registration message.  The 'algorithms' value is an array, where each
	array element is an individual JSON object defined in this section.  The 'algorithms'
	value is part of the 'capability_exchange' element of the ACVP JSON registration message.
	See the ACVP specification for details on the registration message.

	Each DRBG algorithm capability advertised is a self-contained JSON object.  The following
	JSON values are used for DRBG algorithm capabilities:</t>



        <texttable anchor="caps_table" title="DRBG Algorithm Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>

          <c>algorithm</c>
	  <c>The DRBG algorithm to be validated.</c>
          <c>value</c>
          <c>See <xref target="algs_table"/></c>
          <c>No</c>
         <c/>
         <c/>
          <c/>
          <c/>
          <c/>
<c>mode</c>
          <c>The algorithm mode to be validated</c>
          <c>value</c>
          <c>See <xref target="algs_table"/></c>
          <c>No</c> 
         <c/>
         <c/>
          <c/>
          <c/>
          <c/>
<c>derFuncEnabled</c>
          <c>derivation function option</c>
          <c>value</c>
          <c>yes, no</c>
          <c>Yes, applicable to ctrDRBG only</c> 
         <c/>
         <c/>
          <c/>
          <c/>
          <c/>
<c>prereqVals</c>
	  <c>The prerequisite algorithm validations</c>
          <c>array of prereqAlgVal objects - see <xref target="prereq_algs"/></c>
          <c>array</c>
          <c>No</c>
         <c/>
         <c/>
          <c/>
          <c/>
          <c/>
          <c>predResistanceEnabled</c>
	        <c>an implementation that can be used with prediction resistance. See <xref target="caps_table"/> notes below.</c>
          <c>value</c>
          <c>yes, no</c>
          <c>No</c>
         <c/>
         <c/>
          <c/>
          <c/>
          <c/>
          <c>reseedImplemented</c>
         <c>Reseeding of the DRBG shall be performed in accordance with the specification for the given DRBG mechanism.  See <xref target="caps_table"/> notes below.</c>
          <c>value</c>
          <c>yes, no</c>
          <c>No</c>
          <c/>
         <c/>
          <c/>
          <c/>
          <c/>
          <c>entropyInputRange</c>
         <c>the supported bit lengths of the entropy input. See <xref target="caps_table"/> notes below.</c>
          <c>range</c>
          <c>min - at least the maximum security strength supported by the mechanism/option, max - larger values are optional, step - increment.</c>
          <c>No</c>                    
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>nonceLenRange</c>
         <c>.See <xref target="caps_table"/> notes below.</c>
          <c>range</c>
          <c>min - at least one half of the maximum security strength supported by the mechanism/option; max: - longer nonces are permitted, step - increment</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>persoStringLenRange</c>
         <c>.See <xref target="caps_table"/> notes below.</c>
          <c>range</c>
          <c>min - the maximum security strength supported by the mechanism/option; max - largest supported length, step - increment to calculate all supported lengths. Set all to zero (0) if not supported.</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>additionalInputLenRange</c>
         <c>.See <xref target="caps_table"/> notes below.</c>
          <c>range</c>
          <c>min - the maximum security strength supported by the mechanism/option; max - largest supported length, step - increment to calculate all supported lengths; set all to zero (0) if not supported.</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>returnedBitsLen</c>
         <c>.See <xref target="caps_table"/> notes below.</c>
          <c>value</c>
          <c/>
          <c>No</c>
          </texttable>
    
	
	         <t>Note 1: If an implementation can be used without prediction resistance, the flag predResistanceNotEnabled shall be set. </t>
	         <t>Note 2: Implementations that either have prediction resistance always ON or always OFF shall have only one of the prediction resistance flags set. </t>
	         <t>Note 3: Implementations that can be used either way will have both flags set.</t>
	         <t>Note 4: For ctrDRBG implementations, at least one of the derivation function options shall be set depending on the one actually used or both</t>	
           <t>Note 5: All DRBGs are tested at their maximum supported security strength so this is the minimum bit length of the entropy input that ACVP will accept. 
           The maximum supported security strength is also the default value for this input. Longer entropy inputs are permitted, 
          with the following exception: for ctrDRBG with no df, the bit length must equal the seed length.</t>
          <t>Note 6: ctrDRBG with no derivation function (ctrDRBGWithoutDerFunc) does not use a nonce; the nonce values, if supplied, will be ignored for this case. The default nonce bit length is one-half
           the maximum security strength supported by the mechanism/option.</t>
          <t>Note 7: ACVP allows bit length values for persoString ranging from the maximum 
           supported security strength except in the case of ctrDRBGWithoutDerFunc, where the second personalization string length must be less than or equal to the seed length. 
          If the implementation only supports one personalization string length, then set only that value as the range min and max and set the step to zero (0).. 
          If the implementation does not use a persoString, set all range parameters (min, max, step) to 0 (zero). </t>
          <t>Note 8: The addtionalInput configuration and restrictions are the same as those for the persoString.</t>
          
   </section>
    </section>

    <section anchor="test_vectors" title="Test Vectors">
	<t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to
	    the ACVP server for validation.  A typical ACVP validation session would require multiple test vector
	    sets to be downloaded and processed by the ACVP client.  Each test vector set represents an individual
	    algorithm, such as Hash_DRBG, etc.  This section
	describes the JSON schema for a test vector set used with DRBG algorithms.</t>

	<t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire
	vector set as well as individual test vectors to be processed by the ACVP client.  The following table
	describes the JSON elements at the top level of the hierarchy.
	</t>
	<texttable anchor="vs_top_table" title="Vector Set JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>

	  <c>version</c>
	  <c>Protocol version identifier</c>
          <c>value</c>
<c/>
<c/>
<c/>
	  <c>vectorSetId</c>
	  <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
<c/>
<c/>
<c/>

	  <c>algorithm</c>
	  <c>The DRBG algorithm used for the test vectors.  See <xref target="supported_algs"/> for possible values.</c>
          <c>value</c>
<c/>
<c/>
<c/>
          
	  <c>mode</c>
	  <c>The DRBG algorithm mode used for the test vectors.  See <xref target="supported_algs"/> for possible values.</c>
          <c>value</c>
<c/>
<c/>
<c/>

	  <c>testGroups</c>
	  <c>Array of test group JSON objects, which are defined in <xref target="tgjs"/></c>
          <c>array</c>
	</texttable>

	<section title="Test Groups JSON Schema" anchor="tgjs">
	    <t>The test_groups element at the top level in the test vector JSON object is an array of test
		groups.  Test vectors are grouped into similar test cases to reduce the amount of data transmitted
	        in the vector set.  For instance, all test vectors that use the same key size would be grouped
	        together.  The Test Group JSON object contains meta data that applies to all test vectors within
	        the group.  The following table describes the DRBG JSON elements of the Test Group JSON object.</t>
	        <t>ACVP allows default bit lengths for the inputs to specific algorithms, typically communicated as numerical value zero (0). If an implementation does not support one of the defaults,
the bit lengths the supported values shall be specified explicitly. </t>
	    <texttable anchor="vs_tg_table" title="Test Group JSON Object">
		<ttcol align="left">JSON Value</ttcol>
		<ttcol align="left">Description</ttcol>
		<ttcol align="left">JSON type</ttcol>
		<ttcol align="left">Optional</ttcol>

		<c>mode</c>
		<c>the mode of the DRBG, see <xref target="supported_algs"/></c>
		<c>value</c>
		<c>No</c>
		<c/>
		<c/>
		<c/>
		<c/>
		<c>derFunc</c>
		<c>use derivation function or not</c>
		<c>value, yes/no</c>
		<c>Yes</c>
		<c/>
		<c/>
		<c/>
		<c/>
		<c>predResistance</c>
		<c>use prediction resistance</c>
		<c>value yes/no</c>
		<c>No</c>
<c/>
		<c/>
		<c/>
		<c/>
<c>entropyInputLen</c>
		<c>entropy length</c>
		<c>value </c>
		<c>No</c>
<c/>
		<c/>
		<c/>
		<c/>
<c>nonceLen</c>
		<c>nonce length</c>
		<c>value </c>
		<c>No</c>
<c/>
		<c/>
		<c/>
		<c/>
		<c>persoStringLen</c>
		<c>personalization string length; set to 0 (zero) if not used/supported</c>
		<c>value</c>
		<c>No</c>
<c/>
		<c/>
		<c/>
		<c/>
		<c>additonalInputLen</c>
		<c>additional input length; set tp 0 (zero) if not used/supported</c>
		<c>value</c>
		<c>No</c>
		<c/>
		<c/>
		<c/>
		<c/>
		<c>returnedBitsLen</c>
		<c>returned bits length</c>
		<c>value </c>
		<c>No</c>
		<c/>
		<c/>
		<c/>
		<c/>
		<c>tests</c>
		<c>Array of individual test vector JSON objects, which are defined in <xref target="tvjs"/></c>
		<c>array</c>
		<c>No</c>
	    </texttable>

	</section>

	<section title="Test Case JSON Schema" anchor="tvjs">
	    <t>Each test group contains an array of one or more test cases.  Each test case is a JSON object
	       that represents a single vector to be processed by the ACVP client.  The following table describes
               the JSON elements for each test case.</t>
	    <texttable anchor="vs_tc_table" title="DRBG Test Case JSON Object">
		<ttcol align="left">JSON Value</ttcol>
		<ttcol align="left">Description</ttcol>
		<ttcol align="left">JSON type</ttcol>
		<ttcol align="left">Optional</ttcol>

		<c>tcId</c>
		<c>Numeric identifier for the test case, unique across the entire vector set.</c>
		<c>value</c>
		<c>No</c>
<c/>
		<c/>
		<c/>
		<c/>
		<c>entropyInput</c>
		<c>entropy value</c>
		<c>value</c>
		<c>No</c>
<c/>
		<c/>
		<c/>
		<c/>
		<c>nonce</c>
		<c>Value of the nonce</c>
		<c>value</c>
		<c>No</c>
<c/>
		<c/>
		<c/>
		<c/>
		<c>persoString</c>
		<c>value of the personlization string</c>
		<c>value</c>
		<c>No</c>
		<c/>
		<c/>
		<c/>
		<c/>
		<c>predResistanceInput</c>
		<c>array of additonal input/entropy input value pairs for prediction resistance testing. See <xref target="vs_prtc_table"/></c>
		<c>array</c>
		<c>No</c>
		
	    </texttable>

	    <t>Each prediction resistance test group contains an array of one or more test vectors, typically two.  Each test vector is a JSON object
		that represents a single test case to be processed by the ACVP client.  The following table describes
	    the JSON elements for each DRBG predcition resistance test vector.</t>
	    <texttable anchor="vs_prtc_table" title="Prediction Resistance Test Case JSON Object">
		<ttcol align="left">JSON Value</ttcol>
		<ttcol align="left">Description</ttcol>
		<ttcol align="left">JSON type</ttcol>
		<ttcol align="left">Optional</ttcol>
				<c>additionalInput</c>
		<c>value of the additoinal input string to use in predition resistance tests</c>
		<c>value</c>
		<c>No</c>	
		<c/>
		<c/>
		<c/>
		<c/>
		<c>entropyInputPR</c>
		<c>value of the entropy input to use in prediction resistance tests</c>
		<c>value</c>
		<c>No</c>	
	    </texttable>

	</section>
    </section>

    <section anchor="vector_responses" title="Test Vector Responses">
	<t>After the ACVP client downloads and processes a vector set, it must send the response vectors
	back to the ACVP server.  The following table describes the JSON object that represents a vector set response.</t>

	<texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>

	  <c>version</c>
	  <c>Protocol version identifier</c>
          <c>value</c>
<c/>
		<c/>
		<c/>
	  <c>vectorSetId</c>
	  <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
<c/>
		<c/>
		<c/>
	  <c>testResults</c>
	  <c>Array of JSON objects that represent each test vector result, which uses the same
	      JSON schema as defined in <xref target="tvjs"/> </c>
          <c>array</c>
	</texttable>
	
	  <t>Each test group contains an array of one or more test cases.  Each test case is a JSON object
		that represents a single test vector to be processed by the ACVP client.  The following table describes
	    the JSON elements for each DRBG test vector.</t>
	    <texttable anchor="vs_tr_table" title="DRBG Test Case Results JSON Object">
		<ttcol align="left">JSON Value</ttcol>
		<ttcol align="left">Description</ttcol>
		<ttcol align="left">JSON type</ttcol>
		<ttcol align="left">Optional</ttcol>

		<c>tcId</c>
		<c>Numeric identifier for the test case, unique across the entire vector set.</c>
		<c>value</c>
		<c>No</c>
		<c/>
		<c/>
		<c/>
		<c/>
		<c>returnedBits</c>
		<c>value of the computed DRBG output</c>
		<c>value</c>
		<c>No</c>
		
	    </texttable>
    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TBD...</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Security considerations are addressed by the ACVP specification.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <reference anchor="ACVP">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>ACVP Specification</title>

          <author initials="authInitials" surname="authSurName">
            <organization>NIST</organization>
          </author>

          <date year="2016"/>
        </front>
      </reference>
 <reference anchor="SP800-90A" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>Recommendation for Random Number Generation Using Deterministic Random Bit Generators</title>

          <author initials="E." surname="Barker">
            <organization>NIST</organization>
          </author>

          <author initials="J." surname="Kelsey">
            <organization>NIST</organization>
          </author>

          <date day="29" month="June" year="2015"/>
        </front>
      </reference>      
    </references>

    <section anchor="app-reg-ex" title="Example DRBG Capabilities JSON Object">
      <t>The following is a example JSON object advertising support for ctrDRBG with 3KeyTDEA.</t>
      <figure>
        <artwork><![CDATA[
            {
                "algorithm": "ctrDRBG",
                "mode": "3KeyTDEA",
                "derFuncEnabled":"yes",
                "prereqVals": [{"algorithm": "TDES", "valValue": "same"}],
                "predResistanceEnabled": "yes",
                "reseedImplemented" : "yes",
                "entropyInputRange":{ "min": 112,
                                "max": 256,
                                "step" : 144},
                "nonceLenRange": {"min" : 56,
                                "max" : 56,
                                "step" : 0},
                "persoStringLenRange": {"min": 112,
                                "max" : 112,
                                "step" : 0},
                "additionalInputLenRange":{ "min": 112,
                                "max" : 112,
                                "step" : 0},
                "returnedBitsLen":"256"
            }
            ]]></artwork>
    </figure>
    
     <t>The following is a example JSON object advertising support for ctrDRBG with AES-128.</t>
      <figure>
        <artwork><![CDATA[
            {
                "algorithm": "ctrDRBG",
                "mode": "AES-128",
                "derFuncEnabled":"yes",
                "prereqVals": [{"algorithm": "AES", "valValue": "1234"}],
                "predResistanceEnabled": "yes",
                "reseedImplemented" : "yes",
                "entropyInputRange":{ "min": 128,
                                "max": 256,
                                "step" : 128},
                "nonceLenRange": {"min" : 64,
                                "max" : 64,
                                "step" : 0},
                "persoStringLenRange": {"min": 128,
                                "max" : 128,
                                "step" : 0},
                "additionalInputLenRange":{ "min": 128,
                                "max" : 128,
                                "step" : 0},
                "returnedBitsLen":"512"
            }
            ]]></artwork>
    </figure>
<t>The following is a example JSON object advertising support for hashDRBG with AES-256.</t>
      <figure>
        <artwork><![CDATA[
            {
                "algorithm": "hashDRBG",
                "mode": "AES-256",
                "prereqVals": [{"algorithm": "AES", "valValue": "1234"}, {"algorithm": "SHA", "valValue": "5678"}],
                "predResistanceEnabled": "yes",
                "reseedImplemented" : "yes",
                 "entropyInputRange":{ "min": 256,
                                "max": 512,
                                "step" : 1},
                "nonceLenRange": {"min" : 128,
                                "max" : 256,
                                 "step" : 128},
                "persoStringLenRange": {"min": 256,
                                 "max" : 512,
                                 "step" : 1},
              "additionalInputLenRange":{ "min": 256,
                                 "max" : 512,
                                 "step" : 1},
                "returnedBitsLen":"1024"
            }
            ]]></artwork>
    </figure>

<t>The following is a example JSON object advertising support for hmacDRBG with AES-256.</t>
      <figure>
        <artwork><![CDATA[
            {
                "algorithm": "hmacDRBG",
                "mode": "AES-256",
                "prereqVals": [{"algorithm": "AES", "valValue": "1234"}, {"algorithm": "HMAC", "valValue": "9012"}],
                "predResistanceEnabled": "yes",
                "reseedImplemented" : "yes",
                "entropyInputRange":{ "min": 256,
                                 "max": 256,
                                 "step" : 0},
                "nonceLenRange": {"min" : 128,
                                 "max" : 128,
                                 "step" : 0},
                "persoStringLenRange": {"min": 256,
                                 "max" : 256,
                                 "step" : 0},
               "additionalInputLenRange":{ "min": 256,
                                 "max" : 256,
                                 "step" : 0},
                "returnedBitsLen":"1024"
            }
            ]]></artwork>
    </figure>
    </section>
    <section anchor="app-vs-ex" title="Example Test Vectors JSON Object">
      <t>The following is a example JSON object for ctrDRBG test vectors sent from the ACVP server to the crypto module.</t>
      <figure>
        <artwork><![CDATA[
                {
                  "version": "0.2",
                  "vectorSetId": "1133",
                  "algorithm": "ctrDRBG",
                  "mode": "3KeyTDEA",
                  "derFunc":"yes",
                  "predResistance": "yes",
                  "entropyInputLen":"112",
                  "nonceLen":"56",
                  "persoStringLen":"112",
                  "additionalInputLen":"112",
                  "returnedBitsLen":"256",                  
                  "testGroups": [
                    {
                      "type": "long",
                      "tests": [
                        {
                          "tcId": "1815",
                          "entropyInput":"78aac2cb444594e29dc97b0195b5",
                          "nonce":"41ef9c67ffe438",
                          "persoString":"b8e84de200a9239a043a7a9a6a03",
                          "additionalInput":"f1e8edf002b331ec49ec0c1f18fa",
                          "entropyInputPR": "6cd4096638bbaeda28289582a10d",
                          "additionalInput" : "f5357737023e3304508a00b3ba02",
                          "entropyInputPR" : "a0cdf5c1c670fd7b65a4f0a899e4"
                          },
                        {
                          "tcId": "1816",
                          "entropyInput" : "b8ab88b9c5fda8544b90a043684e",
                          "nonce": "f1bcc6ff60dd37",
                          "persoString" : "018c1f9d22f3c7f701a5f1cab07d",
                          "additionalInput" : "356a6e908bfce2d660f20f3fbd1e",
                          "entropyInputPR" : "bed693401bfd53ce4c36c2233ada",
                          "additionalInput" : "4321b3ab3a0ce88e02bdcd0306d9",
                          "entropyInputPR" : "a632ef16f20da17f02e484df4a41"
                        }
                      ]
                    }
                  ]
                }
            ]]></artwork>
    </figure>
    
 <t>The following is a example JSON object for hmacDRBG test vectors sent from the ACVP server to the crypto module.</t>
      <figure>
        <artwork><![CDATA[
                {
                  "version": "0.2",
                  "vectorSetId": "1146",
                  "algorithm": "hmacDRBG",
                  "mode": "AES-256",
                  "predResistance": "yes",
                  "entropyInputLen":"256",
                  "nonceLen":"128",
                  "persoStringLen":"256",
                  "additionalInputLen":"256",
                  "returnedBitsLen":"1024",                  
                  "testGroups": [
                    {
                      "type": "long",
                      "tests": [
                        {
                          "tcId": "2111",
                          "entropyInput":"ee3392c5f3de6f3f8c4f28d852afacd2cbaa89ed48d1c5d4311662962aa70a98",
                          "nonce":"b991a820fac75fd02642ad8fa651eda4",
                          "persoString":"30f3a50b0e2309dab93ea2aa095e5df8e4b2a42690572b31e53fb79a195481e5",
                          "additionalInput":"4ea46abe95b2e4184113f908ae30123207d481908b7af7ef348657bbf3b4a002",
                          "entropyInputPR": "e4413a2e404f12c644b0b1d7a49a0fbf3d8703d571ffd02168c11b4ade6fc903",
                          "additionalInput" : "61b7204c8fef294f2a9f2e73a83a8a7a04c38e3b3eaaed1b920abfceab912492",
                          "entropyInputPR" : "968ea185d1439fa2d67eb55ac93ba596b1ea679de7c6e44f80dc6f213455f1ed"
                          },
                        {
                          "tcId": "2112",
                          "entropyInput" : "a0ace75784b97224de2957e5f60dc85b25331fcf7901f37418d3c9de17ed4261",
                          "nonce": "b671308068fc7909a360c772f62a4c5e",
                          "persoString" : "338d5f2bd93262da154385e9ed90b7862e3c892f13e1d7d19924b2eb8b3bab21",
                          "additionalInput" : "7acd8bfae17ff4edbac3437817d6b3fce12a04c4034ac6bef0b1b88f7dcd7c85",
                          "entropyInputPR" : "47b26bbe93a5cc19a410523a072e04333f06c54af0049fc41e66213763020ef7",
                          "additionalInput" : "d4b24c74538e3a1083a2cc0a4414a9f558f0a2dc186e3b9a5294cd541acdad87",
                          "entropyInputPR" : "acb63f3b5995608a1331641cd43208444a9ec95e4bb2a438f614156b6a77c8c3"
                        }
                      ]
                    }
                  ]
                }
            ]]></artwork>
    </figure>    
 <t>The following is a example JSON object for hashDRBG test vectors sent from the ACVP server to the crypto module.</t>
      <figure>
        <artwork><![CDATA[
                {
                  "version": "0.2",
                  "vectorSetId": "1156",
                  "algorithm": "hashDRBG",
                  "mode": "SHA-256",
                  "predResistance": "yes",
                  "entropyInputLen":"256",
                  "nonceLen":"128",
                  "persoStringLen":"0",
                  "additionalInputLen":"0",
                  "returnedBitsLen":"1024",                  
                  "testGroups": [
                    {
                      "type": "long",
                      "tests": [
                        {
                          "tcId": "2151",
                          "entropyInput":"ae0a3acd541d0d582a8510f3028caa143fe1e5226a8469d40b979d3a0d1bbe69",
                          "nonce":"786f03ad697332d74fad7a14604cee44",
                          "persoString":"",
                          "additionalInput":"",
                          "entropyInputPR": "4852aed7c47fd305aa680a6557d2f6e4112342a04eb91ed9f843671d0673cecd",
                          "additionalInput" : "",
                          "entropyInputPR" : "8b8a35a12e2d112685258742a9ad81931595fb06a7443329317e4eab9814e888"
                          },
                        {
                          "tcId": "2152",
                          "entropyInput" : "26d8c9a9b982cd7016c9208fe95b2f4003e0ebf84c1e80a4087f2bc3e0fc5674",
                          "nonce": "36dff124f908a95a022edf615618cd31",
                          "persoString" : "",
                          "additionalInput" : "",
                          "entropyInputPR" : "648bbdc4d40571905c69e7e2b15e36e08c812a6c509cef68bf75281e87f7a154",
                          "additionalInput" : "",
                          "entropyInputPR" : "fff51d05b1349506c354a0e6ee01edcff21c509dff5cbb582c8fdc01d6e8bd5b"
                        }
                      ]
                    }
                  ]
                }
            ]]></artwork>
    </figure>   
</section>
     <section anchor="app-results-ex" title="Example Test Results JSON Object">
      <t>The following is a example JSON object for ctrDRBG with 3KeyTDEA test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
                {
                    "version": "0.2",
                    "vectorSetId": "1133",
                    "testResults": [
                        {
                            "tcId": "1815",
                            "returnedBits ": "4565e85447af7134775816588f1b0faf8b402a951db17753d01809d14724449d"
                        },
                        {
                            "tcId": "1816",
                            "returnedBits": "b67acc3b2231ec54344d5be2ee8fcac72e83651b8cf2ac2bc361171b882f0965"
                        }
                    ]
                }

            ]]></artwork>
    </figure>
      <t>The following is a example JSON object for HMAC_DRBG test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
                {
                    "version": "0.2",
                    "vectorSetId":  "1146",
                    "testResults": [
                        {
                            "tcId": "2111",
                            "returnedBits": "e42130fd1d920a2bcd177c0de0d5834c9b05a6ecdf3bc46e3733869f762dc2e7d97357934d8061db033670c3739369924b321216c30b3e45d9bc8c0bad61d8fdc03dffd70725e793ebfe98bc15358764402f4e2c71be4acfad898649b51c5d2625374a61be2b59833d2dfcc593eddcffbac79016b22a992ae6f5f82bae194e06"
                        },
                       {
                            "tcId": "2112",
                            "returnedBits": "495b2a0de6b5fc4545fdd5fec93362d1203b1dfef3528f7d852fb89ba1c45059bd52cb7a80176dd71c26108912be6f3c33d95d5cee92349ba6bf16db42c4c828729a9b4a5f53e60655df55f0e58753ad2785d53fc44fe98a5e214e8172554bd53047f38a67f8a5af11111e33dcc5e705824a78d661839994f3529cec5a83a9f0"
                       }
                    ]
                }
            ]]></artwork>
       </figure>
      <t>The following is a example JSON object for hashDRBG test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
                {
                    "version": "0.2",
                    "vectorSetId": "1156",
                    "testResults": [
                        {
                            "tcId": "2151",
                            "returnedBits ": "1af967534c670271e26c9b991ec975b78c84623853cd531368f5b2e81f015f97ffbb8cd4533d4354ed432fbdf8025f04786745fd006e173f34e6f01e136bd9b4db2b96919dfa12e8deecf7b7c72b1d329afa99c29e844b27ee34d468a4b20b5739c00ad405943aeb5084285468765190112c5e44756770479552f2f2913ed362"
                        },
                       {
                            "tcId": "2152",
                            "returnedBits": "8a74a8c31ea4e6e62f8a77b45da8ec9d8b75e6813f15327c5beb8cb4b56b15e85f95ace34826f8da9048be7c800b33d6c4d3c6558b3e2e0ccfe867a2c6107dc7bacf513017c1a5bcb65ce16ed49aefe764ea7a13d36ceb7f9c443a0cb81f55abcc0c7b2d7d97858ee0b237a72364e826dd6b25df84914f2b354e03fd7fea758e"
                       }
                    ]
                }
            ]]></artwork>
    </figure>
    </section>
  </back>
</rfc>
