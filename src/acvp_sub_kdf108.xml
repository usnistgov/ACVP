<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subkdf108-0.3" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
  <!-- ***** FRONT MATTER ***** -->
  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
    <title abbrev="Sym Alg JSON">ACVP SP800-108 Key Derivation Function Algorithm JSON Specification</title>
    <!-- add 'role="editor"' below for the editors if appropriate -->
    <!-- Another author who claims to be an editor -->
    <author fullname="Barry Fussell" initials="B.F." role="editor" surname="Fussell">
      <organization>Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>170 West Tasman Dr.</street>
          <!-- Reorder these if your country does things differently -->
          <city>San Jose</city>
          <region>CA</region>
          <code>95134</code>
          <country>USA</country>
        </postal>
        <email>bfussell@cisco.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date month="June" year="2016" />
    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->
    <!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>TBD</workgroup>
    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->
    <keyword>acvp</keyword>
    <keyword>crypto</keyword>
    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->
    <abstract>
      <t>This document defines the JSON schema for using SP800-108 KDF algorithms with the ACVP specification.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module.              The ACVP specification defines how a crypto module communicates with an ACVP              server, including crypto capabilities negotiation, session management, authentication,	      vector processing and more.  The ACVP specification does not define algorithm specific	      JSON constructs for performing the crypto validation.  A series of ACVP sub-specifications	      define the constructs for testing individual crypto algorithms.  Each sub-specification	      addresses a specific class of crypto algorithms.  This sub-specification defines the JSON	      constructs for testing SP800-108 KDF algorithms using ACVP.</t>
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this	document are to be interpreted in	                              
          <xref target="RFC2119">RFC 2119</xref>.                        
        </t>
      </section>
    </section>
    <section anchor="caps_reg" title="Capabilities Registration">
      <t>ACVP requires crypto modules to register their capabilities.  This allows the crypto	module to advertise support for specific algorithms, notifying the ACVP server which	algorithms need test vectors generated for the validation process.  This section    describes the constructs for advertising support of SP800-108 KDF algorithms to the ACVP server.</t>
      <t>The algorithm capabilities are advertised as JSON objects within the 'algorithms'	value of the ACVP registration message.  The 'algorithms' value is an array, where each	array element is an individual JSON object defined in this section.  The 'algorithms'	value is part of the 'capability_exchange' element of the ACVP JSON registration message.	See the ACVP specification for details on the registration message.</t>
      <section anchor="prereq_algs" title="Required Prerequisite Algorithms for SP800-108 KDF Validations">
        <t>Each SP800-108 KDF implementation relies on other cryptographic primitives.	    For example,  the KDF must utilize an underlying MAC algorithm. Each of these underlying algorithm primitives 	    must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</t>
        <texttable anchor="rereqs_table" title="Required SP800-108 KDF Prerequisite Algorithms JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>algorithm</c>
          <c>a prerequisite algorithm</c>
          <c>value</c>
          <c>KAS, DRBG, CMAC, HMAC</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>valValue</c>
          <c>algorithm validation number</c>
          <c>value</c>
          <c>actual number or "same"</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>prereqAlgVal</c>
          <c>prerequistie algorithm validation</c>
          <c>object with algorithm and valValue properties</c>
          <c>see above</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>prereqVals</c>
          <c>prerequistie algorithm validations</c>
          <c>array of prereqAlgVal objects</c>
          <c>see above</c>
          <c>No</c>
        </texttable>
      </section>
      <section anchor="kdf_caps_reg" title="SP800-108 KDF Algorithm Capabilities Registration">
        <t>Each algorithm capability advertised is a self-contained JSON object using the following values.</t>
        <texttable anchor="caps_table" title="SP800-108 KDF Algorithm Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>algorithm</c>
          <c>The KDF to be validated</c>
          <c>value</c>
          <c>"KDF"</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>prereqVals</c>
          <c>prerequistie algorithm validations</c>
          <c>array of prereqAlgVal objects</c>
          <c>See                                     
            <xref target="prereq_algs" />
          </c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>algSpecs</c>
          <c>array of JSON objects, each with fields pertaining to the KDF mode identified uniquely by the combination of the "kdfMode" and indicated properties</c>
          <c>Array of JSON objects</c>
          <c>See                                                                                                 																								                        
            <xref target="supported_modes" />
          </c>
        </texttable>
        <t>Note: Some optional values are required depending on the algorithm.  Failure to provide these values will	result in the ACVP server returning an error to the ACVP client during registration.</t>
      </section>
      <section anchor="supported_algs" title="Supported SP800-108 KDF Modes">
        <t>The following SP800-108 KDF modes may be advertised by the ACVP compliant crypto module:</t>
        <t>
          <list style="symbols">
            <t>counter</t>
            <t>feedback</t>
            <t>double pipeline iteration</t>
          </list>
        </t>
      </section>
      <section anchor="supported_modes" title="Supported KDF Modes Capabilities">
        <t>The KDF mode capabilities are advertised as JSON objects within the 'algSpecs' value of the ACVP registration message - see                                                             																				                    
          <xref target="caps_table"/>. The 'algSpecs' value is an array, where each array element is a JSON object corresponding to a particular KDF mode defined in this section. The 'algSpecs'	value is part of the 'capability_exchange' element of the ACVP JSON registration message.	See the ACVP specification for details on the registration message.                                                																                
        </t>
        <t>Each KDF mode's capabilities are advertised as JSON objects.</t>
        <t>The complete list of KDF key generation capabilities may be advertised by the ACVP compliant crypto module:</t>
        <texttable anchor="capabilities_table" title="KDF Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>kdfMode</c>
          <c>The KDF mode for testing.</c>
          <c>value</c>
          <c>See                         
            <xref target="supported_algs" />
          </c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>macMode</c>
          <c>The MAC used in the KDF.</c>
          <c>array</c>
          <c>Any non-empty subset of MACs in                         
            <xref target="supported_macs" />
          </c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>supportedLengths</c>
          <c>The lengths of data the IUT supports.</c>
          <c>domain</c>
          <c>Minimum must be greater than or equal to 1. Maximum must be less than or equal to 4096.</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>fixedDataOrder</c>
          <c>Describes where the counter appears in the fixed data</c>
          <c>array</c>
          <c>Any non-empty subset of {"none", "after fixed data", "before fixed data", "middle fixed data", "before iterator"}. Note that "none" and "before iterator" are not valid for "counter" KDF. "middle fixed data" is not valid for "feedback" nor "double pipeline iterator" KDF.</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>counterLength</c>
          <c>Valid counter lengths that appears in the fixed data</c>
          <c>array</c>
          <c>Any non-empty subset of {0, 8, 16, 24, 32}. Note that 0 describes that there is no counter used. The 0 option is not valid for "counter" KDF.</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>supportsEmptyIv</c>
          <c>Whether the IUT supports an empty IV.</c>
          <c>boolean</c>
          <c>true/false</c>
          <c>No</c>
        </texttable>
      </section>
      <section anchor="supported_macs" title="Supported SP800-108 KDF MACs">
        <t>The following MACs may be advertised by the ACVP compliant crypto module:</t>
        <t>
          <list style="symbols">
            <t>cmac-aes128</t>
            <t>cmac-aes192</t>
            <t>cmac-aes256</t>
            <t>cmac-tdes</t>
            <t>hmac-sha1</t>
            <t>hmac-sha224</t>
            <t>hmac-sha256</t>
            <t>hmac-sha384</t>
            <t>hmac-sha512</t>
          </list>
        </t>
      </section>
    </section>
    <section anchor="test_vectors" title="Test Vectors">
      <t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to	    the ACVP server for validation.  A typical ACVP validation session would require multiple test vector	    sets to be downloaded and processed by the ACVP client.  Each test vector set represents an individual	    Key Derivation Function (KDF), such as SNMP, SSH,  etc.  This section	describes the JSON schema for a test vector set used with SP800-108 KDF algorithms.</t>
      <t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire	vector set as well as individual test vectors to be processed by the ACVP client.The following table describes the JSON elements at the top level of the hierarchy.	</t>
      <texttable anchor="vs_top_table" title="Vector Set JSON Object">
        <ttcol align="left">JSON Value</ttcol>
        <ttcol align="left">Description</ttcol>
        <ttcol align="left">JSON type</ttcol>
        <c>acvVersion</c>
        <c>Protocol version identifier</c>
        <c>value</c>
        <c/>
        <c/>
        <c/>
        <c>vsId</c>
        <c>Unique numeric identifier for the vector set</c>
        <c>value</c>
        <c/>
        <c/>
        <c/>
        <c>algorithm</c>
        <c>See                               
          <xref target="supported_algs" />
        </c>
        <c>value</c>
        <c/>
        <c/>
        <c/>
        <c>testGroups</c>
        <c>Array of test group JSON objects, which are defined in                               
          <xref target="tgjs" />
        </c>
        <c>array</c>
      </texttable>
      <section title="Test Groups JSON Schema" anchor="tgjs">
        <t>The testGroups element at the top level in the test vector JSON object is an array of test		groups.  Test vectors are grouped into similar test cases to reduce the amount of data transmitted	        in the vector set.  For instance, all test vectors that use the same key size would be grouped	        together.  The Test Group JSON object contains meta data that applies to all test vectors within	        the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</t>
        <t> The KDF test group for KDF108 is as follows:</t>
        <texttable anchor="vs_tg_table5" title="Vector Group JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>kdfMode</c>
          <c>The kdfMode used for the test group.  See                                     
            <xref target="supported_algs" /> for possible values                              
          </c>
          <c>value</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>macMode</c>
          <c>Psuedorandom function HMAC or CMAC used</c>
          <c>value</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>counterLocation</c>
          <c>"none", "after fixed data", "before fixed data", "middle fixed data", or "before iterator"</c>
          <c>value</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>keyOutLength</c>
          <c>Expected length of the derived key.</c>
          <c>integer</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>counterLength</c>
          <c>Expected length of the counter.</c>
          <c>integer</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>tests</c>
          <c>Array of individual test vector JSON objects, which are defined in                                     
            <xref target="tvjs" />
          </c>
          <c>array</c>
          <c>No</c>
        </texttable>
      </section>
      <section title="Test Case JSON Schema" anchor="tvjs">
        <t>Each test group contains an array of one or more test cases.  Each test case is a JSON object		that represents a single test vector to be processed by the ACVP client.  The following table describes the JSON elements for each SP800-108 KDF test vector.</t>
        <texttable anchor="vs_tc_table5" title="Test Case JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>tcId</c>
          <c>Numeric identifier for the test case, unique across the entire vector set.</c>
          <c>value</c>
          <c>No</c>
          <c/>
          <c/>
          <c/>
          <c/>
          <c>keyIn</c>
          <c>Key derivation key</c>
          <c>value</c>
          <c>No</c>
        </texttable>
      </section>
    </section>
    <section anchor="vector_responses" title="Test Vector Responses">
      <t>After the ACVP client downloads and processes a vector set, it must send the response vectors	back to the ACVP server.  The following table describes the JSON object that represents a vector set response.</t>
      <texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
        <ttcol align="left">JSON Value</ttcol>
        <ttcol align="left">Description</ttcol>
        <ttcol align="left">JSON type</ttcol>
        <c>acvVersion</c>
        <c>Protocol version identifier</c>
        <c>value</c>
        <c/>
        <c/>
        <c/>
        <c>vsId</c>
        <c>Unique numeric identifier for the vector set</c>
        <c>value</c>
        <c/>
        <c/>
        <c/>
        <c>testResults</c>
        <c>Array of JSON objects that represent each test vector result, as defined by the tables below</c>
        <c>array</c>
      </texttable>
      <t>The following table describes the JSON object that represents a vector set response for KDF108.</t>
      <texttable anchor="vr_top_table5" title="Vector Set Response JSON Object">
        <ttcol align="left">JSON Value</ttcol>
        <ttcol align="left">Description</ttcol>
        <ttcol align="left">JSON type</ttcol>
        <c>breakLocation</c>
        <c>Where in the fixedData the counter is inserted. Only required when counterLocation is "middle fixed data".</c>
        <c>value</c>
        <c/>
        <c/>
        <c/>
        <c>fixedData</c>
        <c>Fixed input data string</c>
        <c>value</c>
        <c/>
        <c/>
        <c/>
        <c>keyOut</c>
        <c>The derived keying material output</c>
        <c>value</c>
      </texttable>
    </section>
    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TBD...</t>
    </section>
    <!-- Possibly a 'Contributors' section ... -->
    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>
    <section anchor="Security" title="Security Considerations">
      <t>Security considerations are addressed by the ACVP specification.</t>
    </section>
  </middle>
  <!--  *****BACK MATTER ***** -->
  <back>
    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->      &RFC2119;                        
      <reference anchor="ACVP">
        <!-- the following is the minimum to make xml2rfc happy -->
        <front>
          <title>ACVP Specification</title>
          <author initials="authInitials" surname="authSurName">
            <organization>NIST</organization>
          </author>
          <date year="2016" />
        </front>
      </reference>
    </references>
    <section anchor="app-reg-ex" title="Example SP800-108 KDF Capabilities JSON Object">
      <t>The following is a example JSON object advertising support for KDF.</t>
      <figure>
        <artwork>
          <![CDATA[
{
    "algorithm": "KDF",
    "prereqVals": [
        {
            "algorithm": "SHA",
            "valValue": "123456"
        },
        {
            "algorithm": "DRBG",
            "valValue": "123456"
        }
    ],
    "algSpecs": [
        {
            "KdfMode": "counter",
            "MacMode": [
                "cmac-aes128",
                "cmac-aes192",
                "cmac-aes256",
                "cmac-tdes",
                "hmac-sha1",
                "hmac-sha224",
                "hmac-sha256",
                "hmac-sha384",
                "hmac-sha512"
            ],
            "SupportedLengths": [
                {
                    "min": 8,
                    "max": 1024,
                    "increment": 1
                }
            ],
            "FixedDataOrder": [
                "after fixed data",
                "before fixed data",
                "middle fixed data"
            ],
            "CounterLength": [
                8,
                16,
                24,
                32
            ],
            "SupportsEmptyIv": false
        },
        {
            "KdfMode": "feedback",
            "MacMode": [
                "cmac-aes128",
                "cmac-aes192",
                "cmac-aes256",
                "cmac-tdes",
                "hmac-sha1",
                "hmac-sha224",
                "hmac-sha256",
                "hmac-sha384",
                "hmac-sha512"
            ],
            "SupportedLengths": [
                {
                    "min": 8,
                    "max": 1024,
                    "increment": 1
                }
            ],
            "FixedDataOrder": [
                "none",
                "after fixed data",
                "before fixed data",
                "before iterator"
            ],
            "CounterLength": [
                0,
                8,
                16,
                24,
                32
            ],
            "SupportsEmptyIv": true
        },
        {
            "KdfMode": "double pipeline iteration",
            "MacMode": [
                "cmac-aes128",
                "cmac-aes192",
                "cmac-aes256",
                "cmac-tdes",
                "hmac-sha1",
                "hmac-sha224",
                "hmac-sha256",
                "hmac-sha384",
                "hmac-sha512"
            ],
            "SupportedLengths": [
                {
                    "min": 8,
                    "max": 1024,
                    "increment": 1
                }
            ],
            "FixedDataOrder": [
                "none",
                "after fixed data",
                "before fixed data",
                "before iterator"
            ],
            "CounterLength": [
                0,
                8,
                16,
                24,
                32
            ],
            "SupportsEmptyIv": false
        }
    ]
}
            ]]>
        </artwork>
      </figure>
    </section>
    <section anchor="app-vs-ex" title="Example Test Vectors JSON Object">
      <t>The following is a example JSON object for SP800-108 KDF test vectors sent from the ACVP server to the crypto module.</t>
      <figure>
        <artwork>
          <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "algorithm": "counterMode",
        "testGroups": [
            {
                "kdfMode": "counter",
                "macMode": "CMAC-AES128",
                "counterLocation": "after fixed data",
                "keyOutLength": 1024,
                "counterLength": 8,
                "tests": [
                    {
                        "tcId": 1,
                        "keyIn": "5DA38931E8D9174BC3279C8942D2DB82",
                        "deferred": true
                    },
                    {
                        "tcId": 2,
                        "keyIn": "58F5426A40E3D5D2C94F0F97EB30C739",
                        "deferred": true
                    }
                ]
            }
        ]
    }
]
            ]]>
        </artwork>
      </figure>
    </section>
    <section anchor="app-results-ex" title="Example Test Results JSON Object">
      <t>The following is a example JSON object for SP800-108 KDF test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork>
          <![CDATA[
[
    {
        "acvVersion": "0.4"
    },
    {
        "vsId": 1564,
        "testResults": [
            {
                "tcId": 1,
                "keyOut": "94D58F22FA9092B0375F7EE6841B6775226703E3232BF9CF496E4EF3CDE1037765DDC060C08C9B3A845E288EED171535EBA97D23DCF8F6D2D4CF9D980CB4F6D270D3A7859B1FE2BFCA81F0702B5767E35BE9B96BA65C5263EB0DECD5FA721FFA57CE208F53F910DB6087E93BEE1A24E790E1DF02C140E89E04DF5299A63B71DA",
                "fixedData": "FBF14DF02EE6C7DABCA6EF9AF59BB9A2"
            }
        ]
    }
]
            ]]>
        </artwork>
      </figure>
    </section>
  </back>
</rfc>