<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subsha3-0.5" ipr="trust200902">
	<!-- category values: std, bcp, info, exp, and historic
    	 ipr values: full3667, noModification3667, noDerivatives3667
    	 you can add the attributes updates="NNNN" and obsoletes="NNNN"
    	 they will automatically be output with "(if approved)" -->

	<!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the
  	         full title is longer than 39 characters -->

		<title abbrev="SHA3 JSON">ACVP SHA3 and SHAKE JSON Specification</title>

		<!-- add 'role="editor"' below for the editors if appropriate -->

		<!-- Another author who claims to be an editor -->

		<author fullname="Christopher Celi" initials="C.C." role="editor" surname="Celi">
			<organization>National Institute of Standards and Technology</organization>

			<address>
				<postal>
					<street>100 Bureau Drive</street>
					<city>Gaithersburg</city>
					<region>MD</region>
					<code>20899</code>
					<country>USA</country>
				</postal>

				<email>christopher.celi@nist.gov</email>

				<!-- uri and facsimile elements may also be added -->
			</address>
		</author>

		<date month="February" year="2019"/>

		<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
  	         in the current day for you. If only the current year is specified, xml2rfc will fill
  		 in the current day and month for you. If the year is not the current one, it is
  		 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
  		 purpose of calculating the expiry date).  With drafts it is normally sufficient to
  		 specify just the year. -->

		<!-- Meta-data Declarations -->

		<area>General</area>

		<workgroup>TBD</workgroup>

		<!-- WG name at the upperleft corner of the doc,
  	         IETF is fine for individual submissions.
  		 If this element is not present, the default is "Network Working Group",
  	         which is used by the RFC Editor as a nod to the history of the IETF. -->

		<keyword>acvp</keyword>
		<keyword>crypto</keyword>

		<!-- Keywords will be incorporated into HTML output
  	         files in a meta tag but they have no effect on text or nroff
  	         output. If you submit your draft to the RFC Editor, the
  	         keywords will be used for the search engine. -->

		<abstract>
			<t>This document defines the JSON schema for using SHA3 and SHAKE with the ACVP specification.</t>
		</abstract>
	</front>

	<middle>
		<section title="Introduction">
			<t>
                The Automated Cryptographic Validation Protocol (ACVP) defines a mechanism to automatically
                verify the cryptographic implementation of a software or hardware cryptographic module. The intention of the protocol
                is to minimize human involvement in the testing of cryptography.
                The ACVP specification defines how a cryptographic module communicates with an ACVP
                server, including cryptographic capabilities negotiation, session management, authentication,
                vector processing and more. Note that the ACVP specification does not define algorithm-specific
                JSON constructs for performing the cryptographic validation. However, a series of ACVP sub-specifications
                defines the constructs for testing individual cryptographic algorithms. Each sub-specification
                addresses a specific class or subset of cryptographic algorithms. This sub-specification defines the JSON
                constructs for testing the SHA3 and SHAKE algorithms using ACVP.  The ACVP server performs a set
                of tests on the hash algorithms in order to assess the correctness and robustness of the
                implementation. A typical ACVP validation session would require multiple tests to be performed for every supported
                cryptographic algorithm, such as SHA3-256, SHA3-512 and SHAKE-256.
            </t>

			<section title="Requirements Language">
				<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  	        		"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  					document are to be interpreted in
					<xref target="RFC2119">RFC 2119</xref>.
				</t>
			</section>
		</section>

		<section anchor="supported_algs" title="Supported Hash Algorithms">
			<t>The following SHA3-based hash algorithms may be advertised by this ACVP compliant crypto module:</t>
			<t>
				<list style="symbols">
					<t>ACVP-SHA3-224</t>
					<t>ACVP-SHA3-256</t>
					<t>ACVP-SHA3-384</t>
					<t>ACVP-SHA3-512</t>
					<t>ACVP-SHAKE-128</t>
					<t>ACVP-SHAKE-256</t>
				</list>
			</t>
			<t>Other hash algorithms may be advertised by the ACVP elsewhere.</t>
		</section>

        <section anchor="testtypes" title="Test Types and Test Coverage">
            <t>
                This section describes the design of the tests used to validate implementations of SHA3 and SHAKE.
                There are three types of tests for these hash functions: functional tests, Monte Carlo tests and Variable Output tests. Each has a specific value to be used in the
                testType field.  The testType field definitions are:

                <list style="symbols">
                    <t>
                        "AFT" - Algorithm Functional Test. XXX
                    </t>
                    <t>
                        "MCT" - Monte Carlo Test. XXX
                        See <xref target="MC_test"/> for implementation details.
                    </t>
                    <t>
                        "VOT" - Variable Output Test. XXX
                    </t>
                </list>
            </t>

            <section anchor="MC_test" title="Monte Carlo tests for SHA3 and SHAKE">
                <t>
                </t>
                <section anchor="SHA3-MCT" title="SHA3 Monte Carlo Test">
                </section>
                <section anchor="SHAKE-MCT" title="SHAKE Monte Carlo Test">
                </section>
            </section>

            <section anchor="test_coverage" title="Test Coverage">
            </section>
        </section>

		<section anchor="caps_reg" title="Capabilities Registration">
            <t>
                This section describes the constructs for advertising support of block cipher algorithms to the
                ACVP server. ACVP REQUIRES cryptographic modules to register their capabilities in a registration.
                This allows the cryptographic module to advertise support for specific algorithms, notifying the ACVP server which
                algorithms need test vectors generated for the validation process.
            </t>

            <t>
                The SHA3 and SHAKE capabilities MUST be advertised as JSON objects within the 'algorithms'
                value of the ACVP registration message. The 'algorithms' value MUST be an array, where each
                array element is an individual JSON object defined in this section. The 'algorithms'
                value MUST be part of the 'capability_exchange' element of the ACVP JSON registration message.
                See the ACVP Protocol Specification Section XXX for details on the registration message.

                Each SHA3 and SHAKE algorithm capability advertised SHALL be a self-contained JSON object.
            </t>

            <t>
  				Each algorithm capability advertised is a self-contained JSON object.  The following
  				JSON values are used for hash algorithm capabilities:
            </t>

			<section anchor="hash_caps_reg" title="SHA3 and SHAKE Algorithm Capabilities Registration">
				<texttable anchor="caps_table" title="SHA3 and SHAKE Algorithm Capabilities JSON Values" suppress-title="false" style="full">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>
					<c>algorithm</c>
					<c>The hash algorithm and mode to be validated.</c>
					<c>string</c>

					<c>inBit</c>
					<c>Implementation does accept bit-oriented messages</c>
					<c>boolean</c>

					<c>inEmpty</c>
					<c>Implementation does accept null (zero-length) messages</c>
					<c>boolean</c>

					<c>outLength</c>
					<c>Output length for SHAKE</c>
					<c>domain</c>

					<c>outBit</c>
					<c>SHAKE can output bit-oriented messages</c>
					<c>boolean</c>
				</texttable>

                <t>
                    The following grid outlines which properties are REQUIRED, as well as all the possible values a server MAY support for SHA3 and SHAKE algorithms:
                </t>
                <texttable anchor="property_grid" title="SHA3 and SHAKE Capabilities Applicability Grid">
                <ttcol align="left">algorithm</ttcol><ttcol align="left">inBit</ttcol><ttcol align="left">inEmpty</ttcol><ttcol align="left">outLength</ttcol><ttcol align="left">outBit</ttcol>
                    <c>SHA3-224</c><c>true, false</c><c>true, false</c><c></c><c></c>
                    <c>SHA3-256</c><c>true, false</c><c>true, false</c><c></c><c></c>
                    <c>SHA3-384</c><c>true, false</c><c>true, false</c><c></c><c></c>
                    <c>SHA3-512</c><c>true, false</c><c>true, false</c><c></c><c></c>
                    <c>SHAKE-128</c><c>true, false</c><c>true, false</c><c>{"Min": 16, "Max": 65536, "Inc": any}</c><c>true, false</c>
                    <c>SHAKE-256</c><c>true, false</c><c>true, false</c><c>{"Min": 16, "Max": 65536, "Inc": any}</c><c>true, false</c>
                </texttable>
			</section>
		</section>

		<section anchor="test_vectors" title="Test Vectors">
            <t>
                After receiving a valid registration of a cryptographic module, the ACVP server SHALL provide test vectors in the form of a prompt
                to the ACVP client, which then SHALL be processed and returned to the ACVP server for validation.  A typical ACVP validation session would require the client to
                download and process multiple test vector sets.  Each test vector set SHALL represent an individual
                cryptographic algorithm, such as SHA3-256, SHA3-512, SHAKE-128.  This section
                describes the JSON schema for a test vector set used with SHA3 and SHAKE algorithms.
            </t>

            <t>
                The test vector set JSON schema is a multi-level hierarchy that contains meta-data for the entire
                vector set. The test vector set SHALL be comprised of test groups which SHALL subsequently contain individual test cases to be processed by the ACVP client. 
                The following table describes the REQUIRED JSON elements at the top level of the hierarchy:
            </t>
			<texttable anchor="vs_top_table" title="Test Vector Set JSON Object">
				<ttcol align="left">JSON Value</ttcol>
				<ttcol align="left">Description</ttcol>
				<ttcol align="left">JSON type</ttcol>
				<c>acvVersion</c>
				<c>Protocol version identifier</c>
				<c>string</c>

				<c>vsId</c>
				<c>Unique numeric identifier for the vector set</c>
				<c>integer</c>

				<c>algorithm</c>
				<c>The hash algorithm and mode used for the test vectors.  See <xref target="supported_algs"/> for possible values.</c>
				<c>string</c>

				<c>testGroups</c>
				<c>Array of test group JSON objects, which are defined in <xref target="tgjs"/></c>
				<c>array of testGroup objects</c>
			</texttable>

			<section title="Test Groups" anchor="tgjs">
                <t>
                    Test vector sets MUST contain one or many test groups, each sharing similar properties.
                    For instance, all test vectors that use the same key size would be grouped
                    together.  The testGroups element at the top level of the test vector JSON object SHALL be the array of test
                    groups.  The Test Group JSON object MUST contain meta-data that applies to all test cases within
                    the group.  The following table describes the JSON elements that MUST appear from the server in the Test Group JSON object:
                </t>
				<texttable anchor="vs_tg_table" title="Test Group JSON Object">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>
                    <c>tgId</c>
                    <c>Numeric identifier for the test group, unique across the entire vector set.</c>
                    <c>integer</c>

					<c>testType</c>
					<c>Test category type. AFT, MCT or VOT as defined in <xref target="testtypes"/></c>
					<c>value</c>

					<c>tests</c>
					<c>Array of individual test case JSON objects, which are defined in	<xref target="tcjs"/></c>
					<c>array of testCase objects</c>
				</texttable>
			</section>

			<section title="Test Case JSON Schema" anchor="tcjs">
                <t>
                    Each test group SHALL contain an array of one or more test cases.  Each test case is a JSON object
                    that represents a single case to be processed by the ACVP client.  The following table describes
                    the JSON elements for each test case.
                </t>

				<texttable anchor="vs_tc_table" title="Test Case JSON Object">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>
					<c>tcId</c>
					<c>Numeric identifier for the test case, unique across the entire vector set.</c>
					<c>integer</c>

					<c>len</c>
					<c>Length of the message or seed</c>
					<c>integer</c>

					<c>outLen</c>
					<c>Length of the digest</c>
					<c>integer</c>

					<c>msg</c>
					<c>Value of the message or seed.  Messages are represented as little-endian hex for all SHA3 variations.</c>
					<c>string (hex)</c>
				</texttable>
                <t>
                    Note: All properties listed in the above table are REQUIRED except for outLen which is only REQUIRED when the algorithm is SHAKE-128 or SHAKE-256.
                </t>
			</section>

			<section anchor="vector_responses" title="Test Vector Responses">
                <t>
                    After the ACVP client downloads and processes a vector set, it SHALL send the response vectors
                    back to the ACVP server within the alloted timeframe. The following table describes the JSON object that represents a vector set response.
                </t>
				<texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>
					<c>acvVersion</c>
					<c>Protocol version identifier</c>
					<c>string</c>

					<c>vsId</c>
					<c>Unique numeric identifier for the vector set</c>
					<c>integer</c>

					<c>testGroups</c>
					<c>Array of JSON objects that represent each test vector result, which uses the same JSON schema as defined in <xref target="tcjs"/></c>
					<c>array of testGroup objects</c>
				</texttable>

                <t>
                    The testGroup Response section is used to organize the ACVP client response in a similar manner
                    to how it receives vectors.  Several algorithms SHALL require the client to send back group
                    level properties in its response.  This structure helps accommodate that.
                </t>

                <texttable anchor="vr_group_table" title="Vector Set Group Response JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>
                    <c>tgId</c>
                    <c>The test group identifier</c>
                    <c>integer</c>

                    <c>tests</c>
                    <c>The tests associated to the group specified in tgId</c>
                    <c>array of testCase objects</c>
                </texttable>

                <t>
                    Each test case is a JSON object that represents a single test object to be processed by the ACVP client.
                    The following table describes the JSON elements for each test case object.
                </t>

                <texttable anchor="vs_tr_table" title="Test Case Results JSON Object">
                    <ttcol align="left">JSON Value</ttcol>
                    <ttcol align="left">Description</ttcol>
                    <ttcol align="left">JSON type</ttcol>

                    <c>tcId</c>
                    <c>Numeric identifier for the test case, unique across the entire vector set.</c>
                    <c>integer</c>

                    <c>md</c>
                    <c>The IUT's digest response to a VOT or AFT</c>
                    <c>string (hex)</c>

                    <c>resultsArray</c>
                    <c>Array of JSON objects that represent each iteration of a Monte Carlo Test. Each iteration will contain the msg and md (and outLen for SHAKE-128 and SHAKE-256)</c>
                    <c>array of objects containing msg, md (and potentially outLen)</c>
                </texttable>
                <t>
                    Note: The tcId MUST be included in every test case object sent between the client and the server.
                </t>
			</section>

			<!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

			<section anchor="Acknowledgements" title="Acknowledgements">
				<t>TBD...</t>
			</section>

			<!-- Possibly a 'Contributors' section ... -->

			<section anchor="IANA" title="IANA Considerations">
                <t>This memo include requests to IANA to join draft XXX.</t>
			</section>

			<section anchor="Security" title="Security Considerations">
				<t>Security considerations are addressed by the ACVP specification.</t>
			</section>
		</section>
	</middle>

	<back>
		<references title="Normative References">
			<!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
  	      	&RFC2119;

			<reference anchor="ACVP">
				<front>
					<title>ACVP Specification</title>
					<author initials="BF" surname="Fussell">
						<organization>Cisco</organization>
					</author>
					<date year="2019"/>
				</front>
			</reference>
		</references>

		<references title="Informative References">
			<reference anchor="SHAVS">
				<front>
					<title>The Secure Hash Algorithm Validation System (SHAVS)</title>
					<author initials="LEB" surname="Lawrence E. Bassham III">
						<organization>NIST</organization>
					</author>
					<date year="2014"/>
				</front>
			</reference>
		</references>


		<section anchor="app-reg-ex" title="Example Secure Hash Capabilities JSON Object">
			<t>The following is a example JSON object advertising support for SHA-256.</t>
			<figure>
				<artwork>
					<![CDATA[
{
	"algorithm": "ACVP-SHA3-256",
	"inBit": true,
	"inEmpty": true
}
]]>
				</artwork>
			</figure>
			<t>The following is an example JSON object advertising support for SHAKE-128.</t>
			<figure>
				<artwork>
					<![CDATA[
{
	"algorithm": "ACVP-SHAKE-128",
	"inBit": true,
	"inEmpty": true,
	"outBit": true,
	"outLength": [{
		"min": 16,
		"max": 1024
	}]
}
]]>
				</artwork>
			</figure>
		</section>
		<section anchor="app-vs-ex" title="Example Test Vectors JSON Object">
			<t>The following is an example JSON object for secure hash test vectors sent from the ACVP server to the crypto module. 
  	    		Notice that the single bit message is represented as "01". This complies with the little-endian nature of SHA3. All
  	    		hex displayed is little-endian bit order when associated with SHA3 or any of its variations.
			</t>
			<figure>
				<artwork>
					<![CDATA[
[
    { "acvVersion": <acvp-version> },
    { 
        "vsId": 1564,
  	    "algorithm": "ACVP-SHA3-512",
  	    "testGroups": [
  	    {
            "tgId": 1,
    		"testType": "AFT",
    		"tests": [
    		{
    			"tcId": 1,
    			"len": 0,
    			"msg": "00"
    		},
    		{
    			"tcId": 2,
    			"len": 1,
    			"msg": "01"
    		}]
    	}]
    }
]]>
				</artwork>
			</figure>
			<t>The following is another example JSON object for secure hash test vectors sent from the ACVP server to the crypto module.</t>
			<figure>
				<artwork>
					<![CDATA[
[
    { "acvVersion": <acvp-version> },
    { 
        "vsId": 1564,
        "algorithm": "ACVP-SHA3-256",
        "testGroups": [
        {
            "tgId": 1,
            "testType": "AFT",
            "tests": [
            {
                "tcId": 2170,
                "len": 1304,
                "msg": "7f65733c73c6d9b06838ca3fd3f0fed4c642c58bba59ed0c8b2ae618c4aa24611d3fc59f427574e0d6f38d1fb8ad8119855b7d5c5e2946a1ebb0685b9f258f903ed035e89dc07d04aabe5f10ab7f069ccb1e76a7d2c972fd34ba9dc44d68df51ebff0a400d0ebec3ea808a3a35ce5304a073fa959f9f39c96e2fce7855dddc4b2bb48ece19c8fdc6a02354c4dd0232fa0c424f4e4c1563ada1f943a23feb4d2706d707"
            },
            {
                "tcId": 2171,
                "len": 2096,
                "msg": "e2c3b1a24fbc47a05acbc950e3a32baa968ea1e2610fb2322bc68ed9c395a1641601682ca6db8420371f0dc4cb1c287ad1d5dc019aa8213b0c2d3a339a61455e74041121fa3f2f94778a4c860ccdbec1eac55c8ec4aa937c850fb65e3e0996936293538a3531718482d42e9c8cfe13054826ca94c95e2f7efc33a96295d5bb8a4978d66e3ef97279c0c55d1035f752d153c0cd18900c1ec8da62bc48890cddcb927943d5fddf59fb99247eeaeeffa1aa735b0e2401fc87e28864971701f823dfa35f42c75a2b4f9075bb3c309e5f281a10be34bf047593556c01e1d7e4dfb64de6f17a4d3d247bc2bc503cec2f6011a892b2e8f281c16aa8f00143901c0abd9dc1f9946e8e13"
            }]
        }]
    }
]]>
				</artwork>
			</figure>
			<t>The following is an example JSON object for secure hash Monte Carlo Test test vectors sent from the ACVP server to the crypto module.</t>
			<figure>
				<artwork>
					<![CDATA[
[
    { "acvVersion": <acvp-version> },
    { 
        "vsId": 1564,
        "algorithm": "ACVP-SHA3-384",
        "testGroups": [
        {
            "tgId": 2,
            "testType": "MCT",
            "tests": [
            {
                "tcId": 2175,
                "len": 384,
                "msg": "30850bd984b14ff5aff18993329268f45785a43cc5a837d45248c90d18e36c06cb3289cf4a661ace73b31a623c0b3ac7",
            }]
        }]
    }
]]>
				</artwork>
			</figure>
		</section>

		<section anchor="app-results-ex" title="Example Test Results JSON Object">
			<t>The following is a example JSON object for secure hash test results sent from the crypto module to the ACVP server.</t>
			<figure>
				<artwork>
					<![CDATA[
[
    { "acvVersion": <acvp-version> },
    { 
        "vsId": 1564,
        "testGroups": [
        {
            "tgId": 2,
            "tests": [
                {
                    "tcId": 2175,
                    "md": "CE2372967F76F2A6A41C3BF115BEBF6ECA3F63269579F6FC25861B64"
                }
            ]
        }]
    }
]]>
				</artwork>
			</figure>
			<t>The following is a example JSON object for secure hash Monte Carlo Test results sent from the crypto module to the ACVP server. Reduced to 2 iterations for brevity.</t>
			<figure>
				<artwork>
					<![CDATA[
[
    { "acvVersion": <acvp-version> },
    { 
        "vsId": 1564,
        "testGroups": [
        {
            "tgId": 2,
            "tests": [
                {
                    "tcId": 1254,
                    "resultsArray": [
                        {
                            "msg": "DAE0367015D3019BE3B2A35B9699D22D4D0B81D453EFD32724C149EE",
                            "md": "CE2372967F76F2A6A41C3BF115BEBF6ECA3F63269579F6FC25861B64"
                        },
                        {
                            "msg": "CE2372967F76F2A6A41C3BF115BEBF6ECA3F63269579F6FC25861B64",
                            "md": "A811B806FE4811B9CC822D7149F7BAC76EF3FA6A40863A865440E244"
                        }
                    ]
                }
            ]
        }]
    }
]]>
				</artwork>
			</figure>
		</section>

		<section anchor="app-variables-ex" title="Example Test Results JSON Object">
			<t>The following is a example JSON object for the SHAKE Variable Output Test sent from the ACVP server to the crypto module.</t>
			<figure>
				<artwork>
					<![CDATA[
[
    { "acvVersion": <acvp-version> },
    { 
        "vsId": 1564,
        "algorithm": "ACVP-SHAKE-128",
        "testGroups": [
        {
            "tgId": 1,
            "testType": "VOT",
            "tests": [
            {
                "tcId": 3456,
                "len": 128,
                "msg": "7a4c48eb710299e4ff2be3f446327a6f",
                "outputLen": 16
            },
            {
                "tcId": 3457,
                "len": 128,
                "msg": "b16f331b3a0cf4507124b4358f9d15f5",
                "outputLen": 144
            }]
        }]
    }
]]>
				</artwork>
			</figure>
			<t>The following is a example JSON object for the SHAKE Variable Output Test results sent from the crypto module to the ACVP server.</t>
			<figure>
				<artwork>
					<![CDATA[
[
    { "acvVersion": <acvp-version> },
    { 
        "vsId": 1564,
        "testGroups": [
        {
            "tgId": 1,
            "tests": [
                {
                    "tcId": 2170,
                    "outputLen": 16
                    "md": "c604"
                },
                {
                    "tcId": 2171,
                    "outputLen": 144
                    "md": "cfc6ed48bb2e61e0a48222d34a424ce9fdbe"
                }
            ]
        }]
    }
]]>
				</artwork>
			</figure>
		</section>
	</back>
</rfc>
