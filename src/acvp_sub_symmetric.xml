<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subsym-0.3" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="Sym Alg JSON">ACVP Symmetric Algorithm JSON Specification</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="John Foley" initials="J.F." role="editor" surname="Foley">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>foleyj@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="June" year="2016"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>TBD</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>acvp</keyword>
    <keyword>crypto</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document defines the JSON schema for using symmetric algorithms with the ACVP specification.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically
              verify the cryptographic implementation of a software or hardware crypto module.
              The ACVP specification defines how a crypto module communicates with an ACVP
              server, including crypto capabilities negotiation, session management, authentication,
	      vector processing and more.  The ACVP specification does not define algorithm specific
	      JSON constructs for performing the crypto validation.  A series of ACVP sub-specifications
	      define the constructs for testing individual crypto algorithms.  Each sub-specification
	      addresses a specific class of crypto algorithms.  This sub-specification defines the JSON
	      constructs for testing symmetric crypto algorithms using ACVP.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted in
	<xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

<section anchor="caps_reg" title="Capabilities Registration">
    <t>ACVP requires crypto modules to register their capabilities.  This allows the crypto
	module to advertise support for specific algorithms, notifying the ACVP server which
	algorithms need test vectors generated for the validation process.  This section
    describes the constructs for advertising support of symmetric algorithms to the ACVP server.</t>

    <t>The symmetric algorithm capabilities are advertised as JSON objects within the 'algorithms'
	value of the ACVP registration message.  The 'algorithms' value is an array, where each
	array element is an individual JSON object defined in this section.  The 'algorithms'
	value is part of the 'capability_exchange' element of the ACVP JSON registration message.
	See the ACVP specification for details on the registration message.

	Each symmetric algorithm capability advertised is a self-contained JSON object.</t>

	<section anchor="prereq_algs" title="Required Prerequisite Algorithms for Symmetric Validations">
	    <t>Some symmetric algorithm implementations rely on other cryptographic primitives.
	    For example, CCM uses an underlying AES algorithm. Each of these underlying algorithm primitives 
	    must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</t>
	    <texttable anchor="rereqs_table" title="Required Prerequisite Algorithms JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>
          <c>algorithm</c>
          <c>a prerequisite algorithm</c>
          <c>value</c>
          <c>AES, DRBG, TDES</c>
          <c>Yes</c>
          <c/><c/><c/><c/><c/>

          <c>valValue</c>
          <c>algorithm validation number</c>
          <c>value</c>
          <c>actual number or "same"</c>
          <c>Yes</c>
          <c/><c/><c/><c/><c/>

          <c>prereqAlgVal</c>
          <c>prerequisite algorithm validation</c>
          <c>object with algorithm and valValue properties</c>
          <c>see above</c>
          <c>Yes</c>

	  </texttable>
	  </section>

	<section anchor="cap_ex" title="Symmetric Algorithm Capabilities JSON Values">
	<t>Each algorithm capability advertised is a self-contained JSON object using the following values.</t>
        <texttable anchor="caps_table" title="Symmetric Algorithm Capabilities JSON Values">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>
          <ttcol align="left">Valid Values</ttcol>
          <ttcol align="left">Optional</ttcol>

          <c>algorithm</c>
	  <c>The symmetric algorithm and mode to be validated.</c>
          <c>value</c>
          <c>See <xref target="supported_algs"/></c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>prereqVals</c>
          <c>Prerequisite algorithm validations</c>
          <c>array of prereqAlgVal objects</c>
          <c>See <xref target="prereq_algs"/></c>
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>direction</c>
	  <c>The crypto operation direction</c>
          <c>array</c>
          <c>encrypt, decrypt</c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>keyLen</c>
	  <c>The supported key lengths in bits</c>
          <c>array</c>
          <c>128, 168, 192, 256</c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>ptLen</c>
	  <c>The supported plaintext lengths in bits.   This varies depending on the algorithm type, for additional details see <xref target="data_lengths"/></c>
          <c>range or array</c>
          <c>0-65536</c>
          <c>No</c>
	  <c/><c/><c/><c/><c/>

          <c>ivLen</c>
          <c>The supported IV/Nonce lengths in bits, see <xref target="data_lengths"/></c>
          <c>array</c>
          <c>8-1024</c>
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>ivGen</c>
          <c>IV generation method for AEAD algorithms</c>
          <c>value</c>
          <c>internal, external</c>
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>ivGenMode</c>
          <c>IV generation mode for AEAD algorithms</c>
          <c>value</c>
          <c>8.2.1, 8.2.2</c>
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>aadLen</c>
          <c>The supported AAD lengths in bits for AEAD algorithms, </c>
          <c>range or array</c>
          <c>0-65536</c>
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>tagLen</c>
          <c>The supported Tag lengths in bits for AEAD algorithms, <xref target="data_lengths"/></c>
          <c>array</c>
          <c>4-128</c>
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>kwCipher</c>
          <c>The cipher as defined in SP800-38F for key wrap mode</c>
          <c>array</c>
          <c>cipher, inverse</c>
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>tweakFormat</c>
          <c>The format of tweak value input for AES-XTS</c>
          <c>array</c>
          <c>128hex, duSequence</c>
          <c>Yes</c>
	  <c/><c/><c/><c/><c/>

          <c>keyingOption</c>
          <c>The Keying Option used in TDES.   
         
          Keying option 1 (1) is 3 distinct keys (K1, K2, K3).  
          Keying Option 2 (2) is 2 distinct only suitable for decrypt (K1, K2, K1).   
          Keying option 3 (No longer valid for testing, save KATs) is a single key, now deprecated (K1, K1, K1).</c>
          <c>array</c>
          <c>1, 2</c>
          <c>Yes</c>
    <c/><c/><c/><c/><c/>          

          <c>ctrSource</c>
          <c>The source of the counter for counter-mode</c>
          <c>value</c>
          <c>internal, external</c>
          <c>Yes</c>
        </texttable>
	<t>Note: Some optional values are required depending on the algorithm.  For example, AES-GCM
	    requires ivLen, ivGen, ivGenMode, aadLen and tagLen.  Failure to provide these values will
	result in the ACVP server returning an error to the ACVP client during registration.</t>
	</section>


	<section anchor="data_lengths" title="Data, IV and AAD Lengths">
	<t>Some algorithms allow ranges of data, IV and AAD lengths.  This table outlines the allowed values.</t>
        <texttable anchor="data_table" title="Symmetric Algorithm Capabilities JSON Values">
          <ttcol align="left">Algorithm</ttcol>
          <ttcol align="left">Payload</ttcol>
          <ttcol align="left">IV/Nonce</ttcol>
          <ttcol align="left">Tag</ttcol>
          <ttcol align="left">AAD</ttcol>

          <c>AES-CCM</c>
          <c>Range (min, max), minimum greater than or equal to zero and maximum less than or equal to 32</c>
          <c>Array of values from 7 to 13</c>
          <c>Array of values from 4 to 16, even values only</c>
          <c>Range (min, max), minimum greater than or equal to zero and maximum less than or equal to 65536</c>
	  <c/><c/><c/><c/><c/>

          <c>AES-GCM</c>
          <c>Array to include, if supported,  zero, two values divisible by 128 and two values not divisible by 128</c>
          <c>Array one to three values between 8 and 1024</c>
          <c>Array of supported values of: 32, 64, 96, 104, 112, 120, 128</c>
          <c>Array to include, if supported,  zero, two values divisible by 128 and two values not divisible by 128</c>
	  <c/><c/><c/><c/><c/>

          <c>AES-XTS</c>
          <c>Array to include, if supported,  zero, two values divisible by 128 and two values not divisible by 128. Followed by the maximum data length not to exceed 2^20</c>
          <c>N/A</c>
          <c>N/A</c>
          <c>N/A</c>

        </texttable>
	</section>

	<section anchor="supported_algs" title="Supported Symmetric Algorithms">
	    <t>The following symmetric algorithms may be advertised by the ACVP compliant crypto module:</t>
	    <t><list style="symbols">
		<t>AES-ECB</t>
		<t>AES-CBC</t>
		<t>AES-OFB</t>
		<t>AES-CFB1</t>
		<t>AES-CFB8</t>
		<t>AES-CFB128</t>
		<t>AES-CTR</t>
		<t>AES-GCM</t>
		<t>AES-CCM</t>
		<t>AES-XTS</t>
		<t>AES-KW</t>
		<t>AES-KWP</t>
		<t>TDES-ECB</t>
		<t>TDES-CBC</t>
		<t>TDES-CBC-I</t>
		<t>TDES-CFB1</t>
		<t>TDES-CFB8</t>
		<t>TDES-CFB64</t>
		<t>TDES-CFB-P1</t>
		<t>TDES-CFB-P8</t>
		<t>TDES-CFB-P64</t>
		<t>TDES-OFB</t>
		<t>TDES-OFB-I</t>
		<t>TDES-CTR</t>
		<t>TDES-KW</t>
	    </list></t>
	</section>

    </section>

    <section anchor="test_vectors" title="Test Vectors">
	<t>The ACVP server provides test vectors to the ACVP client, which are then processed and returned to
	    the ACVP server for validation.  A typical ACVP validation session would require multiple test vector
	    sets to be downloaded and processed by the ACVP client.  Each test vector set represents an individual
	    crypto algorithm, such as AES-ECB, AES-CBC, AES-CTR, AES-GCM, DES-CBC, DES-CTR, etc.  This section
	describes the JSON schema for a test vector set used with symmetric crypto algorithms.</t>

	<t>The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire
	vector set as well as individual test vectors to be processed by the ACVP client.  The following table
	describes the JSON elements at the top level of the hierarchy.
	</t>
	<texttable anchor="vs_top_table" title="Vector Set JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>

	  <c>acvVersion</c>
	  <c>Protocol version identifier</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>vsId</c>
	  <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>algorithm</c>
	  <c>The symmetric algorithm and mode used for the test vectors.  See <xref target="supported_algs"/> for possible values.</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>testGroups</c>
	  <c>Array of test group JSON objects, which are defined in <xref target="tgjs"/></c>
          <c>array</c>
	</texttable>

	<section title="Test Groups JSON Schema" anchor="tgjs">
	    <t>The testGroups element at the top level in the test vector JSON object is an array of test
		groups.  Test vectors are grouped into similar test cases to reduce the amount of data transmitted
	        in the vector set.  For instance, all test vectors that use the same key size would be grouped
	        together.  The Test Group JSON object contains meta data that applies to all test vectors within
	        the group.  The following table describes the JSON elements of the Test Group JSON object.</t>
	    <texttable anchor="vs_tg_table" title="Test Group JSON Object">
		<ttcol align="left">JSON Value</ttcol>
		<ttcol align="left">Description</ttcol>
		<ttcol align="left">JSON type</ttcol>
		<ttcol align="left">Optional</ttcol>
	  <c>direction</c>
	  <c>The encryption direction: encrypt or decrypt</c>
    <c>value</c>
		<c>No</c>	  
	  <c/><c/><c/><c/>
	  
		<c>keyLen</c>
		<c>Length of key in bits to use</c>
		<c>value</c>
		<c>No</c>
		<c/><c/><c/><c/>

		<c>ivLen</c>
		<c>Length of IV in bits to use</c>
		<c>value</c>
		<c>No</c>
		<c/><c/><c/><c/>

		<c>ptLen</c>
		<c>Length of plaintext in bits to</c>
		<c>value</c>
		<c>No</c>
		<c/><c/><c/><c/>

		<c>aadLen</c>
		<c>Length of AAD in bits to use</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>tagLen</c>
		<c>Length of AEAD tag in bits to use</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>testType</c>
		<c>The test category type (AFT or MCT)</c>
		<c>value</c>
		<c>No</c>
		<c/><c/><c/><c/>

		<c>tests</c>
		<c>Array of individual test vector JSON objects, which are defined in <xref target="tvjs"/></c>
		<c>array</c>
		<c>No</c>
	    </texttable>
	</section>

	<section title="Test Case JSON Schema" anchor="tvjs">
	    <t>Each test group contains an array of one or more test cases.  Each test case is a JSON object
		that represents a single vector to be processed by the ACVP client.  The following table describes
	    the JSON elements for each test case.</t>
	    <texttable anchor="vs_tc_table" title="Test Case JSON Object">
		<ttcol align="left">JSON Value</ttcol>
		<ttcol align="left">Description</ttcol>
		<ttcol align="left">JSON type</ttcol>
		<ttcol align="left">Optional</ttcol>

		<c>tcId</c>
		<c>Numeric identifier for the test case, unique across
		   the entire vector set.</c>
		<c>value</c>
		<c>No</c>
		<c/><c/><c/><c/>

		<c>key</c>
		<c>Encryption key to use</c>
		<c>value</c>
		<c>No</c>
		<c/><c/><c/><c/>

		<c>iv</c>
		<c>IV to use</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>pt</c>
		<c>Plaintext to use</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>ct</c>
		<c>Ciphertext to use</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>aad</c>
		<c>AAD to use for AEAD algorithms</c>
		<c>value</c>
		<c>Yes</c>
		<c/><c/><c/><c/>

		<c>tag</c>
		<c>Tag to use for AEAD algorithms</c>
		<c>value</c>
		<c>Yes</c>
	    </texttable>
	</section>
    </section>

    <section anchor="vector_responses" title="Test Vector Responses">
	<t>After the ACVP client downloads and processes a vector set, it must send the response vectors
	back to the ACVP server.  The following table describes the JSON object that represents a vector set response.</t>

	<texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
          <ttcol align="left">JSON Value</ttcol>
          <ttcol align="left">Description</ttcol>
          <ttcol align="left">JSON type</ttcol>

	  <c>acvVersion</c>
	  <c>Protocol version identifier</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>vsId</c>
	  <c>Unique numeric identifier for the vector set</c>
          <c>value</c>
	  <c/><c/><c/>

	  <c>testResults</c>
	  <c>Array of JSON objects that represent each test vector result, which uses the same
	      JSON schema as defined in <xref target="tvjs"/> </c>
          <c>array</c>
	</texttable>
    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TBD...</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Security considerations are addressed by the ACVP specification.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <reference anchor="ACVP">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>ACVP Specification</title>

          <author initials="authInitials" surname="authSurName">
            <organization>NIST</organization>
          </author>

          <date year="2016"/>
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="AESAVS">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>The Advanced Encryption Standard Algorithm Validation Suite (AESAVS)</title>

          <author initials="LEB" surname="Lawrence E. Bassham III">
            <organization>NIST</organization>
          </author>

          <date year="2002"/>
        </front>
      </reference>

      <reference anchor="CCMVS">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>The CCM Validation System (CCMVS)</title>

          <author initials="LEB" surname="Lawrence E. Bassham III">
            <organization>NIST</organization>
          </author>

          <date year="2012"/>
        </front>
      </reference>

      <reference anchor="GCMVS">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>The GCM, GMAC and XPN Validation System (GCMVS)</title>

          <author initials="SSK" surname="Sharon S. Keller">
            <organization>NIST</organization>
          </author>

          <date year="2016"/>
        </front>
      </reference>

      <reference anchor="XTSVS">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>The XTS-AES Validation System (XTSVS)</title>

          <author initials="SSK" surname="Sharon S. Keller">
            <organization>NIST</organization>
          </author>

          <date year="2013"/>
        </front>
      </reference>

      <reference anchor="KWVS">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>The Key Wrap Validation System (KWVS)</title>

          <author initials="TAH" surname="Timothy A. Hall">
            <organization>NIST</organization>
          </author>

          <date year="2014"/>
        </front>
      </reference>

      <reference anchor="TMOVS">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>Modes of Operation Validation System for the Triple Data Encryption Algorithm (TMOVS)</title>

          <author initials="SSK" surname="Sharon S. Keller">
            <organization>NIST</organization>
          </author>

          <date year="2012"/>
        </front>
      </reference>
    </references>

    <section anchor="app-reg-ex" title="Example Capabilities JSON Object">
      <t>The following is a example JSON object advertising support for AES-GCM.</t>
      <figure>
        <artwork><![CDATA[


            {
                "algorithm": "AES-GCM",
                "prereqVals" : [{"algorithm" : "AES", "valValue" : "123456"},
		                {"algorithm" : "DRBG", "valValue" : "123456"}],
                "direction": [
                    "encrypt",
                    "decrypt"
                ],
                "ivGen": "internal",
                "ivGenMode": "8.2.1",
                "supportsNonBlockBoundaryAadLen" : true,
                "supportsNonBlockBoundaryPtLen" : true,
                "keyLen": [
                    128,
                    192,
                    256
                ],
                "tagLen": [
                    96,
                    128
                ],
                "ivLen": {
                    "min" : 96,
                    "max" : 96
                },
                "ptLen": {
                    "min" : 0,
                    "max" : 256
                },
                "aadLen": {
                    "min" : 128,
                    "max" : 256
                }
            }
            ]]></artwork>
    </figure>
    </section>
    <section anchor="app-vs-ex" title="Example Test Vectors JSON Object">
      <t>The following is a example JSON object for test vectors sent from the ACVP server to the crypto module.</t>
      <figure>
        <artwork><![CDATA[
                {
                  "acvVersion": "0.3",
                  "vsId": 1564,
                  "algorithm": "AES-GCM",
                  "testGroups": [
                    {
                      "direction": "encrypt",
                      "keyLen": 128,
                      "ivLen": 96,
                      "ptLen": 0,
                      "aadLen": 128,
                      "tagLen": 128,
                      "testType" : "AFT",
                      "tests": [
                        {
                          "tcId": 2171,
                          "key": "1529BAC6229586F057FAA59353851686",
                          "pt": "",
                          "aad": "4B11160620475D8EE440C3795CF62D26"
                        },
                        {
                          "tcId": 2172,
                          "key": "FAD522CCB38D35E1C99553E365EEFDFB",
                          "pt": "",
                          "aad": "956BFE7469A028EEED645866042B942D"
                        },
                        {
                          "tcId": 2173,
                          "key": "FE965F164600CE5C5B9C2391892C6FC9",
                          "pt": "",
                          "aad": "B35A23FFD2F7BF0BA6762829B7B2D63D"
                        },
                        {
                          "tcId": 2174,
                          "key": "8A4DB9F30362EF235947B888B887CBDE",
                          "pt": "",
                          "aad": "94246F216E1C0DABEA5EEA02038956CF"
                        }
                      ]
                    },
                    {
                      "direction": "encrypt",
                      "keyLen": 128,
                      "ivLen": 96,
                      "ptLen": 0,
                      "aadLen": 136,
                      "tagLen": 128,
                      "testType" : "AFT",
                      "tests": [
                        {
                          "tcId": 2186,
                          "key": "5E296F244BB0A92BF0FF5F2C50FA7443",
                          "pt": "",
                          "aad": "B414F4DA8203C31815FF117B0553DBF618"
                        },
                        {
                          "tcId": 2187,
                          "key": "DAE8E9A248931962FDB03F4C3B227801",
                          "pt": "",
                          "aad": "FFDBB1801C99C87C6782CAA36E4F0BDDD0"
                        }
                      ]
                    },
                    {
                      "direction": "encrypt",
                      "keyLen": 128,
                      "ivLen": 96,
                      "ptLen": 128,
                      "aadLen": 128,
                      "tagLen": 128,
                      "testType" : "AFT",
                      "tests": [
                        {
                          "tcId": 2201,
                          "key": "3581AC6E264E869DD56E1DEA2E09244E",
                          "pt": "38FFABB895A04BA5AA33B63ECD3238B8",
                          "aad": "446D19353144014B04271BCBB125B617"
                        },
                        {
                          "tcId": 2202,
                          "key": "F448466CA1CA62A9B47B60A26EFA5AAA",
                          "pt": "FAD8882B53C70384083F0EF69692C468",
                          "aad": "292C7C9C55C062C0D1661BE6E629C449"
                        },
                        {
                          "tcId": 2203,
                          "key": "27B3C4CAFD6222FEE08403BC222DCBFD",
                          "pt": "2F75708AD2F1ADE3786885DEDDFC9B78",
                          "aad": "2AB6426DCFEB6909DF99D19063CCF88D"
                        },
                        {
                          "tcId": 2204,
                          "key": "5FF01D9CF8D84F1CCC67C50928C8105B",
                          "pt": "547CC5A970ABC938CF5703C7FD48A3BD",
                          "aad": "EABED39EE5B56F81CE5C858E507EAB13"
                        },
                        {
                          "tcId": 2205,
                          "key": "CE1D8C9E3AB2F46B01E3F110B3BC6E05",
                          "pt": "3DD9EEFA5C6E89C43D460907E8946B9C",
                          "aad": "DBE62172F439956FF21A67A379324100"
                        },
                        {
                          "tcId": 2206,
                          "key": "962574476C8D12E6487C6CDDA952E8C8",
                          "pt": "DFF4D0CFF9D8628FA51EB8E533A68C32",
                          "aad": "AEF2547382355E157E15DBECB64A8C77"
                        }
                      ]
                    }
                  ]
                }
            ]]></artwork>
    </figure>
    </section>
    <section anchor="app-results-ex" title="Example Test Results JSON Object">
      <t>The following is a example JSON object for test results sent from the crypto module to the ACVP server.</t>
      <figure>
        <artwork><![CDATA[
                {
                    "acvVersion": "0.3",
                    "vsId": 1564,
                    "testResults": [
                        {
                            "tcId": 2171,
                            "iv": "01020304C077A707E56C22AC",
                            "ct": "",
                            "tag": "53B15E85E377F8B5B6BFC2DE915FD622"
                        },
                        {
                            "tcId": 2172,
                            "iv": "01020304D666587803BCBAD7",
                            "ct": "",
                            "tag": "E7B1F2D77D82C6EB3C9CEFF16C376D9C"
                        },
                        {
                            "tcId": 2173,
                            "iv": "01020304D3B09894BB14B6CF",
                            "ct": "",
                            "tag": "DFF22B329AC87B82726EBBF20E66EEE2"
                        },
                        {
                            "tcId": 2174,
                            "iv": "01020304D678FBCC2EA341A2",
                            "ct": "",
                            "tag": "BAFBFA38AD5D6C6E7C97D08DDEC26580"
                        },
                        {
                            "tcId": 2186,
                            "iv": "01020304C6A745B0C4C9F2D5",
                            "ct": "",
                            "tag": "429FD5A0DAB344EF69B594A44CCAD3EB"
                        },
                        {
                            "tcId": 2187,
                            "iv": "010203043E56946A9C9E18D7",
                            "ct": "",
                            "tag": "7DA8BA92D64071909972395C981C4567"
                        },
                        {
                            "tcId": 2201,
                            "iv": "0102030479FD178FEB555D99",
                            "ct": "FA2AF4B01BA610DE3A3EDE0B88946E2D",
                            "tag": "3E77B921DB447F541EB5CC508D74CE4E"
                        },
                        {
                            "tcId": 2202,
                            "iv": "01020304C70FB9D3B9E1E329",
                            "ct": "568028D34EA82E8D30D1A3B952849A70",
                            "tag": "3D20D5935D6D37F6EE82FE0D2C7006F8"
                        },
                        {
                            "tcId": 2203,
                            "iv": "010203040D66A6EEA797B757",
                            "ct": "B2E10E2ECEC9FC3477841D3AED6469DB",
                            "tag": "DEF33A719333CAADE8002752922EC124"
                        },
                        {
                            "tcId": 2204,
                            "iv": "010203045B6CDA4B5CA26883",
                            "ct": "CF72C75B4E550AEA535750D6B16393DF",
                            "tag": "370D1175CF36A72585F20B379D064BCF"
                        },
                        {
                            "tcId": 2205,
                            "iv": "010203041E9FD60F49957FF5",
                            "ct": "A1F124EE6E98CAB776CCD601B7F65D6A",
                            "tag": "F4D7D0D75FC9961A12B3C6A3E6379972"
                        },
                        {
                            "tcId": 2206,
                            "iv": "0102030474CBC83C647DBEAF",
                            "ct": "2CE1129D3E2F25468A9EE13ED39C902C",
                            "tag": "48F3D4D7EB4B9FCB924ACC05B3834F98"
                        }
                    ]
                }

            ]]></artwork>
    </figure>


      <t>The following is a example JSON object for test vectors sent from the ACVP server to the crypto module for an AES-CBC Monte Carlo test.</t>
      <figure>
        <artwork><![CDATA[
                {
                  "acvVersion": "0.3",
                  "vsId": 1564,
                  "algorithm": "AES-CBC",
                  "testGroups": [
                    {
                      "direction": "encrypt",
                      "keyLen": 128,
                      "ivLen": 128
                      "ptLen": 128
                      "testType" : "MCT",
                      "tests": [
                        {
                          "tcId": 3171,
                          "key": "868a6705c03e630327259cd09e63354a",
			  "iv" : "a771c0fc42300fa7b4c1eca82e1eb2f9",
                          "pt": "8466e3b1680b40f8bae488e2f392ab33"
                        }
                    ]
                }

            ]]></artwork>
    </figure>


      <t>The following is a example JSON object for test results sent from the crypto module to the ACVP server for a Monte Carlo test, only 2 iterations shown for brevity. For MCT results of each iteration are fed into the next iteration.  Therefore the results carry all fields to assist in any failure diagnosis.</t>
      <figure>
        <artwork><![CDATA[
                {
                    "acvVersion": "0.3",
                    "vsId": 1564,
                    "testResults": [
                        {
			  "tcId": 3171,
			  "resultsArray": [
			    {
			      "count" : 0,
			      "key" : "868a6705c03e630327259cd09e63354a",
			      "iv": "a771c0fc42300fa7b4c1eca82e1eb2f9",
			      "pt": "8466e3b1680b40f8bae488e2f392ab33",
			      "ct": "161ac86ab184f638d43b1435161ebec4"
                            },
                            {
			      "count" : 1,
			      "key": "9090af6f71ba953bf31e88e5887d8b8e",
			      "iv": "161ac86ab184f638d43b1435161ebec4",
			      "pt": "b9cc35ba5d5ea63cf6516a200a17c36b",
			      "ct": "8c2998edf29357389483bcf33a6484df"
                            },
			  ]
		       }	
                    ]
                }
            ]]></artwork>
    </figure>




      <t>An example of the test results format from an AES-GCM decrypt operation including failure case.</t>
      <figure>
        <artwork><![CDATA[
                {
                    "acvVersion": "0.3",
                    "vsId": 1566,
                    "testResults": [
                        {
                            "tcId": 2171,
			    "pt" : "2CE1129D3E2F25468A9EE13ED39C902C"
                        },
                            "tcId": 2172,
			    "decryptFail" : "true"
                        }
                    ]
                }
            ]]></artwork>
    </figure>
    </section>
  </back>
</rfc>
