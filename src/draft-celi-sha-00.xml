<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-ietf-acvp-subsha-0.5" ipr="trust200902">
	<!-- category values: std, bcp, info, exp, and historic
    	 ipr values: full3667, noModification3667, noDerivatives3667
    	 you can add the attributes updates="NNNN" and obsoletes="NNNN"
    	 they will automatically be output with "(if approved)" -->

	<!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the
  	         full title is longer than 39 characters -->

		<title abbrev="Hash Alg JSON">ACVP Secure Hash Algorithm (SHA) JSON Specification</title>

		<!-- add 'role="editor"' below for the editors if appropriate -->

		<!-- Another author who claims to be an editor -->

		<author fullname="Christopher Celi" initials="C.C." role="editor" surname="Celi">
			<organization>National Institute of Standards and Technology</organization>

			<address>
				<postal>
					<street>100 Bureau Drive</street>
					<city>Gaithersburg</city>
					<region>MD</region>
					<code>20899</code>
					<country>USA</country>
				</postal>

				<email>christopher.celi@nist.gov</email>

				<!-- uri and facsimile elements may also be added -->
			</address>
		</author>

		<date month="February" year="2019"/>

		<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
  	         in the current day for you. If only the current year is specified, xml2rfc will fill
  		 in the current day and month for you. If the year is not the current one, it is
  		 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
  		 purpose of calculating the expiry date).  With drafts it is normally sufficient to
  		 specify just the year. -->

		<!-- Meta-data Declarations -->

		<area>General</area>

		<workgroup>TBD</workgroup>

		<!-- WG name at the upperleft corner of the doc,
  	         IETF is fine for individual submissions.
  		 If this element is not present, the default is "Network Working Group",
  	         which is used by the RFC Editor as a nod to the history of the IETF. -->

		<keyword>acvp</keyword>
		<keyword>crypto</keyword>

		<!-- Keywords will be incorporated into HTML output
  	         files in a meta tag but they have no effect on text or nroff
  	         output. If you submit your draft to the RFC Editor, the
  	         keywords will be used for the search engine. -->

		<abstract>
			<t>This document defines the JSON schema for using SHA1 and SHA2 with the ACVP
				specification.</t>
		</abstract>
	</front>

	<middle>
		<section title="Introduction">
			<t>
                The Automated Cryptographic Validation Protocol (ACVP) defines a mechanism to automatically
                verify the cryptographic implementation of a software or hardware cryptographic module. The intention of the protocol
                is to minimize human involvement in the testing of cryptography.
                The ACVP specification defines how a cryptographic module communicates with an ACVP
                server, including cryptographic capabilities negotiation, session management, authentication,
                vector processing and more. Note that the ACVP specification does not define algorithm-specific
                JSON constructs for performing the cryptographic validation. However, a series of ACVP sub-specifications
                defines the constructs for testing individual cryptographic algorithms. Each sub-specification
                addresses a specific class or subset of cryptographic algorithms. This sub-specification defines the JSON
                constructs for testing hash cryptographic algorithms using ACVP.  The ACVP server performs a set
                of tests on the hash functions in order to assess the correctness and robustness of the
                implementation. A typical ACVP validation session would require multiple tests to be performed for every supported
                cryptographic algorithm, such as SHA-1, SHA2-256 and SHA2-512.
            </t>

			<section title="Requirements Language">
				<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
					"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
					interpreted in <xref target="RFC2119">RFC 2119</xref>.
				</t>
			</section>
		</section>

		<section anchor="supported_algs" title="Supported Hash Algorithms">
			<t>The following hash algorithms MAY be advertised by the ACVP compliant cryptographic module:</t>
			<t>
				<list style="symbols">
					<t>ACVP-SHA-1</t>
					<t>ACVP-SHA2-224</t>
					<t>ACVP-SHA2-256</t>
					<t>ACVP-SHA2-384</t>
					<t>ACVP-SHA2-512</t>
					<t>ACVP-SHA2-512/224</t>
					<t>ACVP-SHA2-512/256</t>
				</list>
			</t>
		</section>

		<section anchor="testtypes" title="Test Types and Test Coverage">
			<t>
				This section describes the design of the tests used to validate implementations of SHA-1 and SHA-2.
				There are two types of tests for SHA-1 and SHA-2: functional tests and Monte Carlo tests. Each has a specific value to be used in the
				testType field. The testType field definitions are:

				<list style="symbols">
					<t>
						"AFT" - Algorithm Functional Test. These tests can be processed by the client using a normal 'hash' operation.
						AFTs cause the implementation under test to exercise nomral operations on a single block, multiple blocks, or partial blocks. In all cases,
						random data is used. The functional tests are designed to verify that the logical components of the hash function (block chunking, block padding etc.)
						are opertating correctly.
					</t>
					<t>
						"MCT" - Monte Carlo Test. These tests exercise the implementation under test under strenuous circumstances. The implementation under test
						must process the test vectors according to the correct algorithm and mode in this document. MCTs can help detect potential memory leaks
						over time, and problems in allocation of resources, addressing variables, error handling, and generally improper behavior in response to
						random inputs. Each MCT processes 100 pseudorandom tests. Each algorithm and mode SHOULD have at least one MCT group. See <xref target="MC_test"/>
						for implementation details.
					</t>
				</list>
			</t>

			<section anchor="MC_test" title="Monte Carlo tests for SHA-1 and SHA-2">
				<t>
					The MCTs start with an initial condition (SEED which is a single message) and perform a series of chained computations.
				</t>

				<t>
					The algorithm is shown in <xref target="xml_figureMCT"/>.
				</t>
				<figure align="center" anchor="xml_figureMCT">
					<preamble>SHA-1 and SHA-2 Monte Carlo Test</preamble>
					<artwork align="left">
						<![CDATA[
For j = 0 to 99
MD[0] = MD[1] = MD[2] = SEED
	For i = 3 to 1003
		MSG[i] = MD[i-3] || MD[i-2] || MD[i-1]
		MD[i] = SHA(MSG[i])
	Output MD[1002]
						]]>
					</artwork>
				</figure>
			</section>

			<section anchor="test_coverage" title="Test Coverage">
				<t>
					The tests described in this document have the intention of ensuring an implementation is conformant to <xref target="FIPS-180-4"/>.
				</t>
				<section anchor="sha-coverage" title="SHA Requirements Covered">
					<t>
						Sections 3 and 4 in <xref target="FIPS-180-4"/> outline the core functions used within the hash algorithms. Normal AFTs test these operations.
						Section 5 outlines the hash function preprocessing. It is worth noting that not all test cases will cover the message padding process, but through 
						the entire vector set, this operation will be fully tested.
					</t>
				</section>
				<section anchor="sha-not-coverage" title="SHA Requirements Not Covered">
					<t>
						Section 1 in <xref target="FIPS-180-4"/> outlines the maximum message sizes for each hash function. Due to the large size (either 2^64 or 2^128 bits)
						of these maximums, they are not tested by this specification.
						Section 7 outlines digest truncation for applications where a shortened digest is needed. These operations are not tested via this specification.
					</t>
				</section>
			</section>
		</section>

		<section anchor="caps_reg" title="Capabilities Registration">
            <t>
                This section describes the constructs for advertising support of hash algorithms to the
                ACVP server. ACVP REQUIRES cryptographic modules to register their capabilities in a registration.
                This allows the cryptographic module to advertise support for specific algorithms, notifying the ACVP server which
                algorithms need test vectors generated for the validation process.
            </t>

            <t>
                The hash algorithm capabilities MUST be advertised as JSON objects within the 'algorithms'
                value of the ACVP registration message. The 'algorithms' value MUST be an array, where each
                array element is an individual JSON object defined in this section. The 'algorithms'
                value MUST be part of the 'capability_exchange' element of the ACVP JSON registration message.
                See the ACVP Protocol Specification Section XXX for details on the registration message.

                Each hash algorithm capability advertised SHALL be a self-contained JSON object.
            </t>

			<section anchor="hash_caps_reg" title="HASH Algorithm Capabilities Registration">
				<texttable anchor="caps_table" title="Hash Algorithm Capabilities JSON Values" suppress-title="false" style="full">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>

					<c>algorithm</c>
					<c>The hash algorithm and mode to be validated.</c>
					<c>string</c>

					<c>inBit</c>
					<c>Implementation does accept bit-oriented messages</c>
					<c>boolean</c>

					<c>inEmpty</c>
					<c>Implementation does accept null (zero-length) messages</c>
					<c>boolean</c>
				</texttable>
				<t>
					The value of the algorithm property MUST be one of the elements from the list in <xref target="supported_algs"/>.
				</t>
			</section>
		</section>

		<section anchor="test_vectors" title="Test Vectors">
            <t>
                After receiving a valid registration of a cryptographic module, the ACVP server SHALL provide test vectors in the form of a prompt
                to the ACVP client, which then SHALL be processed and returned to the ACVP server for validation.  A typical ACVP validation session would require the client to
                download and process multiple test vector sets.  Each test vector set SHALL represent an individual
                cryptographic algorithm, such as SHA-1, SHA2-256, SHA2-512, etc.  This section
                describes the JSON schema for a test vector set used with hash algorithms.
            </t>

            <t>
                The test vector set JSON schema is a multi-level hierarchy that contains meta-data for the entire
                vector set. The test vector set SHALL be comprised of test groups which SHALL subsequently contain individual test cases to be processed by the ACVP client. The following table
                describes the REQUIRED JSON elements at the top level of the hierarchy:
            </t>
			<texttable anchor="vs_top_table" title="Vector Set JSON Object">
				<ttcol align="left">JSON Value</ttcol>
				<ttcol align="left">Description</ttcol>
				<ttcol align="left">JSON type</ttcol>
				<c>acvVersion</c>
				<c>Protocol version identifier</c>
				<c>string</c>

				<c>vsId</c>
				<c>Unique numeric identifier for the vector set</c>
				<c>integer</c>

				<c>algorithm</c>
				<c>The hash algorithm and mode used for the test vectors. See <xref target="supported_algs"/> for possible values.</c>
				<c>string</c>

				<c>testGroups</c>
				<c>Array of test group JSON objects, which are defined in <xref target="tgjs"/></c>
				<c>array of testGroup objects</c>
			</texttable>

			<section title="Test Groups" anchor="tgjs">
                <t>
                    Test vector sets MUST contain one or many test groups, each sharing similar properties.
                    For instance, all test vectors that use the same testType would be grouped
                    together.  The testGroups element at the top level of the test vector JSON object SHALL be the array of test
                    groups.  The Test Group JSON object MUST contain meta-data that applies to all test cases within
                    the group.  The following table describes the JSON elements that MAY appear from the server in the Test Group JSON object:
                </t>
				<texttable anchor="vs_tg_table" title="Test Group JSON Object">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>
					<c>tgId</c>
					<c>Numeric identifier for the test group, unique across the entire vector set</c>
					<c>integer</c>

					<c>testType</c>
					<c>Test category type (AFT or MCT). See <xref target="testtypes"/> for more information</c>
					<c>string</c>

					<c>inBit</c>
					<c>States that each test case in the group may contain a message with a length not at a byte boundary</c>
					<c>boolean</c>

					<c>inEmpty</c>
					<c>States that the empty message is included in the group</c>
					<c>boolean</c>

					<c>tests</c>
					<c>Array of individual test case JSON objects, which are defined in	<xref target="tcjs"/></c>
					<c>array of testCase objects</c>
				</texttable>
				<t>
					All properties described in the previous table MUST appear in the prompt file from the server for every testGroup object.
				</t>
			</section>

			<section title="Test Case" anchor="tcjs">
                <t>
                    Each test group SHALL contain an array of one or more test cases.  Each test case is a JSON object
                    that represents a single case to be processed by the ACVP client.  The following table describes
                    the JSON elements for each test case.
                </t>
				<texttable anchor="vs_tc_table" title="Test Case JSON Object">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>
					<c>tcId</c>
					<c>Numeric identifier for the test case, unique across the entire vector set.</c>
					<c>integer</c>

					<c>len</c>
					<c>Length of the message or MCT seed</c>
					<c>integer</c>

					<c>msg</c>
					<c>Value of the message or MCT seed in big-endian hex</c>
					<c>integer</c>
				</texttable>
				<t>
					All properties described in the previous table MUST appear in the prompt file from the server for every testCase object.
				</t>
			</section>

			<section anchor="vector_responses" title="Test Vector Responses">
				<t>
					After the ACVP client downloads and processes a vector set, it SHALL send the response vectors
					back to the ACVP server within the alloted timeframe. The following table describes the JSON object that represents a vector set response.
				</t>
				<texttable anchor="vr_top_table" title="Vector Set Response JSON Object">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>

					<c>acvVersion</c>
					<c>Protocol version identifier</c>
					<c>string</c>

					<c>vsId</c>
					<c>Unique numeric identifier for the vector set</c>
					<c>integer</c>

					<c>testResults</c>
					<c>Array of JSON objects that represent each test vector result, which uses the
						same JSON schema as defined in <xref target="tcjs"/></c>
					<c>array of testGroup objects</c>
				</texttable>

				<t>
					The testGroup Response section is used to organize the ACVP client response in a similar manner
					to how it receives vectors.  Several algorithms SHALL require the client to send back group
					level properties in its response.  This structure helps accommodate that.
				</t>

				<texttable anchor="vr_group_table" title="Vector Set Group Response JSON Object">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>

					<c>tgId</c>
					<c>The test group identifier</c>
					<c>integer</c>

					<c>tests</c>
					<c>The tests associated to the group specified in tgId</c>
					<c>array of testCase objects</c>
				</texttable>

				<t>
					Each test case is a JSON object that represents a single test object to be processed by the ACVP client.
					The following table describes the JSON elements for each test case object.
				</t>
				<texttable anchor="vs_tr_table" title="Test Case Results JSON Object">
					<ttcol align="left">JSON Value</ttcol>
					<ttcol align="left">Description</ttcol>
					<ttcol align="left">JSON type</ttcol>

					<c>tcId</c>
					<c>Numeric identifier for the test case, unique across the entire vector set.</c>
					<c>integer</c>

					<c>md</c>
					<c>The IUT's message digest response to an AFT test</c>
					<c>string (hex)</c>

					<c>resultsArray</c>
					<c>Array of JSON objects that represent each iteration of an MCT. Each iteration will contain the msg and md</c>
					<c>array of objects containing msg and md</c>
				</texttable>
				<t>
					Note: The tcId MUST be included in every test case object sent between the client and the server.
				</t>
			</section>

			<!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

			<section anchor="Acknowledgements" title="Acknowledgements">
				<t>TBD...</t>
			</section>

			<!-- Possibly a 'Contributors' section ... -->

			<section anchor="IANA" title="IANA Considerations">
				<t>This memo includes requests to IANA to join draft-vassilev-acvp-iana-00.</t>
			</section>

			<section anchor="Security" title="Security Considerations">
				<t>Security considerations are addressed by the ACVP specification.</t>
			</section>
		</section>
	</middle>

	<back>
		<references title="Normative References">
			<!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
			&RFC2119;			<reference anchor="ACVP">
				<front>
					<title>ACVP Specification</title>
					<author initials="BF" surname="Fussell">
						<organization>Cisco</organization>
					</author>
					<date year="2019"/>
				</front>
			</reference>
		</references>

		<references title="Informative References">
			<reference anchor="SHAVS">
				<front>
					<title>The Secure Hash Algorithm Validation System (SHAVS)</title>
					<author initials="LEB" surname="Lawrence E. Bassham III">
						<organization>NIST</organization>
					</author>
					<date year="2014"/>
				</front>
			</reference>

			<reference anchor="FIPS-180-4">
				<front>
					<title>Secure Hash Standard (SHS)</title>
					<author>
						<organization>NIST</organization>
					</author>
					<date year="2015" month="August"/>
				</front>
			</reference>
		</references>

		<section anchor="app-reg-ex" title="Example Secure Hash Capabilities JSON Object">
			<t>The following is a example JSON object advertising support for SHA-256.</t>
			<figure>
				<artwork>
					<![CDATA[
{
	"algorithm": "ACVP-SHA2-256",
	"inBit": true,
	"inEmpty": true
}
]]>
				</artwork>
			</figure>
		</section>
		<section anchor="app-vs-ex" title="Example Test Vectors JSON Object">
			<t>The following is an example JSON object for secure hash test vectors sent from the
				ACVP server to the crypto module. Note the single bit message is represented as "80".
				This complies with SHA1 and SHA2 being big-endian by nature. All hex strings associated
				with SHA1 and SHA2 will be big-endian.
			</t>
			<figure>
				<artwork>
					<![CDATA[
   [
      { "acvVersion": <acvp-version> },
      { "vsId": 1564,
  	"algorithm": "ACVP-SHA2-512/224",
  	"testGroups": [
  	{
  		"testType": "AFT",
  		"tests": [
  		{
  			"tcId": 0,
  			"len": 0,
  			"msg": "00"
  		},
  		{
  			"tcId": 1,
  			"len": 1,
  			"msg": "80"
  		}]
  	}]
     }]
]]>
				</artwork>
			</figure>
			<t>The following is another example JSON object for secure hash test vectors sent from
				the ACVP server to the crypto module.</t>
			<figure>
				<artwork>
					<![CDATA[
   [
      { "acvVersion": <acvp-version> },
      { "vsId": 1564,
  	"algorithm": "ACVP-SHA2-256",
  	"testGroups": [
    {
      	"testType": "AFT",
      	"tests": [
        {
          	"tcId": 2170,
          	"len": 1304,
          	"msg": "7f65733c73c6d9b06838ca3fd3f0fed4c642c58bba59ed0c8b2ae618c4aa24611d3fc59f427574e0d6f38d1fb8ad8119855b7d5c5e2946a1ebb0685b9f258f903ed035e89dc07d04aabe5f10ab7f069ccb1e76a7d2c972fd34ba9dc44d68df51ebff0a400d0ebec3ea808a3a35ce5304a073fa959f9f39c96e2fce7855dddc4b2bb48ece19c8fdc6a02354c4dd0232fa0c424f4e4c1563ada1f943a23feb4d2706d707"
        },
        {
          	"tcId": 2171,
          	"len": 2096,
          	"msg": "e2c3b1a24fbc47a05acbc950e3a32baa968ea1e2610fb2322bc68ed9c395a1641601682ca6db8420371f0dc4cb1c287ad1d5dc019aa8213b0c2d3a339a61455e74041121fa3f2f94778a4c860ccdbec1eac55c8ec4aa937c850fb65e3e0996936293538a3531718482d42e9c8cfe13054826ca94c95e2f7efc33a96295d5bb8a4978d66e3ef97279c0c55d1035f752d153c0cd18900c1ec8da62bc48890cddcb927943d5fddf59fb99247eeaeeffa1aa735b0e2401fc87e28864971701f823dfa35f42c75a2b4f9075bb3c309e5f281a10be34bf047593556c01e1d7e4dfb64de6f17a4d3d247bc2bc503cec2f6011a892b2e8f281c16aa8f00143901c0abd9dc1f9946e8e13"
        }]
     }]
  }]
]]>
				</artwork>
			</figure>
			<t>The following is an example JSON object for secure hash Monte Carlo test vectors sent
				from the ACVP server to the crypto module.</t>
			<figure>
				<artwork>
					<![CDATA[
[
  { "acvVersion": <acvp-version> },
  { "vsId": 1564,
    "algorithm": "ACVP-SHA-1",
    "testGroups": [
    {
        "testType": "MCT",
        "tests": [
        {
            "tcId": 2175,
            "len": 20,
            "msg": "331b04d56f6e3ed5af349bf1fd9f9591b6ec886e",
        }]
     }]
  }]
]]>
				</artwork>
			</figure>
		</section>

		<section anchor="app-results-ex" title="Example Test Results JSON Object">
			<t>The following is a example JSON object for secure hash test results sent from the
				crypto module to the ACVP server.</t>
			<figure>
				<artwork>
					<![CDATA[
[
  { "acvVersion": <acvp-version> },
  { "vsId": 1564,
    "testResults": [
    {
        "tcId": 2170,
        "md": "7115011d389f379798455039d5da962a077d1620d52d7e983af9b49e3c4283f3"
    },
    {
        "tcId": 2171,
        "md": "79820a5256eb1371cf8bc94fa17eaedc25aa5d28ae8706cbf77b9a6e3a79acd5"
     }]
  }]
]]>
				</artwork>
			</figure>
			<t>The following is a example JSON object for secure hash Monte Carlo test results sent
				from the crypto module to the ACVP server. Reduced to 2 iterations for brevity.</t>
			<figure>
				<artwork>
					<![CDATA[
[
  { "acvVersion": <acvp-version> },
  { "vsId": 1564,
    "testResults": [
    {
		"tcId": 10246,
		"resultsArray": [
		{
			"msg": "4e971d7d4bb5a67b2fb51e1b6026f9e561b05779ad4783daa999812260f7623f4e971d7d4bb5a67b2fb51e1b6026f9e561b05779ad4783daa999812260f7623f4e971d7d4bb5a67b2fb51e1b6026f9e561b05779ad4783daa999812260f7623f",
			"md": "220b2bd187bd61affab14cdcfe76dce236c56a9072d55b4f6ac0b739e3c023f7"
		},
		{
			"msg": "220b2bd187bd61affab14cdcfe76dce236c56a9072d55b4f6ac0b739e3c023f7220b2bd187bd61affab14cdcfe76dce236c56a9072d55b4f6ac0b739e3c023f7220b2bd187bd61affab14cdcfe76dce236c56a9072d55b4f6ac0b739e3c023f7",
			"md": "5eec0361d25bfbc2468d70e2262783145523ffe627052585069413d30ff2caf9"
		},
		{
			"msg": "5eec0361d25bfbc2468d70e2262783145523ffe627052585069413d30ff2caf95eec0361d25bfbc2468d70e2262783145523ffe627052585069413d30ff2caf95eec0361d25bfbc2468d70e2262783145523ffe627052585069413d30ff2caf9",
			"md": "efbed7619701beda3eeb79946565cf33643b45783f38a4f8a855607bd4d23ce6"
		}]
    }]
  }
]]>
				</artwork>
			</figure>
		</section>
	</back>
</rfc>
