



Network Working Group                                       N. Ross, Ed.
Internet-Draft                                           17 October 2025
Intended status: Informational                                          
Expires: 20 April 2026


                     ACVP Ascon JSON Specification
                        draft-ross-acvp-ascon-01

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 April 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Abstract  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Conventions . . . . . . . . . . . . . . . . . . . . . . . . .   3
     4.1.  Notation conventions  . . . . . . . . . . . . . . . . . .   3
     4.2.  Terms and Definitions . . . . . . . . . . . . . . . . . .   3
       4.2.1.  Prompt  . . . . . . . . . . . . . . . . . . . . . . .   3
       4.2.2.  Registration  . . . . . . . . . . . . . . . . . . . .   3
       4.2.3.  Response  . . . . . . . . . . . . . . . . . . . . . .   4



Ross                      Expires 20 April 2026                 [Page 1]

Internet-Draft                 ACVP Ascon                   October 2025


       4.2.4.  Test Case . . . . . . . . . . . . . . . . . . . . . .   4
       4.2.5.  Test Group  . . . . . . . . . . . . . . . . . . . . .   4
       4.2.6.  Test Vector Set . . . . . . . . . . . . . . . . . . .   4
       4.2.7.  Validation  . . . . . . . . . . . . . . . . . . . . .   4
   5.  Supported Ascon Algorithms  . . . . . . . . . . . . . . . . .   4
   6.  Test Types and Test Coverage  . . . . . . . . . . . . . . . .   4
     6.1.  Test Types  . . . . . . . . . . . . . . . . . . . . . . .   4
       6.1.1.  Ascon AEAD Test Types . . . . . . . . . . . . . . . .   5
       6.1.2.  Ascon Hash Test Types . . . . . . . . . . . . . . . .   5
       6.1.3.  Ascon XOF Test Types  . . . . . . . . . . . . . . . .   6
       6.1.4.  Ascon CXOF Test Types . . . . . . . . . . . . . . . .   6
     6.2.  Test Coverage . . . . . . . . . . . . . . . . . . . . . .   6
       6.2.1.  Requirements Covered  . . . . . . . . . . . . . . . .   6
       6.2.2.  Requirements Not Covered  . . . . . . . . . . . . . .   6
   7.  Capabilities Registration . . . . . . . . . . . . . . . . . .   6
     7.1.  Prerequisites . . . . . . . . . . . . . . . . . . . . . .   7
     7.2.  Ascon AEAD128 Registration Properties . . . . . . . . . .   8
       7.2.1.  Ascon AEAD128 Mode Capabilities Example . . . . . . .   9
     7.3.  Ascon Hash256 Registration Properties . . . . . . . . . .  10
       7.3.1.  Ascon Hash256 Mode Capabilities Example . . . . . . .  11
     7.4.  Ascon XOF128 Registration Properties  . . . . . . . . . .  11
       7.4.1.  Ascon XOF128 Mode Capabilities Example  . . . . . . .  12
     7.5.  Ascon CXOF128 Registration Properties . . . . . . . . . .  13
       7.5.1.  Ascon CXOF128 Mode Capabilities Example . . . . . . .  13
   8.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .  14
     8.1.  Ascon AEAD128 Test Vectors  . . . . . . . . . . . . . . .  15
       8.1.1.  Ascon AEAD128 Test Groups JSON Schema . . . . . . . .  16
       8.1.2.  Ascon AEAD128 Test Case JSON Schema . . . . . . . . .  16
     8.2.  Ascon Hash256 Test Vectors  . . . . . . . . . . . . . . .  19
       8.2.1.  Ascon Hash256 Test Groups JSON Schema . . . . . . . .  19
       8.2.2.  Ascon Hash256 Test Case JSON Schema . . . . . . . . .  20
     8.3.  Ascon XOF128 Test Vectors . . . . . . . . . . . . . . . .  21
       8.3.1.  Ascon XOF128 Test Groups JSON Schema  . . . . . . . .  21
       8.3.2.  Ascon XOF128 Test Case JSON Schema  . . . . . . . . .  22
     8.4.  Ascon CXOF128 Test Vectors  . . . . . . . . . . . . . . .  23
       8.4.1.  Ascon CXOF128 Test Groups JSON Schema . . . . . . . .  23
       8.4.2.  Ascon CXOF128 Test Case JSON Schema . . . . . . . . .  24
   9.  Test Vector Responses . . . . . . . . . . . . . . . . . . . .  25
     9.1.  Ascon AEAD128 Test Vector Responses . . . . . . . . . . .  26
     9.2.  Ascon Hash256 Test Vector Responses . . . . . . . . . . .  28
     9.3.  Ascon XOF128 Test Vector Responses  . . . . . . . . . . .  29
     9.4.  Ascon CXOF128 Test Vector Responses . . . . . . . . . . .  30
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  31
   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  31
   12. Normative References  . . . . . . . . . . . . . . . . . . . .  31
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  32





Ross                      Expires 20 April 2026                 [Page 2]

Internet-Draft                 ACVP Ascon                   October 2025


1.  Acknowledgements

   There are no acknowledgements.

2.  Abstract

   This document defines the JSON schema for testing Ascon
   implementations with the ACVP specification.

3.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing Ascon
   implementations using ACVP.

4.  Conventions

4.1.  Notation conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "*NOT RECOMMENDED*", "MAY",
   and "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 of [RFC2119] and [RFC8174] when, and only when, they appear in
   all capitals, as shown here.

4.2.  Terms and Definitions

4.2.1.  Prompt

   JSON sent from the server to the client describing the tests the
   client performs

4.2.2.  Registration

   The initial request from the client to the server describing the
   capabilities of one or several algorithm, mode and revision
   combinations





Ross                      Expires 20 April 2026                 [Page 3]

Internet-Draft                 ACVP Ascon                   October 2025


4.2.3.  Response

   JSON sent from the client to the server in response to the prompt

4.2.4.  Test Case

   An individual unit of work within a prompt or response

4.2.5.  Test Group

   A collection of test cases that share similar properties within a
   prompt or response

4.2.6.  Test Vector Set

   A collection of test groups under a specific algorithm, mode, and
   revision

4.2.7.  Validation

   JSON sent from the server to the client that specifies the
   correctness of the response

5.  Supported Ascon Algorithms

   The following Ascon algorithms MAY be advertised by the ACVP
   compliant cryptographic module.  The list is in the form "algorithm /
   mode / revision".

   *  Ascon / AEAD128 / SP800-232

   *  Ascon / Hash256 / SP800-232

   *  Ascon / XOF128 / SP800-232

   *  Ascon / CXOF128 / SP800-232

6.  Test Types and Test Coverage

6.1.  Test Types

   The ACVP server performs a set of tests on the specified Ascon
   algorithm in order to assess the correctness and robustness of the
   implementation.  A typical ACVP validation session SHALL require
   multiple tests to be performed for every supported permutation of
   Ascon capabilities.  This section describes the design of the tests
   used to validate implementations of the Ascon algorithms.  The number
   of tests MAY vary but the minimum number required by each test type



Ross                      Expires 20 April 2026                 [Page 4]

Internet-Draft                 ACVP Ascon                   October 2025


   SHALL be included by the server.  The test type describes the format
   of the test rather than the intention of the test.  Multiple tests of
   the same test type MAY cover different assurances regarding the
   implementation.

6.1.1.  Ascon AEAD Test Types

   *  Ascon / AEAD128 / * "AFT" - Algorithm Functional Test.

   For each test case provided the IUT SHALL perform either encryption
   or decryption.  In the case of encryption, the IUT SHALL use the
   provided key, nonce, associated data, payload, payload bit length,
   associated data bit length, tag length, and second key values.  The
   IUT-computed ciphertext and tag are communicated to the ACVP server
   and compared to the expected ciphertext and tag.  This tests the
   implementation of Algorithm 3 Ascon-AEAD128.enc() from [SP800-232]
   Section 4.1.1.  The server SHALL provide at least 60 tests for each
   combination of capabilities.  In the case of decryption, the IUT
   SHALL use the provided key, nonce, associated data, ciphertext, tag,
   ciphertext bit length, associated data bit length, tag length, and
   second key values.  The IUT-computed payload is communicated to the
   ACVP server and compared to the expected payload.  In some decrypt
   cases, the server may provide a modified tag value which will cause
   the server to expect a failure response.  This tests the
   implementation of Algorithm 4 Ascon-AEAD128.dec() from [SP800-232]
   Section 4.1.2.  The server SHALL provide at least 60 tests for each
   combination of capabilities.

   The decypt modifcations are:

   *  "valid input - ciphertext should decrypt successfully" - No
      modifications to the inputs are made and decryption will complete
      successfully.

   *  "modified tag" - The tag is modified and decryption will fail.

6.1.2.  Ascon Hash Test Types

   *  Ascon / Hash256 / * "AFT" - Algorithm Functional Test.

   For each test case provided the IUT SHALL generate a valid digest
   given the ACVP-provided message and message bit length.  The digest
   is then compared to the known result by the ACVP server.  This tests
   the implementation of Algorithm 5 Ascon-Hash256() from [SP800-232]
   Section 5.1.  The server SHALL provide at least 60 tests generated
   for each combination of capabilities.





Ross                      Expires 20 April 2026                 [Page 5]

Internet-Draft                 ACVP Ascon                   October 2025


6.1.3.  Ascon XOF Test Types

   *  Ascon / XOF128 / * "AFT" - Algorithm Functional Test.

   For each test case provided the IUT SHALL generate a valid digest
   given the ACVP-provided message, message bit length, and digest bit
   length.  The digest is then compared to the known result by the ACVP
   server.  This tests the implementation of Algorithm 6 Ascon-XOF128()
   from [SP800-232] Section 5.2.  The server SHALL provide at least 60
   tests generated for each combination of capabilities.

6.1.4.  Ascon CXOF Test Types

   *  Ascon / CXOF128 / * "AFT" - Algorithm Functional Test.

   For each test case provided the IUT SHALL generate a valid digest
   given the ACVP-provided message, message bit length, customization
   string, customization string bit length, and digest bit length.  The
   digest is then compared to the known result by the ACVP server.  This
   tests the implementation of Algorithm 7 Ascon-CXOF128() from
   [SP800-232] Section 5.3.  The server SHALL provide at least 60 tests
   generated for each combination of capabilities.

6.2.  Test Coverage

   The tests described in this document have the intention of ensuring
   an implementation is conformant to [SP800-232].

6.2.1.  Requirements Covered

   *  The tests will support ensuring the conformity and correctness of
      an implementation of the algorithms supported.

6.2.2.  Requirements Not Covered

   *  SP800-232 Section 4.3.  Additional Requirements.  Requirements
      outlined in this section are not testable by an ACVP server.

7.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of Ascon algorithms to the
   ACVP server.





Ross                      Expires 20 April 2026                 [Page 6]

Internet-Draft                 ACVP Ascon                   October 2025


   The algorithm capabilities MUST be advertised as JSON objects within
   the 'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification [ACVP] for more
   details on the registration message.

7.1.  Prerequisites

   Each algorithm implementation MAY rely on other cryptographic
   primitives.  For example, RSA Signature algorithms depend on an
   underlying hash function.  Each of these underlying algorithm
   primitives must be validated, either separately or as part of the
   same submission.  ACVP provides a mechanism for specifying the
   required prerequisites:

   Prerequisites, if applicable, MUST be submitted in the registration
   as the prereqVals JSON property array inside each element of the
   algorithms array.  Each element in the prereqVals array MUST contain
   the following properties

        +===============+=============================+===========+
        | JSON Property | Description                 | JSON Type |
        +===============+=============================+===========+
        | algorithm     | a prerequisite algorithm    | string    |
        +---------------+-----------------------------+-----------+
        | valValue      | algorithm validation number | string    |
        +---------------+-----------------------------+-----------+

                      Table 1: Prerequisite Properties

   A "valValue" of "same" SHALL be used to indicate that the
   prerequisite is being met by a different algorithm in the capability
   exchange in the same registration.

   An example description of prerequisites within a single algorithm
   capability exchange looks like this













Ross                      Expires 20 April 2026                 [Page 7]

Internet-Draft                 ACVP Ascon                   October 2025


   "prereqVals":
   [
     {
       "algorithm": "Alg1",
       "valValue": "Val-1234"
     },
     {
       "algorithm": "Alg2",
       "valValue": "same"
     }
   ]

7.2.  Ascon AEAD128 Registration Properties

   Each Ascon AEAD128 algorithm capability advertised is a self-
   contained JSON object using the following values.



































Ross                      Expires 20 April 2026                 [Page 8]

Internet-Draft                 ACVP Ascon                   October 2025


   +======================+=================+==========+===============+
   | JSON Value           | Description     | JSON     | Valid         |
   |                      |                 | Type     | Values        |
   +======================+=================+==========+===============+
   | algorithm            | The algorithm   | string   | "Ascon"       |
   |                      | to be validated |          |               |
   +----------------------+-----------------+----------+---------------+
   | mode                 | The Ascon mode  | string   | "AEAD128"     |
   |                      | to be validated |          |               |
   +----------------------+-----------------+----------+---------------+
   | revision             | The algorithm   | string   | "SP800-232"   |
   |                      | testing         |          |               |
   |                      | revision to use |          |               |
   +----------------------+-----------------+----------+---------------+
   | direction            | The direction   | array of | "encrypt",    |
   |                      | for AEAD to be  | strings  | "decrypt"     |
   |                      | tested          |          |               |
   +----------------------+-----------------+----------+---------------+
   | payloadLen           | The supported   | Domain   | {"Min": 0,    |
   |                      | plaintext       |          | "Max":        |
   |                      | lengths in bits |          | 65536,        |
   |                      |                 |          | "Inc": any}   |
   +----------------------+-----------------+----------+---------------+
   | adLen                | The supported   | Domain   | {"Min": 0,    |
   |                      | associated data |          | "Max":        |
   |                      | lengths in bits |          | 65536,        |
   |                      |                 |          | "Inc": any}   |
   +----------------------+-----------------+----------+---------------+
   | tagLen               | The supported   | Domain   | {"Min": 32,   |
   |                      | tag lengths in  |          | "Max": 128,   |
   |                      | bits            |          | "Inc": any}   |
   +----------------------+-----------------+----------+---------------+
   | supportsNonceMasking | The support for | array of | true, false   |
   |                      | nonce masking   | booleans |               |
   |                      | (second key)    |          |               |
   |                      | mode            |          |               |
   +----------------------+-----------------+----------+---------------+

         Table 2: Ascon AEAD128 Algorithm Capabilities JSON Values

7.2.1.  Ascon AEAD128 Mode Capabilities Example

   Below is an example of the registration for Ascon / AEAD128 /
   SP800-232







Ross                      Expires 20 April 2026                 [Page 9]

Internet-Draft                 ACVP Ascon                   October 2025


   {
     "algorithm": "Ascon",
     "mode": "AEAD128",
     "revision": "SP800-232",
     "direction": [
       "encrypt",
       "decrypt"
     ],
     "payloadLen": [
       {
         "min": 0,
         "max": 65536,
         "increment": 1
       }
     ],
     "adLen": [
       {
         "min": 0,
         "max": 65536,
         "increment": 1
       }
     ],
     "tagLen": [
       {
         "min": 64,
         "max": 128,
         "increment": 1
       }
     ],
     "supportsNonceMasking": [
       true,
       false
     ]
   }

7.3.  Ascon Hash256 Registration Properties

   Each Ascon Hash256 algorithm capability advertised is a self-
   contained JSON object using the following values.












Ross                      Expires 20 April 2026                [Page 10]

Internet-Draft                 ACVP Ascon                   October 2025


    +===============+=======================+========+===============+
    | JSON Value    | Description           | JSON   | Valid Values  |
    |               |                       | Type   |               |
    +===============+=======================+========+===============+
    | algorithm     | The algorithm to be   | string | "Ascon"       |
    |               | validated             |        |               |
    +---------------+-----------------------+--------+---------------+
    | mode          | The Ascon mode to be  | string | "Hash256"     |
    |               | validated             |        |               |
    +---------------+-----------------------+--------+---------------+
    | revision      | The algorithm testing | string | "SP800-232"   |
    |               | revision to use       |        |               |
    +---------------+-----------------------+--------+---------------+
    | messageLength | The supported message | Domain | {"Min": 0,    |
    |               | lengths in bits       |        | "Max": 65536, |
    |               |                       |        | "Inc": any}   |
    +---------------+-----------------------+--------+---------------+

        Table 3: Ascon Hash256 Algorithm Capabilities JSON Values

7.3.1.  Ascon Hash256 Mode Capabilities Example

   Below is an example of the registration for Ascon / Hash256 /
   SP800-232

   {
     "algorithm": "Ascon",
     "mode": "Hash256",
     "revision": "SP800-232",
     "messageLength": [
       {
         "min": 0,
         "max": 65536,
         "increment": 1
       }
     ]
   }

7.4.  Ascon XOF128 Registration Properties

   Each Ascon XOF128 algorithm capability advertised is a self-contained
   JSON object using the following values.









Ross                      Expires 20 April 2026                [Page 11]

Internet-Draft                 ACVP Ascon                   October 2025


    +===============+=======================+========+===============+
    | JSON Value    | Description           | JSON   | Valid Values  |
    |               |                       | Type   |               |
    +===============+=======================+========+===============+
    | algorithm     | The algorithm to be   | string | "Ascon"       |
    |               | validated             |        |               |
    +---------------+-----------------------+--------+---------------+
    | mode          | The Ascon mode to be  | string | "XOF128"      |
    |               | validated             |        |               |
    +---------------+-----------------------+--------+---------------+
    | revision      | The algorithm testing | string | "SP800-232"   |
    |               | revision to use       |        |               |
    +---------------+-----------------------+--------+---------------+
    | messageLength | The supported message | Domain | {"Min": 0,    |
    |               | lengths in bits       |        | "Max": 65536, |
    |               |                       |        | "Inc": any}   |
    +---------------+-----------------------+--------+---------------+
    | outputLength  | The supported digest  | Domain | {"Min": 1,    |
    |               | lengths in bits       |        | "Max": 65536, |
    |               |                       |        | "Inc": any}   |
    +---------------+-----------------------+--------+---------------+

         Table 4: Ascon XOF128 Algorithm Capabilities JSON Values

7.4.1.  Ascon XOF128 Mode Capabilities Example

   Below is an example of the registration for Ascon / XOF128 /
   SP800-232

   {
     "algorithm": "Ascon",
     "mode": "XOF128",
     "revision": "SP800-232",
     "messageLength": [
       {
         "min": 0,
         "max": 65536,
         "increment": 1
       }
     ],
     "outputLength": [
       {
         "min": 1,
         "max": 65536,
         "increment": 1
       }
     ]
   }



Ross                      Expires 20 April 2026                [Page 12]

Internet-Draft                 ACVP Ascon                   October 2025


7.5.  Ascon CXOF128 Registration Properties

   Each Ascon CXOF128 algorithm capability advertised is a self-
   contained JSON object using the following values.

   +===========================+================+========+=============+
   | JSON Value                | Description    | JSON   | Valid       |
   |                           |                | Type   | Values      |
   +===========================+================+========+=============+
   | algorithm                 | The algorithm  | string | "Ascon"     |
   |                           | to be          |        |             |
   |                           | validated      |        |             |
   +---------------------------+----------------+--------+-------------+
   | mode                      | The Ascon      | string | "CXOF128"   |
   |                           | mode to be     |        |             |
   |                           | validated      |        |             |
   +---------------------------+----------------+--------+-------------+
   | revision                  | The algorithm  | string | "SP800-232" |
   |                           | testing        |        |             |
   |                           | revision to    |        |             |
   |                           | use            |        |             |
   +---------------------------+----------------+--------+-------------+
   | messageLength             | The supported  | Domain | {"Min": 0,  |
   |                           | message        |        | "Max":      |
   |                           | lengths in     |        | 65536,      |
   |                           | bits           |        | "Inc": any} |
   +---------------------------+----------------+--------+-------------+
   | outputLength              | The supported  | Domain | {"Min": 1,  |
   |                           | digest         |        | "Max":      |
   |                           | lengths in     |        | 65536,      |
   |                           | bits           |        | "Inc": any} |
   +---------------------------+----------------+--------+-------------+
   | customizationStringLength | The supported  | Domain | {"Min": 0,  |
   |                           | customization  |        | "Max":      |
   |                           | string         |        | 2048,       |
   |                           | lengths in     |        | "Inc": any} |
   |                           | bits           |        |             |
   +---------------------------+----------------+--------+-------------+

         Table 5: Ascon CXOF128 Algorithm Capabilities JSON Values

7.5.1.  Ascon CXOF128 Mode Capabilities Example

   Below is an example of the registration for Ascon / CXOF128 /
   SP800-232






Ross                      Expires 20 April 2026                [Page 13]

Internet-Draft                 ACVP Ascon                   October 2025


   {
     "algorithm": "Ascon",
     "mode": "CXOF128",
     "revision": "SP800-232",
     "messageLength": [
       {
         "min": 0,
         "max": 65536,
         "increment": 1
       }
     ],
     "outputLength": [
       {
         "min": 1,
         "max": 65536,
         "increment": 1
       }
     ],
     "customizationStringLength": [
       {
         "min": 0,
         "max": 2048,
         "increment": 1
       }
     ]
   }

8.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation test session would require multiple test
   vector sets to be downloaded and processed by the ACVP client.  Each
   test vector set represents an individual cryptographic algorithm
   defined during the capability exchange.  This section describes the
   JSON schema for a test vector set used with Ascon algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.  The following table
   describes the JSON elements at the top level of the hierarchy.










Ross                      Expires 20 April 2026                [Page 14]

Internet-Draft                 ACVP Ascon                   October 2025


       +============+===================================+=========+
       | JSON       | Description                       | JSON    |
       | Values     |                                   | Type    |
       +============+===================================+=========+
       | acvVersion | Protocol version identifier       | string  |
       +------------+-----------------------------------+---------+
       | vsId       | Unique numeric vector set         | integer |
       |            | identifier                        |         |
       +------------+-----------------------------------+---------+
       | algorithm  | Algorithm defined in the          | string  |
       |            | capability exchange               |         |
       +------------+-----------------------------------+---------+
       | mode       | Mode defined in the capability    | string  |
       |            | exchange                          |         |
       +------------+-----------------------------------+---------+
       | revision   | Protocol test revision selected   | string  |
       +------------+-----------------------------------+---------+
       | testGroups | Array of test group JSON objects. | array   |
       |            | Depending on the algorithm, see   |         |
       |            | Section 8.1.1, Section 8.2.1,     |         |
       |            | Section 8.3.1 or Section 8.4.1    |         |
       +------------+-----------------------------------+---------+

               Table 6: Top Level Test Vector JSON Elements

   An example of this would look like this

   [
     {
       "acvVersion": <version>
     },
     {
       "vsId": 1,
       "algorithm": "Alg1",
       "mode": "Mode1",
       "revision": "Revision1.0",
       "testGroups": [ ... ]
     }
   ]

8.1.  Ascon AEAD128 Test Vectors










Ross                      Expires 20 April 2026                [Page 15]

Internet-Draft                 ACVP Ascon                   October 2025


8.1.1.  Ascon AEAD128 Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the Ascon JSON elements of the Test Group
   JSON object.

   The test group for Ascon / AEAD128 / SP800-232 is as follows:

     +======================+==============================+=========+
     | JSON Value           | Description                  | JSON    |
     |                      |                              | type    |
     +======================+==============================+=========+
     | tgId                 | Numeric identifier for the   | integer |
     |                      | test group, unique across    |         |
     |                      | the entire vector set        |         |
     +----------------------+------------------------------+---------+
     | testType             | The test operation performed | string  |
     +----------------------+------------------------------+---------+
     | direction            | The direction the block      | string  |
     |                      | cipher operates in           |         |
     +----------------------+------------------------------+---------+
     | supportsNonceMasking | Boolean to determine if test | boolean |
     |                      | group uses a second key for  |         |
     |                      | nonce masking                |         |
     +----------------------+------------------------------+---------+
     | tests                | Array of individual test     | array   |
     |                      | vector JSON objects, which   |         |
     |                      | are defined in Section 8.1.2 |         |
     +----------------------+------------------------------+---------+

               Table 7: Ascon AEAD128 Test Group JSON Object

8.1.2.  Ascon AEAD128 Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each Ascon / AEAD128 / FIPS205 test vector.








Ross                      Expires 20 April 2026                [Page 16]

Internet-Draft                 ACVP Ascon                   October 2025


    +============+=======================================+===========+
    | JSON Value | Description                           | JSON type |
    +============+=======================================+===========+
    | tcId       | Numeric identifier for the test case, | integer   |
    |            | unique across the entire vector set   |           |
    +------------+---------------------------------------+-----------+
    | key        | Key value                             | hex       |
    +------------+---------------------------------------+-----------+
    | nonce      | Nonce value                           | hex       |
    +------------+---------------------------------------+-----------+
    | ad         | Associated data value                 | hex       |
    +------------+---------------------------------------+-----------+
    | tag        | Tag in the decrypt case               | hex       |
    +------------+---------------------------------------+-----------+
    | pt         | Payload in the encrypt case           | hex       |
    +------------+---------------------------------------+-----------+
    | ct         | Payload in the decrypt case           | hex       |
    +------------+---------------------------------------+-----------+
    | payloadLen | Payload bit length                    | integer   |
    +------------+---------------------------------------+-----------+
    | adLen      | Assoicated data bit length            | integer   |
    +------------+---------------------------------------+-----------+
    | tagLen     | Tag bit length                        | integer   |
    +------------+---------------------------------------+-----------+
    | secondKey  | Second key value                      | hex       |
    +------------+---------------------------------------+-----------+

               Table 8: Ascon AEAD128 Test Case JSON Object

   The following is an example JSON object sent from the server to the
   client for Ascon / AEAD128 / FIPS205.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 42,
           "algorithm": "Ascon",
           "mode": "AEAD128",
           "revision": "SP800-232",
           "isSample": true,
           "testGroups": [
               {
                   "tgId": 1,
                   "testType": "AFT",
                   "direction": "encrypt",
                   "supportsNonceMasking": true,



Ross                      Expires 20 April 2026                [Page 17]

Internet-Draft                 ACVP Ascon                   October 2025


                   "tests": [
                       {
                           "tcId": 60,
                           "key": "FD49918ED109AF4237047633E899B574",
                           "nonce": "B6B6598FFA6317E896945E69FBC05591",
                           "ad": "47E62206F92A652B",
                           "pt": "F2C255",
                           "payloadLen": 23,
                           "adLen": 64,
                           "tagLeng": 64,
                           "secondKey": "016FBC19B1FAF20FBC6C051B6B8543A7"
                       }
                   ]
               },
               {
                   "tgId": 2,
                   "testType": "AFT",
                   "direction": "encrypt",
                   "supportsNonceMasking": false,
                   "tests": [
                       {
                           "tcId": 107,
                           "key": "66D31B340B8B4D8C82CDF4C1B76DC4A6",
                           "nonce": "51224C04CC0D79B992826F3478DF6C95",
                           "ad": "63BEEE9E4B971FEFABEAEBBADBF512194EB04E0E",
                           "pt": "9596D2",
                           "payloadLen": 24,
                           "adLen": 160,
                           "tagLen": 64
                       }
                   ]
               },
               {
                   "tgId": 3,
                   "testType": "AFT",
                   "direction": "decrypt",
                   "supportsNonceMasking": true
                   "tests": [
                       {
                           "tcId": 125,
                           "key": "F381BF2A2CCC344C07E30DB6D93C43A5",
                           "nonce": "538AB0C0748FA21B4841329C640E5B8C",
                           "ad": "6421B70D86E8CA3D80C0708F72C840717BAB0D4900",
                           "tag": "EB8DDC8F7B32334D",
                           "payloadLen": 63,
                           "adLen": 161,
                           "tagLen": 64,
                           "secondKey": "89ADE7BE07136C740708C8F10CF58970",



Ross                      Expires 20 April 2026                [Page 18]

Internet-Draft                 ACVP Ascon                   October 2025


                           "ct": "EA2649C1EDEA2F4A"
                       }
                   ]
               },
               {
                   "tgId": 4,
                   "testType": "AFT",
                   "direction": "decrypt",
                   "supportsNonceMasking": false
                   "tests": [
                       {
                           "tcId": 184,
                           "key": "E37C0BB570A0F742C72E0F26C2A72BDD",
                           "nonce": "49F8A80BCCCA888D053F41EE35842A78",
                           "ad": "55D138A7B7A84454D7217121446BA4AF1050B988",
                           "tag": "6497C727EC4CBF8F",
                           "payloadLen": 383,
                           "adLen": 160,
                           "tagLen": 64,
                           "ct": "C20807710C919109AC1618D872ABCD1D8D2B3372136BB90A309F55804C0856A6FB213C2FB3CB7B58D5DEA5FDFC208673"
                       }
                   ]
               },
           ]
       }
   ]

8.2.  Ascon Hash256 Test Vectors

8.2.1.  Ascon Hash256 Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the Ascon JSON elements of the Test Group
   JSON object.

   The test group for Ascon / Hash256 / SP800-232 is as follows:










Ross                      Expires 20 April 2026                [Page 19]

Internet-Draft                 ACVP Ascon                   October 2025


   +==========+=============================================+=========+
   | JSON     | Description                                 | JSON    |
   | Value    |                                             | type    |
   +==========+=============================================+=========+
   | tgId     | Numeric identifier for the test group,      | integer |
   |          | unique across the entire vector set         |         |
   +----------+---------------------------------------------+---------+
   | testType | The test operation performed                | string  |
   +----------+---------------------------------------------+---------+
   | tests    | Array of individual test vector JSON        | array   |
   |          | objects, which are defined in Section 8.2.2 |         |
   +----------+---------------------------------------------+---------+

              Table 9: Ascon Hash256 Test Group JSON Object

8.2.2.  Ascon Hash256 Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each Ascon / Hash256 / FIPS205 test vector.

    +============+=======================================+===========+
    | JSON Value | Description                           | JSON type |
    +============+=======================================+===========+
    | tcId       | Numeric identifier for the test case, | integer   |
    |            | unique across the entire vector set   |           |
    +------------+---------------------------------------+-----------+
    | msg        | Message value                         | hex       |
    +------------+---------------------------------------+-----------+
    | len        | Length of message in bits             | integer   |
    +------------+---------------------------------------+-----------+

              Table 10: Ascon Hash256 Test Case JSON Object

   The following is an example JSON object sent from the server to the
   client for Ascon / Hash256 / FIPS205.














Ross                      Expires 20 April 2026                [Page 20]

Internet-Draft                 ACVP Ascon                   October 2025


   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 42,
           "algorithm": "Ascon",
           "mode": "Hash256",
           "revision": "SP800-232",
           "isSample": true,
           "testGroups": [
               {
                   "tgId": 1,
                   "testType": "AFT",
                   "tests": [
                       {
                           "tcId": 3,
                           "msg": "937E8B3C4BC1D5E04E7F3157D9C3936CBCBD952D",
                           "len": 159
                       }
                   ]
               }
           ]
       }
   ]

8.3.  Ascon XOF128 Test Vectors

8.3.1.  Ascon XOF128 Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the Ascon JSON elements of the Test Group
   JSON object.

   The test group for Ascon / XOF128 / SP800-232 is as follows:











Ross                      Expires 20 April 2026                [Page 21]

Internet-Draft                 ACVP Ascon                   October 2025


   +==========+=============================================+=========+
   | JSON     | Description                                 | JSON    |
   | Value    |                                             | type    |
   +==========+=============================================+=========+
   | tgId     | Numeric identifier for the test group,      | integer |
   |          | unique across the entire vector set         |         |
   +----------+---------------------------------------------+---------+
   | testType | The test operation performed                | string  |
   +----------+---------------------------------------------+---------+
   | tests    | Array of individual test vector JSON        | array   |
   |          | objects, which are defined in Section 8.3.2 |         |
   +----------+---------------------------------------------+---------+

              Table 11: Ascon XOF128 Test Group JSON Object

8.3.2.  Ascon XOF128 Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each Ascon / XOF128 / FIPS205 test vector.

    +============+=======================================+===========+
    | JSON Value | Description                           | JSON type |
    +============+=======================================+===========+
    | tcId       | Numeric identifier for the test case, | integer   |
    |            | unique across the entire vector set   |           |
    +------------+---------------------------------------+-----------+
    | msg        | Message value                         | hex       |
    +------------+---------------------------------------+-----------+
    | len        | Length of message in bits             | integer   |
    +------------+---------------------------------------+-----------+
    | outLen     | Length of the digest in bits          | integer   |
    +------------+---------------------------------------+-----------+

               Table 12: Ascon XOF128 Test Case JSON Object

   The following is an example JSON object sent from the server to the
   client for Ascon / XOF128 / FIPS205.












Ross                      Expires 20 April 2026                [Page 22]

Internet-Draft                 ACVP Ascon                   October 2025


   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 42,
           "algorithm": "Ascon",
           "mode": "XOF128",
           "revision": "SP800-232",
           "isSample": true,
           "testGroups": [
               {
                   "tgId": 1,
                   "testType": "AFT",
                   "tests": [
                       {
                           "tcId": 3,
                           "msg": "F00C735A4CFAFE35",
                           "len": 63,
                           "outLen": 949
                       }
                   ]
               }
           ]
       }
   ]

8.4.  Ascon CXOF128 Test Vectors

8.4.1.  Ascon CXOF128 Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the Ascon JSON elements of the Test Group
   JSON object.

   The test group for Ascon / CXOF128 / SP800-232 is as follows:










Ross                      Expires 20 April 2026                [Page 23]

Internet-Draft                 ACVP Ascon                   October 2025


   +==========+=============================================+=========+
   | JSON     | Description                                 | JSON    |
   | Value    |                                             | type    |
   +==========+=============================================+=========+
   | tgId     | Numeric identifier for the test group,      | integer |
   |          | unique across the entire vector set         |         |
   +----------+---------------------------------------------+---------+
   | testType | The test operation performed                | string  |
   +----------+---------------------------------------------+---------+
   | tests    | Array of individual test vector JSON        | array   |
   |          | objects, which are defined in Section 8.4.2 |         |
   +----------+---------------------------------------------+---------+

              Table 13: Ascon CXOF128 Test Group JSON Object

8.4.2.  Ascon CXOF128 Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each Ascon / CXOF128 / FIPS205 test vector.

    +============+=======================================+===========+
    | JSON Value | Description                           | JSON type |
    +============+=======================================+===========+
    | tcId       | Numeric identifier for the test case, | integer   |
    |            | unique across the entire vector set   |           |
    +------------+---------------------------------------+-----------+
    | msg        | Message value                         | hex       |
    +------------+---------------------------------------+-----------+
    | len        | Length of message in bits             | integer   |
    +------------+---------------------------------------+-----------+
    | outLen     | Length of the digest in bits          | integer   |
    +------------+---------------------------------------+-----------+
    | cs         | Customization string value            | hex       |
    +------------+---------------------------------------+-----------+
    | csLen      | Length of the customization string in | integer   |
    |            | bits                                  |           |
    +------------+---------------------------------------+-----------+

              Table 14: Ascon CXOF128 Test Case JSON Object

   The following is an example JSON object sent from the server to the
   client for Ascon / CXOF128 / FIPS205.







Ross                      Expires 20 April 2026                [Page 24]

Internet-Draft                 ACVP Ascon                   October 2025


   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 42,
           "algorithm": "Ascon",
           "mode": "CXOF128",
           "revision": "SP800-232",
           "isSample": true,
           "testGroups": [
               {
                   "tgId": 1,
                   "testType": "AFT",
                   "tests": [
                       {
                       "tcId": 3,
                       "msg": "380F97464AB9E035024C9B5F8D1AF3D0763BE9A7FB795B0FAE6EF5455249E93A4807D046F9BA97916E7EF9639483F4308BC8CAD3E385AEBEB38797DBC49BE2B9636017854AACD7BCA458397D80F87A2B7AC4B98A7E1657C25811937222BBCDD39B3F00346C6EE6DFF10E2F8A4C313E3A",
                       "len": 895,
                       "outLen": 26524,
                       "cs": "0C6C61FFE1573A4D09542C",
                       "csLen": 88
                       }
                   ]
               }
           ]
       }
   ]

9.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

        +===============+============================+===========+
        | JSON Property | Description                | JSON Type |
        +===============+============================+===========+
        | acvVersion    | The ACVP version used      | string    |
        +---------------+----------------------------+-----------+
        | vsId          | The vector set identifier  | integer   |
        +---------------+----------------------------+-----------+
        | testGroups    | The test group objects in  | array     |
        |               | the response, see Table 16 |           |
        +---------------+----------------------------+-----------+

                      Table 15: Response JSON Object



Ross                      Expires 20 April 2026                [Page 25]

Internet-Draft                 ACVP Ascon                   October 2025


   An example of this is the following

   {
       "acvVersion": "version",
       "vsId": 1,
       "testGroups": [ ... ]
   }

   The 'testGroups' section is used to organize the ACVP client response
   in a similar manner to how it distributes vectors.

    +==========+===========================================+=========+
    | JSON     | Description                               | JSON    |
    | Property |                                           | Type    |
    +==========+===========================================+=========+
    | tgId     | The test group identifier                 | integer |
    +----------+-------------------------------------------+---------+
    | tests    | The test case objects in the response.    | array   |
    |          | Depending on the algorithm, see Table 17, |         |
    |          | Table 18, Table 19, or Table 20           |         |
    +----------+-------------------------------------------+---------+

                     Table 16: Response Group Objects

   An example of this is the following

   {
       "tgId": 1,
       "tests": [ ... ]
   }

9.1.  Ascon AEAD128 Test Vector Responses

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents the results of an ACVP
   client processing a single test vector.  The following table
   describes the JSON elements for each Ascon / AEAD128 / SP800-232 test
   vector.













Ross                      Expires 20 April 2026                [Page 26]

Internet-Draft                 ACVP Ascon                   October 2025


      +============+======================================+=========+
      | JSON Value | Description                          | JSON    |
      |            |                                      | type    |
      +============+======================================+=========+
      | tcId       | The test case identifier             | integer |
      +------------+--------------------------------------+---------+
      | tag        | The computed tag in an encrypt case  | hex     |
      +------------+--------------------------------------+---------+
      | ct         | The computed ciphertext in an        | hex     |
      |            | encrypt case                         |         |
      +------------+--------------------------------------+---------+
      | testPassed | Boolean to indicate if a test case   | boolean |
      |            | should have failed an authentication |         |
      |            | check in the decrypt case            |         |
      +------------+--------------------------------------+---------+
      | pt         | The computed plaintext in a decrypt  | hex     |
      |            | case                                 |         |
      +------------+--------------------------------------+---------+

           Table 17: Ascon AEAD128 Test Case Response JSON Object

   The following is an example JSON test vector response object for
   Ascon / AEAD128 / SP800-232.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 42,
           "algorithm": "Ascon",
           "mode": "AEAD128",
           "revision": "SP800-232",
           "isSample": true,
           "testGroups": [
               {
                   "tgId": 1,
                   "tests": [
                       {
                           "tcId": 1,
                           "tag": "E2D95B2EF1A1E75AF11EF398CD5BE0E8",
                           "ct": "BF6CEC4E476E0CBC47287ED9B07847785D6096332CE2D249D5A0455E3BEB24C92183609FD1A0AB77F6C2730E0A85ADEC"
                       },
                   ]
               },
               {
                   "tgId": 2,
                   "tests": [



Ross                      Expires 20 April 2026                [Page 27]

Internet-Draft                 ACVP Ascon                   October 2025


                       {
                           "tcId": 61,
                           "tag": "3616EB39EE11827740EBB60E4A936CC8",
                           "ct": "195CCB04AC6232B400"
                       },
                   ]
               },
               {
                   "tgId": 3,
                   "tests": [
                       {
                           "tcId": 124,
                           "testPassed": true,
                           "pt": "66348919F866C983AAE911B3F556524216672E6A"
                       },
                       {
                           "tcId": 125,
                           "testPassed": false
                       },
                   ]
               },
               {
                   "tgId": 4,
                   "tests": [
                       {
                           "tcId": 191,
                           "testPassed": true,
                           "pt": "9ED0960B1BFDDA16"
                       },
                       {
                           "tcId": 192,
                           "testPassed": false
                       },
                   ]
               },
           ]
       }
   ]

9.2.  Ascon Hash256 Test Vector Responses

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents the results of an ACVP
   client processing a single test vector.  The following table
   describes the JSON elements for each Ascon / Hash256 / SP800-232 test
   vector.





Ross                      Expires 20 April 2026                [Page 28]

Internet-Draft                 ACVP Ascon                   October 2025


           +============+==========================+===========+
           | JSON Value | Description              | JSON type |
           +============+==========================+===========+
           | tcId       | The test case identifier | integer   |
           +------------+--------------------------+-----------+
           | md         | The computed digest      | hex       |
           +------------+--------------------------+-----------+

              Table 18: Ascon Hash256 Test Case Response JSON
                                   Object

   The following is an example JSON test vector response object for
   Ascon / Hash256 / SP800-232.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 0,
           "algorithm": "Ascon",
           "mode": "Hash256",
           "revision": "SP800-232",
           "isSample": true,
           "testGroups": [
               {
                   "tgId": 1,
                   "tests": [
                       {
                           "tcId": 3,
                           "md": "84ADA53484D7D11D7B9518754542E6FC6646D2BEB8346B260EF44880A6974593"
                       }
                   ]
               }
           ]
       }
   ]

9.3.  Ascon XOF128 Test Vector Responses

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents the results of an ACVP
   client processing a single test vector.  The following table
   describes the JSON elements for each Ascon / XOF128 / SP800-232 test
   vector.






Ross                      Expires 20 April 2026                [Page 29]

Internet-Draft                 ACVP Ascon                   October 2025


           +============+==========================+===========+
           | JSON Value | Description              | JSON type |
           +============+==========================+===========+
           | tcId       | The test case identifier | integer   |
           +------------+--------------------------+-----------+
           | md         | The computed digest      | hex       |
           +------------+--------------------------+-----------+

           Table 19: Ascon XOF128 Test Case Response JSON Object

   The following is an example JSON test vector response object for
   Ascon / XOF128 / SP800-232.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 0,
           "algorithm": "Ascon",
           "mode": "XOF128",
           "revision": "SP800-232",
           "isSample": true,
           "testGroups": [
               {
                   "tgId": 1,
                   "tests": [
                       {
                           "tcId": 1,
                           "md": "1C6B4531D31C9ECF60C7A0994A2EAF884F39FB052C8B0820ED8336945874DCB29EE85E5ADBA645724056715DB76B8B08E45546DACEE5CCB0CCA3C377B114C0C23C5207BBFEC6A7DC4F705550C795F381086CCD1DC2AC1B9FDF24AEA246BC6BEF6BD0B2490EC13528843C5BAE22AB556D881FEFFB20B317"
                       }
                   ]
               }
           ]
       }
   ]

9.4.  Ascon CXOF128 Test Vector Responses

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents the results of an ACVP
   client processing a single test vector.  The following table
   describes the JSON elements for each Ascon / CXOF128 / SP800-232 test
   vector.







Ross                      Expires 20 April 2026                [Page 30]

Internet-Draft                 ACVP Ascon                   October 2025


           +============+==========================+===========+
           | JSON Value | Description              | JSON type |
           +============+==========================+===========+
           | tcId       | The test case identifier | integer   |
           +------------+--------------------------+-----------+
           | md         | The computed digest      | hex       |
           +------------+--------------------------+-----------+

              Table 20: Ascon CXOF128 Test Case Response JSON
                                   Object

   The following is an example JSON test vector response object for
   Ascon / CXOF128 / SP800-232.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 0,
           "algorithm": "Ascon",
           "mode": "CXOF128",
           "revision": "SP800-232",
           "isSample": true,
           "testGroups": [
               {
                   "tgId": 1,
                   "tests": [
                       {
                           "tcId": 7,
                           "md": "EE1DAAB6F78C810129D0D6FB93DA00FD93E2A8AB1E57C7A92D48EB03A1EEF7864EB726E06973E01C2199F4948963C5D960DAD7472B94F8D552BA22D52E1DEDF3F658FE2F60B3AF36B897AFFA6EA18B8CC3FF779969F55AB5E2A7AC6F242AAD445CCF760A97BE93665DE5DF7B2BCA8C88ADEC4C3D44C0C48456FD9AD2BE20C4A61F25BDB66E4B36AB559A98C1B08A7FBC2F7CF4B9B349CC593A9F05F2D3913B7DDE78768304233A1CBDD7705AC3BA3C6C182CA9A2D90CA3896DE793ABE3884B2DB663EBD1E60739FF13A48504A2979997FE82FA18237C2BD369A10C569D5B6EF94902291579D85BE7A8D046F04DABF22360C37FBC63A589FBC88D476093A57257509E71BE05907892105EF5D603"
                       }
                   ]
               }
           ]
       }
   ]

10.  Security Considerations

   There are no additional security considerations outside of those
   outlined in the ACVP document.

11.  IANA Considerations

   This document does not require any action by IANA.

12.  Normative References



Ross                      Expires 20 April 2026                [Page 31]

Internet-Draft                 ACVP Ascon                   October 2025


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", RFC 2119, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", RFC 8174, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [SP800-232]
              "", SP 800-232.

   [ACVP]     Fussell, B., Vassilev, A., and H. Booth, "Automatic
              Cryptographic Validation Protocol", ACVP, 1 July 2019.

Author's Address

   Noah Ross (editor)
   Email: noah.ross@nist.gov
































Ross                      Expires 20 April 2026                [Page 32]
