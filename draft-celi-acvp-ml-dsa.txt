



Network Working Group                                       C. Celi, Ed.
Internet-Draft                                           17 October 2025
Intended status: Informational                                          
Expires: 20 April 2026


                     ACVP ML-DSA JSON Specification
                       draft-celi-acvp-ml-dsa-01

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 April 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Abstract  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   4.  Conventions . . . . . . . . . . . . . . . . . . . . . . . . .   3
     4.1.  Notation conventions  . . . . . . . . . . . . . . . . . .   3
     4.2.  Terms and Definitions . . . . . . . . . . . . . . . . . .   3
       4.2.1.  Prompt  . . . . . . . . . . . . . . . . . . . . . . .   3
       4.2.2.  Registration  . . . . . . . . . . . . . . . . . . . .   3
       4.2.3.  Response  . . . . . . . . . . . . . . . . . . . . . .   4



Celi                      Expires 20 April 2026                 [Page 1]

Internet-Draft                 ACVP ML-DSA                  October 2025


       4.2.4.  Test Case . . . . . . . . . . . . . . . . . . . . . .   4
       4.2.5.  Test Group  . . . . . . . . . . . . . . . . . . . . .   4
       4.2.6.  Test Vector Set . . . . . . . . . . . . . . . . . . .   4
       4.2.7.  Validation  . . . . . . . . . . . . . . . . . . . . .   4
   5.  Supported ML-DSA Algorithms . . . . . . . . . . . . . . . . .   4
   6.  Test Types and Test Coverage  . . . . . . . . . . . . . . . .   4
     6.1.  Test Types  . . . . . . . . . . . . . . . . . . . . . . .   4
       6.1.1.  ML-DSA KeyGen Test Types  . . . . . . . . . . . . . .   5
       6.1.2.  ML-DSA SigGen Test Types  . . . . . . . . . . . . . .   5
       6.1.3.  ML-DSA SigVer Test Types  . . . . . . . . . . . . . .  10
     6.2.  Test Coverage . . . . . . . . . . . . . . . . . . . . . .  11
       6.2.1.  Requirements Covered  . . . . . . . . . . . . . . . .  11
       6.2.2.  Requirements Not Covered  . . . . . . . . . . . . . .  11
   7.  Capabilities Registration . . . . . . . . . . . . . . . . . .  12
     7.1.  Prerequisites . . . . . . . . . . . . . . . . . . . . . .  12
     7.2.  Required Prerequisite Algorithms for ML-DSA
           Validations . . . . . . . . . . . . . . . . . . . . . . .  13
     7.3.  ML-DSA keyGen Registration Properties . . . . . . . . . .  14
       7.3.1.  ML-DSA keyGen Mode Capabilities Example . . . . . . .  14
     7.4.  ML-DSA sigGen Registration Properties . . . . . . . . . .  15
       7.4.1.  ML-DSA sigGen Mode Capabilities Example . . . . . . .  17
     7.5.  ML-DSA sigVer Registration Properties . . . . . . . . . .  19
       7.5.1.  ML-DSA sigVer Mode Capabilities Example . . . . . . .  21
   8.  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . .  23
     8.1.  ML-DSA keyGen Test Vectors  . . . . . . . . . . . . . . .  24
       8.1.1.  ML-DSA keyGen Test Groups JSON Schema . . . . . . . .  24
       8.1.2.  ML-DSA keyGen Test Case JSON Schema . . . . . . . . .  25
     8.2.  ML-DSA sigGen Test Vectors  . . . . . . . . . . . . . . .  26
       8.2.1.  ML-DSA sigGen Test Groups JSON Schema . . . . . . . .  26
       8.2.2.  ML-DSA sigGen Test Case JSON Schema . . . . . . . . .  27
     8.3.  ML-DSA sigVer Test Vectors  . . . . . . . . . . . . . . .  30
       8.3.1.  ML-DSA sigVer Test Groups JSON Schema . . . . . . . .  30
       8.3.2.  ML-DSA sigVer Test Case JSON Schema . . . . . . . . .  31
   9.  Test Vector Responses . . . . . . . . . . . . . . . . . . . .  34
     9.1.  ML-DSA keyGen Test Vector Responses . . . . . . . . . . .  35
     9.2.  ML-DSA sigGen Test Vector Responses . . . . . . . . . . .  36
     9.3.  ML-DSA sigVer Test Vector Responses . . . . . . . . . . .  37
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  38
   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  38
   12. Normative References  . . . . . . . . . . . . . . . . . . . .  38
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  39

1.  Acknowledgements

   There are no acknowledgements.






Celi                      Expires 20 April 2026                 [Page 2]

Internet-Draft                 ACVP ML-DSA                  October 2025


2.  Abstract

   This document defines the JSON schema for testing Module Lattice-
   based Digital Signature Algorithm (ML-DSA) implementations with the
   ACVP specification.

3.  Introduction

   The Automated Crypto Validation Protocol (ACVP) defines a mechanism
   to automatically verify the cryptographic implementation of a
   software or hardware crypto module.  The ACVP specification defines
   how a crypto module communicates with an ACVP server, including
   crypto capabilities negotiation, session management, authentication,
   vector processing and more.  The ACVP specification does not define
   algorithm specific JSON constructs for performing the crypto
   validation.  A series of ACVP sub-specifications define the
   constructs for testing individual crypto algorithms.  Each sub-
   specification addresses a specific class of crypto algorithms.  This
   sub-specification defines the JSON constructs for testing Module
   Lattice-based Digital Signature Algorithm (ML-DSA) implementations
   using ACVP.

4.  Conventions

4.1.  Notation conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "*NOT RECOMMENDED*", "MAY",
   and "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 of [RFC2119] and [RFC8174] when, and only when, they appear in
   all capitals, as shown here.

4.2.  Terms and Definitions

4.2.1.  Prompt

   JSON sent from the server to the client describing the tests the
   client performs

4.2.2.  Registration

   The initial request from the client to the server describing the
   capabilities of one or several algorithm, mode and revision
   combinations







Celi                      Expires 20 April 2026                 [Page 3]

Internet-Draft                 ACVP ML-DSA                  October 2025


4.2.3.  Response

   JSON sent from the client to the server in response to the prompt

4.2.4.  Test Case

   An individual unit of work within a prompt or response

4.2.5.  Test Group

   A collection of test cases that share similar properties within a
   prompt or response

4.2.6.  Test Vector Set

   A collection of test groups under a specific algorithm, mode, and
   revision

4.2.7.  Validation

   JSON sent from the server to the client that specifies the
   correctness of the response

5.  Supported ML-DSA Algorithms

   The following ML-DSA algorithms MAY be advertised by the ACVP
   compliant cryptographic module.  The list is in the form "algorithm /
   mode / revision".

   *  ML-DSA / keyGen / FIPS204

   *  ML-DSA / sigGen / FIPS204

   *  ML-DSA / sigVer / FIPS204

6.  Test Types and Test Coverage

6.1.  Test Types

   The ACVP server performs a set of tests on the specified ML-DSA
   algorithm in order to assess the correctness and robustness of the
   implementation.  A typical ACVP validation session SHALL require
   multiple tests to be performed for every supported permutation of ML-
   DSA capabilities.  This section describes the design of the tests
   used to validate implementations of the ML-DSA algorithms.  The
   number of tests MAY vary but the minimum number required by each test
   type SHALL be included by the server.  The test type describes the
   format of the test rather than the intention of the test.  Multiple



Celi                      Expires 20 April 2026                 [Page 4]

Internet-Draft                 ACVP ML-DSA                  October 2025


   tests of the same test type MAY cover different assurances regarding
   the implementation.

6.1.1.  ML-DSA KeyGen Test Types

   *  ML-DSA / keyGen / * "AFT" - Algorithm Functional Test.

   For each test case provided, the IUT SHALL generate a key pair from a
   provided seed.  The key pair is communicated to the ACVP server and
   compared against the key pair generated by the server.  This tests
   the implementation of Algorithm 6 ML-DSA.KeyGen_internal() from
   [FIPS204].  The server SHALL provide at least 25 tests for each
   combination of capabilities.

6.1.2.  ML-DSA SigGen Test Types

   *  ML-DSA / sigGen / * "AFT" - Algorithm Functional Test.

   The IUT SHALL generate valid signatures based on the ACVP-provided
   message, mu (for external mu testing), private key, context (for
   external interface testing), hashAlg (for preHash testing), and
   randomness (for non-deterministic signature testing).  The signature
   is then compared to the known signature by the ACVP server.  This
   tests the implementation of Algorithm 2 ML-DSA.Sign(), Algorithm 4
   HashML-DSA.Sign(), and Algorithm 7 ML-DSA.Sign_internal() from
   [FIPS204].

   There are several assurances to obtain from AFTs.  First is
   correctness of the algorithm implementation.  The server SHALL
   include at least 15 tests for each combination of capabilities to
   meet this assurance.  The "hashAlg" capability MAY be excluded from
   the combination of capabilities due to the number of supported hash
   functions.  Each "hashAlg" provided by the IUT SHALL be covered
   within the, minimum, 15 tests generated for each combination of
   capabilities.

   The second assurance is correctness under all rejection paths.
   Within ML-DSA sigGen, i.e., in Algorithm 7 ML-DSA.Sign_internal(),
   the algorithm enters a loop until a valid signature is found.  The
   loop contains four potential reasons to reject a candidate signature:
   if the z infinity norm is too large, if the r infinity norm is too
   large, if there are too many hints in h, or if the ct0 infinity norm
   is too large.  These conditions occur at various rarities that can
   make it difficult to test each error condition with randomized
   testing.  If an implementation adheres strictly to the pseudocode in
   Algorithm 7 ML-DSA.Sign_internal() [FIPS204], the following table
   provides helpful known answer tests that trigger each rejection case
   exactly once.  If the implementation varies from the psuedocode, it



Celi                      Expires 20 April 2026                 [Page 5]

Internet-Draft                 ACVP ML-DSA                  October 2025


   would be prudent to use a debugger or other tooling to ensure that
   all rejection cases are triggered by testing.  To save on space, the
   table will provide the seed used to generate the key pair, a hash of
   the keys, SHA2-256(pk || sk), and a hash of the resulting signature,
   SHA2-256(sig).  All cases are defined using the deterministic
   signature method, Algorithm 7 ML-DSA.Sign_internal().  Note that the
   ct0 infinity norm check only applies to ML-DSA-44.  This condition is
   not possible on the other security levels.  Thanks to Qinglai Xiao
   and Mike Hamburg (Rambus Inc) for providing code to generate these
   test cases; more information on their technique is available on the
   NIST PQC-Forum [PQCForum].

   The server SHALL include at least 5 tests that cover all rejection
   outcomes for all combinations of capabilities where
   "signatureInterface" = "internal" and "deterministic" = true.  The
   internal signature interface is described in [FIPS204] Algorithm 7
   ML-DSA.Sign_internal() must be used to test this assurance.  The
   Table 1 provides valid test cases for this assurance.

   The third assurance is correctness under a large number of
   rejections.  The standard, [FIPS204], does not define an upper limit
   on the number of potential rejections.  Implementations that abort
   early may leak information about the underlying key.  The server
   SHALL include at least 5 tests that lead to at least 32 rejections
   where "signatureInterface" = "internal" and "deterministic" = true.
   The internal signature interface described in [FIPS204] Algorithm 7
   ML-DSA.Sign_internal() must be used to test this assurance.  The
   Table 2 provides valid test cases for this assurance.

    +===========+===================+==========+==========+===========+
    | Security  | Seed              | Key Hash | M'       | Signature |
    | Level     |                   |          |          | Hash      |
    +===========+===================+==========+==========+===========+
    | ML-DSA-44 | 5C624FCC 18624524 | AC825C59 | 951FDF54 | DCC71A42  |
    |           | 52D0C665 840D8237 | D8A4C453 | 73A4CBA6 | 1BC6FFAF  |
    |           | F43108E5 499EDCDC | A2C4EFEA | D9E5B5DB | B7DF0C7F  |
    |           | 108FBC49 D596E4B7 | 8395741C | 7E79FB81 | 6D018A19  |
    |           |                   | A404F300 | 73921BA5 | ADA154D1  |
    |           |                   | 0E28D56B | B13E9271 | E2EE360E  |
    |           |                   | 25D03BB4 | 401B8F90 | D533CECD  |
    |           |                   | 02E5CB2F | 7B8B7D5B | 5DC980AD  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-44 | 836EABED B4D2CD9B | E1FF40D9 | 199A0AB7 | A2608BC2  |
    |           | E6A4D957 CF5EE6BF | 6E3552FA | 35E90041 | 7E60541D  |
    |           | 48930413 6864C55C | B531D171 | 63DD02D3 | 27B6A14F  |
    |           | 2C5F01DA 5047D18B | 5084B7E3 | 19A61CFE | 460D54A4  |
    |           |                   | 8CCDBACC | 81638E3B | 8C0298DC  |
    |           |                   | 0A8AF94C | F47BB1E9 | C3F45999  |



Celi                      Expires 20 April 2026                 [Page 6]

Internet-Draft                 ACVP ML-DSA                  October 2025


    |           |                   | 30959FB4 | 0E90D6E3 | F29047A3  |
    |           |                   | C7F5A445 | EA545247 | 135C4941  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-44 | CA5A01E1 EA6552CB | A4652DC4 | 8C8CACA8 | B4B14220  |
    |           | 5C980346 2B94C2F1 | A2710952 | 8FFF52B9 | 9137397D  |
    |           | DC9D13BB 17A6ACE5 | 68DD84A5 | 33051053 | AD504CAE  |
    |           | 10D15705 6A2C6114 | B0744DFD | 7B3701B3 | D01D390A  |
    |           |                   | BE2E642E | 993F3726 | DAF49973  |
    |           |                   | 4D41FBC4 | 136A650F | D8D2414F  |
    |           |                   | 329C2FBA | 48F86045 | C3457FB7  |
    |           |                   | 534C0E13 | 51550832 | AF775189  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-44 | 9C005F15 50B4F318 | 2485AA99 | B744343F | 5B80A60B  |
    |           | 55C6B92F 97873673 | 345F1B33 | 30F7FEE0 | AA480B9D  |
    |           | 3F37791C B39DD182 | 4D4D94B6 | 88998BA5 | 0C7D2C05  |
    |           | D7BA5732 BDC2483E | 10FBFFCC | 74E799F1 | B50928C4  |
    |           |                   | B626CBFD | BF3939C0 | BF6808DD  |
    |           |                   | 4E9FF0E1 | 6C29BF9A | A6936420  |
    |           |                   | F6FC3509 | C10F3588 | 58A3EB77  |
    |           |                   | 3C423544 | A57E21E2 | EAA768FC  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-44 | 4FAB5485 B009399E | CB56909A | 7CAB0FDC | 6CC38D73  |
    |           | 8AE6FC3D 3EEFBFE8 | 7CF3008A | F4BEA5F0 | D639682A  |
    |           | E09796E4 477AABD5 | 662DC635 | 39137478 | BC556DC6  |
    |           | EB1CC908 FA734DE3 | EDCB79DC | AA45C9C4 | DCF436DE  |
    |           |                   | 151CA7AC | 8EF96D90 | 24033091  |
    |           |                   | BAE17B54 | 6FC49F6E | F34004F4  |
    |           |                   | 4384ABD9 | 2F138111 | 10FABC68  |
    |           |                   | 1BBBC1E9 | BF1B4A4E | 87F77AB0  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-65 | CCD61917 2D0978FD | 756C734D | 8A32D4B5 | 958287F1  |
    |           | B584D433 CB5A044C | B013F83E | D3C8537A | 646D855B  |
    |           | 8D24592D AD4D1E57 | 295F2878 | A9C7C952 | B065895A  |
    |           | ECF1FD62 C40A309B | B32F1633 | F63959C6 | 6C6DA3DF  |
    |           |                   | 5D576249 | 6162A68D | 6A3F7AB2  |
    |           |                   | B16D83AF | 5F3D02E6 | A430C9DC  |
    |           |                   | EDE1F5D4 | C5F96E2C | 559D313E  |
    |           |                   | CC36D24F | EA41D2EF | 7DD0A527  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-65 | C6315FC7 19895D16 | CEE1A1C7 | D8CB8B23 | BD57A932  |
    |           | 454B7D62 084F0C8A | F966A411 | 931495FD | 31EFEF6B  |
    |           | 2903D8D0 0DC1D82E | BB94C38A | F71477DB | 4E7FE374  |
    |           | B3F45F06 463C6FBD | 0E33E1F7 | 7C335A15 | E2194DB7  |
    |           |                   | 102D3130 | 1C6A9096 | E00202EA  |
    |           |                   | FA9C5D27 | 97F1C39A | F5EFC60D  |
    |           |                   | 96F3F7F8 | 3175133B | F5F9FE1C  |
    |           |                   | 6ECF4B1D | 68881F28 | 5F579D06  |
    +-----------+-------------------+----------+----------+-----------+



Celi                      Expires 20 April 2026                 [Page 7]

Internet-Draft                 ACVP ML-DSA                  October 2025


    | ML-DSA-65 | F005E473 8B528F95 | D3E33502 | EF1FE025 | 9E7B668C  |
    |           | 3669A2BC A3925266 | CCC035C9 | F8DF1FDC | 51B250B1  |
    |           | DBD23909 CD2C4DCE | B9195A27 | FDAFD188 | 2ED76665  |
    |           | 50B980D7 89EBD0D4 | 14FE7ECE | F68B9D10 | BB4315CE  |
    |           |                   | DD13DFF4 | 85AE8D09 | 4BDBAF00  |
    |           |                   | B854F237 | 234EBDAD | BF927F6D  |
    |           |                   | 6D993D38 | 67DE985B | 895F0601  |
    |           |                   | A8E8AFF2 | A7347DE4 | 0D3BBC0E  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-65 | F215BA22 80D86F14 | 17FBD1D1 | A4FADC3C | C027D21B  |
    |           | 2012FC05 FFC04F2C | 7DAACEA7 | 232F2ABC | 21FA75AB  |
    |           | 7D22FF5D D7D69AA0 | A2F6DA1F | 8FCBB9C1 | E7F35CD8  |
    |           | EFB081E3 A53E9318 | 22835E86 | 11F261E0 | 4A54E2E8  |
    |           |                   | 30E8AE8E | 3DC2FF2D | 3BD35214  |
    |           |                   | F1A66E8B | 57280A42 | 0BC8C49E  |
    |           |                   | 7935CC6C | 42936A63 | AB2C4500  |
    |           |                   | C762532D | E481AFE6 | 4E7268A7  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-65 | A8E6C084 B3AAE469 | D8B7DE2D | A45A91B6 | C9DB2B64  |
    |           | 0724631C AA57C10D | A326EBAE | B2B392B7 | 2F739B32  |
    |           | F5973F95 38D25493 | 241D657E | 087152D2 | ED5B14B8  |
    |           | E264A4E2 B2C5A4E9 | C090F4CA | 3E57E39A | FEEE6C77  |
    |           |                   | 3438DFFE | A78A42AB | 9BAE7297  |
    |           |                   | ECE1BD05 | 91AAD034 | 17D4FF11  |
    |           |                   | D9CE7DFC | 4FB80393 | CA281954  |
    |           |                   | 5204C6DC | F22FB0AE | D8FF1B1D  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-87 | 5AC68A41 71730B1E | 2446AB05 | 172F6D49 | 3784755A  |
    |           | 920CC3E7 CC4ACA79 | EEC3977C | AF757918 | C5A2D572  |
    |           | C25A3621 0057373B | 40650338 | 823A75E9 | 0623E504  |
    |           | 6BCEBCDF A144CE18 | 983EEBF7 | 81D605DD | 707C3088  |
    |           |                   | 8942AC31 | AF74BF21 | 61EF4177  |
    |           |                   | F5E94454 | 009AC836 | A6460FBE  |
    |           |                   | 3E87DBAC | D8B4C0AA | B4DB257A  |
    |           |                   | 0A4889C1 | BB49C14C | AA245B55  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-87 | E45F9CC0 43C2C0F4 | F5B727CA | 86B5A936 | E8276BF4  |
    |           | BEBCAD28 60CADF77 | 02B6F302 | 1F73427E | D57752D7  |
    |           | C8211237 D7AAA108 | 5135926A | BA3EEF5D | 7C6EAE2B  |
    |           | A56E3ACA 92D207F7 | 5FCA2A64 | 46112B74 | 80050ED2  |
    |           |                   | A800579C | 67CEDFBC | 0CF15344  |
    |           |                   | BFD44863 | C77EF36C | B69E5150  |
    |           |                   | A08ABA5F | 94EF0666 | F9479290  |
    |           |                   | E6C33B46 | C1AD37B6 | 3EA3790A  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-87 | 5E37A143 C0FFAEF6 | C210312C | 9A72DFEB | B39E8111  |
    |           | 00F33C37 6589069A | 242E0642 | 5CDAD43D | 5160026D  |
    |           | 7A0CE2FA C36DBEFE | F990328A | 3A416F8A | A5528C40  |



Celi                      Expires 20 April 2026                 [Page 8]

Internet-Draft                 ACVP ML-DSA                  October 2025


    |           | C42C5A60 167D5A12 | BFCD1189 | D7B6676D | B90EA146  |
    |           |                   | D24EB8E9 | 5528DDDA | 64BFC22E  |
    |           |                   | C122BB6D | 661C3513 | 261023A7  |
    |           |                   | FEFCF02D | B6A460DB | DC419451  |
    |           |                   | 4FCF6224 | 74331F51 | 288ED93F  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-87 | 51DF520B 9084E48B | 3ECF7F6A | 28EFCAD1 | 02FA4CF7  |
    |           | 72EAEBA7 FE36B540 | 89387291 | C1B528E0 | BF7F5BD1  |
    |           | 05CD963B 58CC25DE | 18CC21A1 | E46CB25D | 3874C77B  |
    |           | 79339948 FD561065 | 5B2B5933 | 28FA21DB | 30DAF708  |
    |           |                   | 7B24FD34 | A893010B | BAA3E2C0  |
    |           |                   | 38FB132D | 3C741D73 | 97D4298B  |
    |           |                   | 0162E53C | 1460988B | F242A07B  |
    |           |                   | 28CB374C | 66985D78 | F68D7AD6  |
    +-----------+-------------------+----------+----------+-----------+
    | ML-DSA-87 | 6857AF5C 878EFF78 | 9A2B47D3 | 3165118C | 697E02D5  |
    |           | 92F1722D 8CE11F47 | 4624BA79 | 135D81E4 | 0185F96C  |
    |           | 84B9D144 B50B23B5 | 7ECE8C7C | 6700B182 | 420015F1  |
    |           | 3070963B 501054E6 | 67FAADB2 | 80A8D01D | C03A2DD4  |
    |           |                   | B2DA6C5C | F39A4B1A | 64593E0A  |
    |           |                   | 802B3CFB | 9C24748A | BD0493E0  |
    |           |                   | 22D8167F | EE3FC320 | 99D8774B  |
    |           |                   | 4B52D6EB | 62DD251E | 26C30C2F  |
    +-----------+-------------------+----------+----------+-----------+

      Table 1: ML-DSA Algorithm 7 ML-DSA.Sign_internal() Known Answer
                         Tests for Rejection Cases

   +===========+===========+=========+==========+==========+===========+
   | Security  | Rejection |Seed     | Key Hash | M'       | Signature |
   | Level     | Count     |         |          |          | Hash      |
   +===========+===========+=========+==========+==========+===========+
   | ML-DSA-44 | 77        |090D97C1 | 26D79E40 | E3838364 | CD91150C  |
   |           |           |F4166EB3 | 68040E99 | B37F47ED | 610FF02D  |
   |           |           |2CA67C5F | 6BC9EB50 | FCA2B577 | E1DD7049  |
   |           |           |B564ACBE | 34C20489 | B20B80C3 | C309EFE8  |
   |           |           |0735DB4A | C0AD38DC | CB51B9F5 | 00CE5C1B  |
   |           |           |F4B8DB3A | 2FEC1918 | 6E0E4CDB | C2E5A32D  |
   |           |           |7C2CE740 | D0760C86 | 7DF002C8 | 752AB62C  |
   |           |           |2357CA44 | 21872408 | 74039252 | 5BF5E16F  |
   +-----------+-----------+---------+----------+----------+-----------+
   | ML-DSA-44 | 100       |CFC73D07 | 89142AB2 | 0960C13E | B6296FFF  |
   |           |           |A883543A | 6D6EB6C0 | 9BA467A9 | 0C1F23DE  |
   |           |           |804F7700 | 1FA3F189 | 38450120 | 4906D581  |
   |           |           |70861825 | A9C87759 | CC96FF6F | 44B00A2D  |
   |           |           |143A62F2 | 7740D685 | 04B7E557 | B13AD25E  |
   |           |           |F97D05FC | 983F29BB | C99A8386 | 49B4B857  |
   |           |           |E00FD8B2 | DD359664 | 19A48F9A | 3A62EFEE  |



Celi                      Expires 20 April 2026                 [Page 9]

Internet-Draft                 ACVP ML-DSA                  October 2025


   |           |           |5D29A43F | 8266AE0E | 38738AB8 | CB544DD7  |
   +-----------+-----------+---------+----------+----------+-----------+
   | ML-DSA-65 | 111       |111BDFD1 | C06FE457 | A30975C7 | CADA29AE  |
   |           |           |3CF30B4A | 14696FF2 | C58ABC8F | EC8E59CD  |
   |           |           |05F8C56E | C77BB4CD | E7FAE442 | 70747C2E  |
   |           |           |91E20025 | 96E70BE9 | FE20F964 | 4C83F963  |
   |           |           |B284EFDC | 539117AC | 410B74E9 | 7E3C2495  |
   |           |           |661C349D | 3D2E3F77 | B4C1D47E | 3F11ADEE  |
   |           |           |430FB988 | C736B060 | 440223C5 | F586F786  |
   |           |           |149219EE | 8D9E78B6 | A46DA72C | 35B3E60A  |
   +-----------+-----------+---------+----------+----------+-----------+
   | ML-DSA-65 | 96        |F3A3F2C3 | 997CEE99 | 1C00F3E4 | 006B205B  |
   |           |           |263A7042 | 5EECE252 | CF07BD4F | FA8DFF6C  |
   |           |           |95E9D9F7 | 8155E1AE | B797D683 | 2AA4237A  |
   |           |           |3CD97D02 | 0095116C | 76EEC537 | 6BB5A33D  |
   |           |           |F4682BEE | 6D97B150 | 01730C49 | BD1B3D97  |
   |           |           |5949C416 | 8B76AD25 | 09EC404F | 13B99A9D  |
   |           |           |BC42C85B | BAE4ADF6 | C93A6B7F | 5AF9A882  |
   |           |           |7C864446 | B60AE6A2 | 597F81B5 | CD0BA1E0  |
   +-----------+-----------+---------+----------+----------+-----------+
   | ML-DSA-87 | 66        |C4B614E8 | 5BCAD035 | B9CFA245 | 5B23E5CE  |
   |           |           |3CF6E25A | 7C6F3911 | C90359EF | C5B09134  |
   |           |           |159A542B | 68B00523 | 041163A4 | 2EF7D5BB  |
   |           |           |9E132AA0 | CD7B1333 | 7231885E | 8C50285A  |
   |           |           |68FACCD8 | 5F95996B | 56CB0215 | 9666CF93  |
   |           |           |755AA8B4 | F5432545 | 984DE8A8 | 7BBE1758  |
   |           |           |E22C6F6C | 5484B830 | 9941FE44 | 532B341B  |
   |           |           |0438BF16 | 15925580 | 3CACEB61 | 0942994B  |
   +-----------+-----------+---------+----------+----------+-----------+
   | ML-DSA-87 | 77        |771E9543 | C56A924B | C367382D | 4996F774  |
   |           |           |4E410291 | F6B046DA | 0E3FEE86 | 3E90DAEB  |
   |           |           |93D076B8 | 3CACC10B | D29BAB0E | 61B5FF86  |
   |           |           |06F2C3C2 | 72749ECF | E5FD6AE9 | A868C9E5  |
   |           |           |2A7F2060 | 54266B38 | 1B3A5A70 | 195F201C  |
   |           |           |287791E7 | A7E3D5C5 | 17A024CF | 4E5F5A75  |
   |           |           |0F105ECA | 81D0A44F | 145A25F5 | F4C79031  |
   |           |           |EAB7AD69 | 1F3995D8 | 6A62B0B1 | AAA6C544  |
   +-----------+-----------+---------+----------+----------+-----------+

      Table 2: ML-DSA Algorithm 7 ML-DSA.Sign_internal() Known Answer
                    Tests for Number of Rejection Cases

6.1.3.  ML-DSA SigVer Test Types

   *  ML-DSA / sigVer / * "AFT" - Algorithm Functional Test.






Celi                      Expires 20 April 2026                [Page 10]

Internet-Draft                 ACVP ML-DSA                  October 2025


   The IUT SHALL determine the validity of the signature based on the
   ACVP-provided message, mu (for external mu testing), context (for
   external interface testing), hashAlg (for preHash testing), public
   key, and signature.  This tests the implementation of Algorithm 3 ML-
   DSA.Verify(), Algorithm 5 HashML-DSA.Verify(), and Algorithm 8 ML-
   DSA.Verify_internal() from [FIPS204].  Tests for signature
   verification are performed by the server modifying a valid signature
   to obtain specific assurances from the implementation.  The server
   SHALL include at least 3 tests for each modification type (including
   "valid signature") for all combinations of capabilities.  The
   "hashAlg" capability MAY be excluded from the combination of
   capabilities due to the number of supported hash functions.  Each
   "hashAlg" provided by the IUT SHALL be covered within the, minimum,
   15 tests generated for each combination of capabilities.

   The signature modifications are:

   *  "valid signature and message - signature should verify
      successfully" - No modification is made and the signature is
      valid.

   *  "modified message" - The message that was signed has been changed.
      The signature is not valid.

   *  "modified signature - commitment" - A component of the signature,
      the bytes that commit the signer to the message, has been changed.
      The signature is not valid.

   *  "modified signature - z" - A component of the signature, the bytes
      that allow the verifier to construct the vector z, has been
      changed.  The signature is not valid.

   *  "modified signature - hint" - A component of the signature, the
      bytes that allow the verifier to construct the hint array, has
      been changed.  The signature is not valid.

6.2.  Test Coverage

   The tests described in this document have the intention of ensuring
   an implementation is conformant to [FIPS204].

6.2.1.  Requirements Covered

   *  The tests will ensure conformity and correctness of an
      implementation of the algorithms supported.

6.2.2.  Requirements Not Covered




Celi                      Expires 20 April 2026                [Page 11]

Internet-Draft                 ACVP ML-DSA                  October 2025


   *  FIPS 204 Section 3.5.  Additional Requirements.  Requirements
      outlined in this section are not testable by an ACVP server.  An
      ACVP server will not test the zeroization of intermediate values,
      security strength of the deterministic random bit generators
      (DRBGs), or incorrect length signatures or public keys.

7.  Capabilities Registration

   ACVP requires crypto modules to register their capabilities.  This
   allows the crypto module to advertise support for specific
   algorithms, notifying the ACVP server which algorithms need test
   vectors generated for the validation process.  This section describes
   the constructs for advertising support of ML-DSA algorithms to the
   ACVP server.

   The algorithm capabilities MUST be advertised as JSON objects within
   the 'algorithms' value of the ACVP registration message.  The
   'algorithms' value is an array, where each array element is an
   individual JSON object defined in this section.  The 'algorithms'
   value is part of the 'capability_exchange' element of the ACVP JSON
   registration message.  See the ACVP specification [ACVP] for more
   details on the registration message.

7.1.  Prerequisites

   Each algorithm implementation MAY rely on other cryptographic
   primitives.  For example, RSA Signature algorithms depend on an
   underlying hash function.  Each of these underlying algorithm
   primitives must be validated, either separately or as part of the
   same submission.  ACVP provides a mechanism for specifying the
   required prerequisites:

   Prerequisites, if applicable, MUST be submitted in the registration
   as the prereqVals JSON property array inside each element of the
   algorithms array.  Each element in the prereqVals array MUST contain
   the following properties

        +===============+=============================+===========+
        | JSON Property | Description                 | JSON Type |
        +===============+=============================+===========+
        | algorithm     | a prerequisite algorithm    | string    |
        +---------------+-----------------------------+-----------+
        | valValue      | algorithm validation number | string    |
        +---------------+-----------------------------+-----------+

                      Table 3: Prerequisite Properties





Celi                      Expires 20 April 2026                [Page 12]

Internet-Draft                 ACVP ML-DSA                  October 2025


   A "valValue" of "same" SHALL be used to indicate that the
   prerequisite is being met by a different algorithm in the capability
   exchange in the same registration.

   An example description of prerequisites within a single algorithm
   capability exchange looks like this

   "prereqVals":
   [
     {
       "algorithm": "Alg1",
       "valValue": "Val-1234"
     },
     {
       "algorithm": "Alg2",
       "valValue": "same"
     }
   ]

7.2.  Required Prerequisite Algorithms for ML-DSA Validations

   Each ML-DSA implementation relies on other cryptographic primitives.
   For example, ML-DSA keyGen uses an underlying SHA algorithm.  Each of
   these underlying algorithm primitives must be validated, either
   separately or as part of the same submission.  ACVP provides a
   mechanism for specifying the required prerequisites:

    +==============+================+=====================+===========+
    | JSON Value   | Description    | JSON Type           | Valid     |
    |              |                |                     | Values    |
    +==============+================+=====================+===========+
    | algorithm    | a prerequisite | string              | SHA, or   |
    |              | algorithm      |                     | DRBG      |
    +--------------+----------------+---------------------+-----------+
    | valValue     | algorithm      | string              | Actual    |
    |              | validation     |                     | number or |
    |              | number         |                     | "same"    |
    +--------------+----------------+---------------------+-----------+
    | prereqAlgVal | prerequisite   | object with         | See above |
    |              | algorithm      | algorithm and       |           |
    |              | validation     | valValue properties |           |
    +--------------+----------------+---------------------+-----------+

        Table 4: Required ML-DSA Prerequisite Algorithms JSON Values







Celi                      Expires 20 April 2026                [Page 13]

Internet-Draft                 ACVP ML-DSA                  October 2025


7.3.  ML-DSA keyGen Registration Properties

   Each ML-DSA keyGen algorithm capability advertised is a self-
   contained JSON object using the following values.

     +===============+=================+==============+==============+
     | JSON Value    | Description     | JSON Type    | Valid Values |
     +===============+=================+==============+==============+
     | algorithm     | The ML-DSA      | string       | "ML-DSA"     |
     |               | algorithm to be |              |              |
     |               | validated       |              |              |
     +---------------+-----------------+--------------+--------------+
     | mode          | The ML-DSA mode | string       | "keyGen"     |
     |               | to be validated |              |              |
     +---------------+-----------------+--------------+--------------+
     | revision      | The algorithm   | string       | "FIPS204"    |
     |               | testing         |              |              |
     |               | revision to use |              |              |
     +---------------+-----------------+--------------+--------------+
     | prereqVals    | Prerequisite    | array of     | See          |
     |               | algorithm       | prereqAlgVal | Section 7.2  |
     |               | validations     | objects      |              |
     +---------------+-----------------+--------------+--------------+
     | parameterSets | The ML-DSA      | array of     | "ML-DSA-44", |
     |               | parameter sets  | strings      | "ML-DSA-65", |
     |               | supported       |              | "ML-DSA-87"  |
     +---------------+-----------------+--------------+--------------+

         Table 5: ML-DSA keyGen Algorithm Capabilities JSON Values

7.3.1.  ML-DSA keyGen Mode Capabilities Example

   Below is an example of the registration for ML-DSA / keyGen / FIPS204

   {
       "algorithm": "ML-DSA",
       "mode": "keyGen",
       "revision": "FIPS204",
       "prereqVals": [
           {
               "algorithm": "SHA",
               "valValue": "123456"
           }
       ],
       "parameterSets": ["ML-DSA-44", "ML-DSA-65", "ML-DSA-87"]
   }





Celi                      Expires 20 April 2026                [Page 14]

Internet-Draft                 ACVP ML-DSA                  October 2025


7.4.  ML-DSA sigGen Registration Properties

   Each ML-DSA sigGen algorithm capability advertised is a self-
   contained JSON object using the following values.















































Celi                      Expires 20 April 2026                [Page 15]

Internet-Draft                 ACVP ML-DSA                  October 2025


   +===================+======================+============+===========+
   |JSON Value         |Description           |JSON Type   |Valid      |
   |                   |                      |            |Values     |
   +===================+======================+============+===========+
   |algorithm          |The ML-DSA algorithm  |string      |"ML-DSA"   |
   |                   |to be validated       |            |           |
   +-------------------+----------------------+------------+-----------+
   |mode               |The ML-DSA mode to be |string      |"sigGen"   |
   |                   |validated             |            |           |
   +-------------------+----------------------+------------+-----------+
   |revision           |The algorithm testing |string      |"FIPS204"  |
   |                   |revision to use       |            |           |
   +-------------------+----------------------+------------+-----------+
   |prereqVals         |Prerequisite algorithm|array of    |See        |
   |                   |validations           |prereqAlgVal|Section 7.2|
   |                   |                      |objects     |           |
   +-------------------+----------------------+------------+-----------+
   |capabilities       |An array of individual|array of    |See Table 7|
   |                   |capability objects    |capability  |           |
   |                   |                      |objects     |           |
   +-------------------+----------------------+------------+-----------+
   |deterministic      |The ML-DSA signature  |array of    |true, false|
   |                   |generation modes      |booleans    |           |
   |                   |supported             |            |           |
   +-------------------+----------------------+------------+-----------+
   |signatureInterfaces|The ML-DSA signature  |array of    |"internal",|
   |                   |interfaces supported  |strings     |"external" |
   +-------------------+----------------------+------------+-----------+
   |preHash            |Whether ML-DSA and    |array of    |"pure",    |
   |                   |HashML-DSA are        |strings     |"preHash"  |
   |                   |supported.  Only      |            |           |
   |                   |required when         |            |           |
   |                   |"signatureInterfaces" |            |           |
   |                   |contains "external".  |            |           |
   +-------------------+----------------------+------------+-----------+
   |externalMu         |Whether mu is computed|array of    |true, false|
   |                   |internally to the     |booleans    |           |
   |                   |module or externally  |            |           |
   |                   |from the module under |            |           |
   |                   |test.  Only applicable|            |           |
   |                   |when                  |            |           |
   |                   |"signatureInterfaces" |            |           |
   |                   |contains "internal".  |            |           |
   +-------------------+----------------------+------------+-----------+

         Table 6: ML-DSA sigGen Algorithm Capabilities JSON Values

   The capability objects use the following properties.



Celi                      Expires 20 April 2026                [Page 16]

Internet-Draft                 ACVP ML-DSA                  October 2025


   +===============+==============+=========+==========================+
   | JSON Value    | Description  | JSON    | Valid Values             |
   |               |              | Type    |                          |
   +===============+==============+=========+==========================+
   | parameterSets | The ML-DSA   | array   | "ML-DSA-44", "ML-DSA-    |
   |               | parameter    | of      | 65", "ML-DSA-87"         |
   |               | sets         | strings |                          |
   |               | supported    |         |                          |
   +---------------+--------------+---------+--------------------------+
   | messageLength | The          | domain  | Min: 8, Max: 65536,      |
   |               | supported    |         | Incr: 8                  |
   |               | message      |         |                          |
   |               | lengths in   |         |                          |
   |               | bits         |         |                          |
   +---------------+--------------+---------+--------------------------+
   | hashAlgs      | The hash     | array   | "SHA2-224", "SHA2-256",  |
   |               | algorithms   | of      | "SHA2-384", "SHA2-512",  |
   |               | used if      | strings | "SHA2-512/224",          |
   |               | preHash ML-  |         | "SHA2-512/256",          |
   |               | DSA is used  |         | "SHA3-224", "SHA3-256",  |
   |               |              |         | "SHA3-384", "SHA3-512",  |
   |               |              |         | "SHAKE-128", "SHAKE-256" |
   +---------------+--------------+---------+--------------------------+
   | contextLength | The          | domain  | Min: 0, Max: 2040, Incr: |
   |               | supported    |         | 8                        |
   |               | context      |         |                          |
   |               | lengths if   |         |                          |
   |               | the          |         |                          |
   |               | external     |         |                          |
   |               | interface    |         |                          |
   |               | is used      |         |                          |
   +---------------+--------------+---------+--------------------------+

           Table 7: ML-DSA sigGen Capability Property JSON Values

7.4.1.  ML-DSA sigGen Mode Capabilities Example

   Below is an example of the registration for ML-DSA / sigGen / FIPS204

   {
     "algorithm": "ML-DSA",
     "mode": "sigGen",
     "revision": "FIPS204",
     "prereqVals": [
       {
         "algorithm": "SHA",
         "valValue": "123456"
       }



Celi                      Expires 20 April 2026                [Page 17]

Internet-Draft                 ACVP ML-DSA                  October 2025


     ],
     "capabilities": [
       {
         "parameterSets": [
           "ML-DSA-44",
           "ML-DSA-65",
           "ML-DSA-87"
         ],
         "messageLength": [
           {
             "min": 8,
             "max": 65536,
             "increment": 8
           }
         ],
         "hashAlgs": [
           "SHA2-224",
           "SHA2-256",
           "SHA2-384",
           "SHA2-512",
           "SHA2-512/224",
           "SHA2-512/256",
           "SHA3-224",
           "SHA3-256",
           "SHA3-384",
           "SHA3-512",
           "SHAKE-128",
           "SHAKE-256"
         ],
         "contextLength": [
           {
             "min": 0,
             "max": 2040,
             "increment": 8
           }
         ]
       }
     ],
     "deterministic": [
       true,
       false
     ],
     "externalMu": [
       true,
       false
     ],
     "signatureInterfaces": [
       "external",



Celi                      Expires 20 April 2026                [Page 18]

Internet-Draft                 ACVP ML-DSA                  October 2025


       "internal"
     ],
     "preHash": [
       "pure",
       "preHash"
     ]
   }

7.5.  ML-DSA sigVer Registration Properties

   Each ML-DSA sigVer algorithm capability advertised is a self-
   contained JSON object using the following values.







































Celi                      Expires 20 April 2026                [Page 19]

Internet-Draft                 ACVP ML-DSA                  October 2025


   +===================+======================+============+===========+
   |JSON Value         |Description           |JSON Type   |Valid      |
   |                   |                      |            |Values     |
   +===================+======================+============+===========+
   |algorithm          |The ML-DSA algorithm  |string      |"ML-DSA"   |
   |                   |to be validated       |            |           |
   +-------------------+----------------------+------------+-----------+
   |mode               |The ML-DSA mode to be |string      |"sigVer"   |
   |                   |validated             |            |           |
   +-------------------+----------------------+------------+-----------+
   |revision           |The algorithm testing |string      |"FIPS204"  |
   |                   |revision to use       |            |           |
   +-------------------+----------------------+------------+-----------+
   |prereqVals         |Prerequisite algorithm|array of    |See        |
   |                   |validations           |prereqAlgVal|Section 7.2|
   |                   |                      |objects     |           |
   +-------------------+----------------------+------------+-----------+
   |capabilities       |An array of individual|array of    |See Table 9|
   |                   |capability objects    |capability  |           |
   |                   |                      |objects     |           |
   +-------------------+----------------------+------------+-----------+
   |signatureInterfaces|The ML-DSA signature  |array of    |"internal",|
   |                   |interfaces supported  |strings     |"external" |
   +-------------------+----------------------+------------+-----------+
   |preHash            |Whether ML-DSA and    |array of    |"pure",    |
   |                   |HashML-DSA are        |strings     |"preHash"  |
   |                   |supported.  Only      |            |           |
   |                   |required when         |            |           |
   |                   |"signatureInterfaces" |            |           |
   |                   |contains "external".  |            |           |
   +-------------------+----------------------+------------+-----------+
   |externalMu         |Whether mu is computed|array of    |true, false|
   |                   |internally to the     |booleans    |           |
   |                   |module or externally  |            |           |
   |                   |from the module under |            |           |
   |                   |test.  Only applicable|            |           |
   |                   |when                  |            |           |
   |                   |"signatureInterfaces" |            |           |
   |                   |contains "internal".  |            |           |
   +-------------------+----------------------+------------+-----------+

         Table 8: ML-DSA sigVer Algorithm Capabilities JSON Values

   The capability objects use the following properties.







Celi                      Expires 20 April 2026                [Page 20]

Internet-Draft                 ACVP ML-DSA                  October 2025


   +===============+==============+=========+==========================+
   | JSON Value    | Description  | JSON    | Valid Values             |
   |               |              | Type    |                          |
   +===============+==============+=========+==========================+
   | parameterSets | The ML-DSA   | array   | "ML-DSA-44", "ML-DSA-    |
   |               | parameter    | of      | 65", "ML-DSA-87"         |
   |               | sets         | strings |                          |
   |               | supported    |         |                          |
   +---------------+--------------+---------+--------------------------+
   | messageLength | The          | domain  | Min: 8, Max: 65536,      |
   |               | supported    |         | Incr: 8                  |
   |               | message      |         |                          |
   |               | lengths in   |         |                          |
   |               | bits         |         |                          |
   +---------------+--------------+---------+--------------------------+
   | hashAlgs      | The hash     | array   | "SHA2-224", "SHA2-256",  |
   |               | algorithms   | of      | "SHA2-384", "SHA2-512",  |
   |               | used if      | strings | "SHA2-512/224",          |
   |               | preHash ML-  |         | "SHA2-512/256",          |
   |               | DSA is used  |         | "SHA3-224", "SHA3-256",  |
   |               |              |         | "SHA3-384", "SHA3-512",  |
   |               |              |         | "SHAKE-128", "SHAKE-256" |
   +---------------+--------------+---------+--------------------------+
   | contextLength | The          | domain  | Min: 0, Max: 2040, Incr: |
   |               | supported    |         | 8                        |
   |               | context      |         |                          |
   |               | lengths if   |         |                          |
   |               | the          |         |                          |
   |               | external     |         |                          |
   |               | interface    |         |                          |
   |               | is used      |         |                          |
   +---------------+--------------+---------+--------------------------+

           Table 9: ML-DSA sigVer Capability Property JSON Values

7.5.1.  ML-DSA sigVer Mode Capabilities Example

   Below is an example of the registration for ML-DSA / sigVer / FIPS204

   {
     "algorithm": "ML-DSA",
     "mode": "sigVer",
     "revision": "FIPS204",
     "prereqVals": [
       {
         "algorithm": "SHA",
         "valValue": "123456"
       }



Celi                      Expires 20 April 2026                [Page 21]

Internet-Draft                 ACVP ML-DSA                  October 2025


     ],
     "capabilities": [
       {
         "parameterSets": [
           "ML-DSA-44",
           "ML-DSA-65",
           "ML-DSA-87"
         ],
         "messageLength": [
           {
             "min": 8,
             "max": 65536,
             "increment": 8
           }
         ],
         "hashAlgs": [
           "SHA2-224",
           "SHA2-256",
           "SHA2-384",
           "SHA2-512",
           "SHA2-512/224",
           "SHA2-512/256",
           "SHA3-224",
           "SHA3-256",
           "SHA3-384",
           "SHA3-512",
           "SHAKE-128",
           "SHAKE-256"
         ],
         "contextLength": [
           {
             "min": 0,
             "max": 2040,
             "increment": 8
           }
         ]
       }
     ],
     "externalMu": [
       true,
       false
     ],
     "signatureInterfaces": [
       "external",
       "internal"
     ],
     "preHash": [
       "pure",



Celi                      Expires 20 April 2026                [Page 22]

Internet-Draft                 ACVP ML-DSA                  October 2025


       "preHash"
     ]
   }

8.  Test Vectors

   The ACVP server provides test vectors to the ACVP client, which are
   then processed and returned to the ACVP server for validation.  A
   typical ACVP validation test session would require multiple test
   vector sets to be downloaded and processed by the ACVP client.  Each
   test vector set represents an individual cryptographic algorithm
   defined during the capability exchange.  This section describes the
   JSON schema for a test vector set used with Module Lattice-based
   Digital Signature Algorithm (ML-DSA) algorithms.

   The test vector set JSON schema is a multi-level hierarchy that
   contains meta data for the entire vector set as well as individual
   test vectors to be processed by the ACVP client.  The following table
   describes the JSON elements at the top level of the hierarchy.

         +============+================================+=========+
         | JSON       | Description                    | JSON    |
         | Values     |                                | Type    |
         +============+================================+=========+
         | acvVersion | Protocol version identifier    | string  |
         +------------+--------------------------------+---------+
         | vsId       | Unique numeric vector set      | integer |
         |            | identifier                     |         |
         +------------+--------------------------------+---------+
         | algorithm  | Algorithm defined in the       | string  |
         |            | capability exchange            |         |
         +------------+--------------------------------+---------+
         | mode       | Mode defined in the capability | string  |
         |            | exchange                       |         |
         +------------+--------------------------------+---------+
         | revision   | Protocol test revision         | string  |
         |            | selected                       |         |
         +------------+--------------------------------+---------+
         | testGroups | Array of test group JSON       | array   |
         |            | objects.  Depending on the     |         |
         |            | algorithm, see Section 8.1.1,  |         |
         |            | Section 8.2.1 or Section 8.3.1 |         |
         +------------+--------------------------------+---------+

               Table 10: Top Level Test Vector JSON Elements

   An example of this would look like this




Celi                      Expires 20 April 2026                [Page 23]

Internet-Draft                 ACVP ML-DSA                  October 2025


   [
     {
       "acvVersion": <version>
     },
     {
       "vsId": 1,
       "algorithm": "Alg1",
       "mode": "Mode1",
       "revision": "Revision1.0",
       "testGroups": [ ... ]
     }
   ]

8.1.  ML-DSA keyGen Test Vectors

8.1.1.  ML-DSA keyGen Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the ML-DSA JSON elements of the Test Group
   JSON object.

   The test group for ML-DSA / keyGen / FIPS204 is as follows:

    +==============+========================================+=========+
    | JSON Value   | Description                            | JSON    |
    |              |                                        | type    |
    +==============+========================================+=========+
    | tgId         | Numeric identifier for the test group, | integer |
    |              | unique across the entire vector set    |         |
    +--------------+----------------------------------------+---------+
    | testType     | The test operation performed           | string  |
    +--------------+----------------------------------------+---------+
    | parameterSet | The ML-DSA parameter set used          | string  |
    +--------------+----------------------------------------+---------+
    | tests        | Array of individual test vector JSON   | array   |
    |              | objects, which are defined in          |         |
    |              | Section 8.1.2                          |         |
    +--------------+----------------------------------------+---------+

               Table 11: ML-DSA keyGen Test Group JSON Object






Celi                      Expires 20 April 2026                [Page 24]

Internet-Draft                 ACVP ML-DSA                  October 2025


8.1.2.  ML-DSA keyGen Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each ML-DSA test vector.

    +============+=======================================+===========+
    | JSON Value | Description                           | JSON type |
    +============+=======================================+===========+
    | tcId       | Numeric identifier for the test case, | integer   |
    |            | unique across the entire vector set   |           |
    +------------+---------------------------------------+-----------+
    | seed       | The seed used to generate the key     | hex       |
    |            | pair                                  |           |
    +------------+---------------------------------------+-----------+

              Table 12: ML-DSA keyGen Test Case JSON Object

   The following is an example JSON object sent from the server to the
   client for ML-DSA / keyGen / FIPS204.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 1564,
           "algorithm": "ML-DSA",
           "mode": "keyGen",
           "revision": "FIPS204",
           "testGroups": [
               {
                   "tgId": 1,
                   "testType": "AFT",
                   "parameterSet": "ML-DSA-44",
                   "tests": [
                       {
                           "tcId": 1,
                           "seed": "C105DC2..."
                       }
                   ]
               }
           ]
       }
   ]





Celi                      Expires 20 April 2026                [Page 25]

Internet-Draft                 ACVP ML-DSA                  October 2025


8.2.  ML-DSA sigGen Test Vectors

8.2.1.  ML-DSA sigGen Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the ML-DSA JSON elements of the Test Group
   JSON object.

   The test group for ML-DSA / sigGen / FIPS204 is as follows:





































Celi                      Expires 20 April 2026                [Page 26]

Internet-Draft                 ACVP ML-DSA                  October 2025


   +====================+===================================+=========+
   | JSON Value         | Description                       | JSON    |
   |                    |                                   | type    |
   +====================+===================================+=========+
   | tgId               | Numeric identifier for the test   | integer |
   |                    | group, unique across the entire   |         |
   |                    | vector set                        |         |
   +--------------------+-----------------------------------+---------+
   | testType           | The test operation performed      | string  |
   +--------------------+-----------------------------------+---------+
   | parameterSet       | The ML-DSA parameter set used     | string  |
   +--------------------+-----------------------------------+---------+
   | deterministic      | Whether the signatures should be  | boolean |
   |                    | generated using the deterministic |         |
   |                    | or non-deterministic routine      |         |
   +--------------------+-----------------------------------+---------+
   | signatureInterface | Whether the signature is          | string  |
   |                    | generated using the internal or   |         |
   |                    | external routine                  |         |
   +--------------------+-----------------------------------+---------+
   | preHash            | Whether the signature is          | string  |
   |                    | generated using the prehash or    |         |
   |                    | pure routine                      |         |
   +--------------------+-----------------------------------+---------+
   | externalMu         | Whether mu is computed internally | string  |
   |                    | or externally to the module under |         |
   |                    | test                              |         |
   +--------------------+-----------------------------------+---------+
   | tests              | Array of individual test vector   | array   |
   |                    | JSON objects, which are defined   |         |
   |                    | in Section 8.2.2                  |         |
   +--------------------+-----------------------------------+---------+

              Table 13: ML-DSA sigGen Test Group JSON Object

      |  NOTE: The "preHash" property will only be present if
      |  "signatureInterface" is set to "external".  The "externalMu"
      |  property will only be present if "signatureInterface" is set to
      |  "internal".

8.2.2.  ML-DSA sigGen Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each ML-DSA test vector.





Celi                      Expires 20 April 2026                [Page 27]

Internet-Draft                 ACVP ML-DSA                  October 2025


   +=========+==============================================+=========+
   | JSON    | Description                                  | JSON    |
   | Value   |                                              | type    |
   +=========+==============================================+=========+
   | tcId    | Numeric identifier for the test case, unique | integer |
   |         | across the entire vector set                 |         |
   +---------+----------------------------------------------+---------+
   | message | The message used to generate the signature   | hex     |
   +---------+----------------------------------------------+---------+
   | mu      | The mu used to generate the signature        | hex     |
   +---------+----------------------------------------------+---------+
   | sk      | When the test group property "testType":     | hex     |
   |         | "AFT", the secret key that should be used to |         |
   |         | generate a signature                         |         |
   +---------+----------------------------------------------+---------+
   | rnd     | When the test group properties "testType":   | hex     |
   |         | "AFT" and "deterministic": false, the random |         |
   |         | value used to generate the signature         |         |
   +---------+----------------------------------------------+---------+
   | context | When the test group property                 | hex     |
   |         | "signatureInterface": "external", the        |         |
   |         | context used to construct the signed message |         |
   +---------+----------------------------------------------+---------+
   | hashAlg | When the test group property "preHash":      | string  |
   |         | "preHash", the hash function used to         |         |
   |         | construct the signed message                 |         |
   +---------+----------------------------------------------+---------+

              Table 14: ML-DSA sigGen Test Case JSON Object

      |  NOTE: When "signatureInterface" is set to "internal" for the
      |  test group, the "message" will only be present when
      |  "externalMu" is false, while "mu" will only be present when
      |  "externalMu" is true.

   The following is an example JSON object sent from the server to the
   client for ML-DSA / sigGen / FIPS204.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 0,
           "algorithm": "ML-DSA",
           "mode": "sigGen",
           "revision": "FIPS204",
           "testGroups": [



Celi                      Expires 20 April 2026                [Page 28]

Internet-Draft                 ACVP ML-DSA                  October 2025


               {
                   "tgId": 1,
                   "testType": "AFT",
                   "parameterSet": "ML-DSA-44",
                   "signatureInterface": "internal",
                   "externalMu": false,
                   "deterministic": true,
                   "tests": [
                       {
                           "tcId": 1,
                           "sk": "D4E36A5...",
                           "message": "0D873AEFD..."
                       }
                   ]
               },
               {
                   "tgId": 2,
                   "testType": "AFT",
                   "parameterSet": "ML-DSA-44",
                   "signatureInterface": "internal",
                   "externalMu": true,
                   "deterministic": false,
                   "tests": [
                       {
                           "tcId": 71,
                           "sk": "D4E36A5...",
                           "mu": "34F4B...",
                           "rnd": "7AFF2F22A..."
                       }
                   ]
               },
               {
                   "tgId": 3,
                   "testType": "AFT",
                   "parameterSet": "ML-DSA-44",
                   "signatureInterface": "external",
                   "preHash": "pure",
                   "deterministic": true,
                   "tests": [
                       {
                           "tcId": 71,
                           "sk": "D4E36A5...",
                           "message": "34F4B...",
                           "context": "ABCD"
                       }
                   ]
               },
               {



Celi                      Expires 20 April 2026                [Page 29]

Internet-Draft                 ACVP ML-DSA                  October 2025


                   "tgId": 4,
                   "testType": "AFT",
                   "parameterSet": "ML-DSA-44",
                   "signatureInterface": "external",
                   "preHash": "preHash",
                   "deterministic": false,
                   "tests": [
                       {
                           "tcId": 71,
                           "sk": "D4E36A5...",
                           "message": "34F4B...",
                           "rnd": "7AFF2F22A...",
                           "context": "ABCD",
                           "hashAlg": "SHA2-256"
                       }
                   ]
               }
           ]
       }
   ]

8.3.  ML-DSA sigVer Test Vectors

8.3.1.  ML-DSA sigVer Test Groups JSON Schema

   The testGroups element at the top level in the test vector JSON
   object is an array of test groups.  Test vectors are grouped into
   similar test cases to reduce the amount of data transmitted in the
   vector set.  For instance, all test vectors that use the same key
   size would be grouped together.  The Test Group JSON object contains
   meta data that applies to all test vectors within the group.  The
   following table describes the ML-DSA JSON elements of the Test Group
   JSON object.

   The test group for ML-DSA / sigVer / FIPS204 is as follows:
















Celi                      Expires 20 April 2026                [Page 30]

Internet-Draft                 ACVP ML-DSA                  October 2025


      +====================+==============================+=========+
      | JSON Value         | Description                  | JSON    |
      |                    |                              | type    |
      +====================+==============================+=========+
      | tgId               | Numeric identifier for the   | integer |
      |                    | test group, unique across    |         |
      |                    | the entire vector set        |         |
      +--------------------+------------------------------+---------+
      | testType           | The test operation performed | string  |
      +--------------------+------------------------------+---------+
      | parameterSet       | The ML-DSA parameter set     | string  |
      |                    | used                         |         |
      +--------------------+------------------------------+---------+
      | signatureInterface | Whether the signature is     | string  |
      |                    | generated using the internal |         |
      |                    | or external routine          |         |
      +--------------------+------------------------------+---------+
      | preHash            | Whether the signature is     | string  |
      |                    | generated using the prehash  |         |
      |                    | or pure routine              |         |
      +--------------------+------------------------------+---------+
      | tests              | Array of individual test     | array   |
      |                    | vector JSON objects, which   |         |
      |                    | are defined in Section 8.3.2 |         |
      +--------------------+------------------------------+---------+

               Table 15: ML-DSA sigVer Test Group JSON Object

      |  NOTE: The "preHash" property will only be present if
      |  "signatureInterface" is set to "external".  The "externalMu"
      |  property will only be present if "signatureInterface" is set to
      |  "internal".

8.3.2.  ML-DSA sigVer Test Case JSON Schema

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each ML-DSA test vector.












Celi                      Expires 20 April 2026                [Page 31]

Internet-Draft                 ACVP ML-DSA                  October 2025


         +===========+=================================+=========+
         | JSON      | Description                     | JSON    |
         | Value     |                                 | type    |
         +===========+=================================+=========+
         | tcId      | Numeric identifier for the test | integer |
         |           | case, unique across the entire  |         |
         |           | vector set                      |         |
         +-----------+---------------------------------+---------+
         | pk        | The public key used to verify   | hex     |
         |           | the signature                   |         |
         +-----------+---------------------------------+---------+
         | message   | The message used to verify with | hex     |
         |           | the signature                   |         |
         +-----------+---------------------------------+---------+
         | mu        | The mu used to generate the     | hex     |
         |           | signature                       |         |
         +-----------+---------------------------------+---------+
         | signature | The signature to verify         | hex     |
         +-----------+---------------------------------+---------+
         | context   | When the test group property    | hex     |
         |           | "signatureInterface":           |         |
         |           | "external", the context used to |         |
         |           | construct the signed message    |         |
         +-----------+---------------------------------+---------+
         | hashAlg   | When the test group property    | string  |
         |           | "preHash": "preHash", the hash  |         |
         |           | function used to construct the  |         |
         |           | signed message                  |         |
         +-----------+---------------------------------+---------+

               Table 16: ML-DSA sigVer Test Case JSON Object

      |  NOTE: When "signatureInterface" is set to "internal" for the
      |  test group, the "message" will only be present when
      |  "externalMu" is false, while "mu" will only be present when
      |  "externalMu" is true.

   The following is an example JSON object sent from the server to the
   client for ML-DSA / sigVer / FIPS204.

   [
     {
       "acvVersion": <acvp-version>
     },
     {
       "vsId": 0,
       "algorithm": "ML-DSA",
       "mode": "sigVer",



Celi                      Expires 20 April 2026                [Page 32]

Internet-Draft                 ACVP ML-DSA                  October 2025


       "revision": "FIPS204",
       "isSample": false,
       "testGroups": [
         {
           "tgId": 1,
           "testType": "AFT",
           "parameterSet": "ML-DSA-44",
           "signatureInterface": "internal",
           "externalMu": false,
           "tests": [
             {
               "tcId": 1,
               "pk": "3FE65294...",
               "message": "4F0D7...",
               "signature": "C29A11B6C..."
             },
             {
               "tcId": 2,
               "pk": "3FE65294...",
               "message": "84793...",
               "signature": "6A99215FC2..."
             }
           ]
         },
         {
           "tgId": 2,
           "testType": "AFT",
           "parameterSet": "ML-DSA-44",
           "signatureInterface": "internal",
           "externalMu": true,
           "tests": [
             {
               "tcId": 3,
               "pk": "3FE65294...",
               "mu": "4F0D7...",
               "signature": "C29A11B6C..."
             }
           ]
         },
         {
           "tgId": 3,
           "testType": "AFT",
           "parameterSet": "ML-DSA-44",
           "signatureInterface": "external",
           "preHash": "pure",
           "tests": [
             {
               "tcId": 4,



Celi                      Expires 20 April 2026                [Page 33]

Internet-Draft                 ACVP ML-DSA                  October 2025


               "pk": "4C7029A9...",
               "message": "75E...",
               "context": "548...",
               "signature": "04D1B8..."
             },
           ]
         },
         {
           "tgId": 4,
           "testType": "AFT",
           "parameterSet": "ML-DSA-44",
           "signatureInterface": "external",
           "preHash": "preHash",
           "tests": [
             {
               "tcId": 5,
               "pk": "5FB42D9CF5EE...",
               "message": "8740606...",
               "context": "0710CE7...",
               "hashAlg": "SHA2-224",
               "signature": "C0D60..."
             }
           ]
         }
       ]
     }
   ]

9.  Test Vector Responses

   After the ACVP client downloads and processes a vector set, it must
   send the response vectors back to the ACVP server.  The following
   table describes the JSON object that represents a vector set
   response.

        +===============+============================+===========+
        | JSON Property | Description                | JSON Type |
        +===============+============================+===========+
        | acvVersion    | The ACVP version used      | string    |
        +---------------+----------------------------+-----------+
        | vsId          | The vector set identifier  | integer   |
        +---------------+----------------------------+-----------+
        | testGroups    | The test group objects in  | array     |
        |               | the response, see Table 18 |           |
        +---------------+----------------------------+-----------+

                      Table 17: Response JSON Object




Celi                      Expires 20 April 2026                [Page 34]

Internet-Draft                 ACVP ML-DSA                  October 2025


   An example of this is the following

   {
       "acvVersion": "version",
       "vsId": 1,
       "testGroups": [ ... ]
   }

   The 'testGroups' section is used to organize the ACVP client response
   in a similar manner to how it distributes vectors.

       +==========+======================================+=========+
       | JSON     | Description                          | JSON    |
       | Property |                                      | Type    |
       +==========+======================================+=========+
       | tgId     | The test group identifier            | integer |
       +----------+--------------------------------------+---------+
       | tests    | The test case objects in the         | array   |
       |          | response, depending on the algorithm |         |
       |          | see Table 19, Table 20, or Table 21  |         |
       +----------+--------------------------------------+---------+

                      Table 18: Response Group Objects

   An example of this is the following

   {
       "tgId": 1,
       "tests": [ ... ]
   }

9.1.  ML-DSA keyGen Test Vector Responses

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each ML-DSA / keyGen / FIPS204 test vector.














Celi                      Expires 20 April 2026                [Page 35]

Internet-Draft                 ACVP ML-DSA                  October 2025


           +============+==========================+===========+
           | JSON Value | Description              | JSON type |
           +============+==========================+===========+
           | tcId       | The test case identifier | integer   |
           +------------+--------------------------+-----------+
           | pk         | The computed public key  | hex       |
           +------------+--------------------------+-----------+
           | sk         | The computed secret key  | hex       |
           +------------+--------------------------+-----------+

              Table 19: ML-DSA keyGen Test Case Response JSON
                                   Object

   The following is an example JSON test vector response object for ML-
   DSA / keyGen / FIPS204.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 0,
           "testGroups": [
               {
                   "tgId": 1,
                   "tests": [
                       {
                           "tcId": 1,
                           "pk": "1012798...",
                           "sk": "1012798..."
                       }
                   ]
               }
           ]
       }
   ]

9.2.  ML-DSA sigGen Test Vector Responses

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each ML-DSA / sigGen / FIPS204 test vector.








Celi                      Expires 20 April 2026                [Page 36]

Internet-Draft                 ACVP ML-DSA                  October 2025


           +============+==========================+===========+
           | JSON Value | Description              | JSON type |
           +============+==========================+===========+
           | tcId       | The test case identifier | integer   |
           +------------+--------------------------+-----------+
           | signature  | The generated signature  | hex       |
           +------------+--------------------------+-----------+

              Table 20: ML-DSA sigGen Test Case Response JSON
                                   Object

   The following is an example JSON test vector response object for ML-
   DSA / sigGen / FIPS204.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 1564,
           "testGroups": [
               {
                   "tgId": 1,
                   "tests": [
                       {
                           "tcId": 1,
                           "signature": "D7D4275..."
                       }
                   ]
               }
           ]
       }
   ]

9.3.  ML-DSA sigVer Test Vector Responses

   Each test group contains an array of one or more test cases.  Each
   test case is a JSON object that represents a single test vector to be
   processed by the ACVP client.  The following table describes the JSON
   elements for each ML-DSA / sigVer / FIPS204 test vector.











Celi                      Expires 20 April 2026                [Page 37]

Internet-Draft                 ACVP ML-DSA                  October 2025


    +============+=======================================+===========+
    | JSON Value | Description                           | JSON type |
    +============+=======================================+===========+
    | tcId       | The test case identifier              | integer   |
    +------------+---------------------------------------+-----------+
    | testPassed | Whether or not the signature verified | boolean   |
    +------------+---------------------------------------+-----------+

          Table 21: ML-DSA sigVer Test Case Response JSON Object

   The following is an example JSON test vector response object for ML-
   DSA / sigVer / FIPS204.

   [
       {
           "acvVersion": <acvp-version>
       },
       {
           "vsId": 0,
           "testGroups": [
               {
                   "tgId": 1,
                   "tests": [
                       {
                           "tcId": 1,
                           "testPassed": false
                       }
                   ]
               }
           ]
       }
   ]

10.  Security Considerations

   There are no additional security considerations outside of those
   outlined in the ACVP document.

11.  IANA Considerations

   This document does not require any action by IANA.

12.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", RFC 2119, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.



Celi                      Expires 20 April 2026                [Page 38]

Internet-Draft                 ACVP ML-DSA                  October 2025


   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", RFC 8174, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [FIPS204]  National Institute of Standards and Technology, "Module-
              Lattice-Based Digital Signature Standard", NIST FIPS 204,
              August 2024, <https://csrc.nist.gov/pubs/fips/204/final>.

   [ACVP]     Fussell, B., Vassilev, A., and H. Booth, "Automatic
              Cryptographic Validation Protocol", ACVP, 1 July 2019.

   [PQCForum] "PQC-Forum", PQCForum,
              <https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/
              G8Zf0hC-uu0/m/Kb3qNJb0AwAJ>.

Author's Address

   Christopher Celi (editor)
   Email: christopher.celi@nist.gov
































Celi                      Expires 20 April 2026                [Page 39]
